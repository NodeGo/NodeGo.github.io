<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chelsia Daily Book</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.hqxdb.com/"/>
  <updated>2017-08-27T02:51:43.716Z</updated>
  <id>https://www.hqxdb.com/</id>
  
  <author>
    <name>Chelsia</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript 编码规范 - ESNext 补充篇（草案）</title>
    <link href="https://www.hqxdb.com/2017/08/23/JS%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83/es-next-style-guide/"/>
    <id>https://www.hqxdb.com/2017/08/23/JS书写规范/es-next-style-guide/</id>
    <published>2017-08-23T14:06:46.000Z</published>
    <updated>2017-08-27T02:51:43.716Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h2><p>随着 ECMAScript 的不断发展，越来越多更新的语言特性将被使用，给应用的开发带来方便。本文档的目标是使 ECMAScript 新特性的代码风格保持一致，并给予一些实践建议。</p>
<p>本文档仅包含新特性部分。基础部分请遵循 <a href="javascript-style-guide.md">JavaScript Style Guide</a>。</p>
<p>由于 ECMAScript 依然在快速的不断发展，本文档也将可能随时保持更新。更新内容主要涉及对新增的语言特性的格式规范化、实践指导，引擎与编译器环境变化的使用指导。</p>
<p>虽然本文档是针对 ECMAScript 设计的，但是在使用各种基于 ECMAScript 扩展的语言时(如 JSX、TypeScript 等)，适用的部分也应尽量遵循本文档的约定。</p>
<a id="more"></a> 
<h2 id="2-代码风格"><a href="#2-代码风格" class="headerlink" title="2 代码风格"></a>2 代码风格</h2><h3 id="2-1-文件"><a href="#2-1-文件" class="headerlink" title="2.1 文件"></a>2.1 文件</h3><h5 id="建议-ESNext-语法的-JavaScript-文件使用-js-扩展名。"><a href="#建议-ESNext-语法的-JavaScript-文件使用-js-扩展名。" class="headerlink" title="[建议] ESNext 语法的 JavaScript 文件使用 .js 扩展名。"></a>[建议] ESNext 语法的 JavaScript 文件使用 <code>.js</code> 扩展名。</h5><h5 id="强制-当文件无法使用-js-扩展名时，使用-es-扩展名。"><a href="#强制-当文件无法使用-js-扩展名时，使用-es-扩展名。" class="headerlink" title="[强制] 当文件无法使用 .js 扩展名时，使用 .es 扩展名。"></a>[强制] 当文件无法使用 <code>.js</code> 扩展名时，使用 <code>.es</code> 扩展名。</h5><p>解释：</p>
<p>某些应用开发时，可能同时包含 ES 5和 ESNext 文件，运行环境仅支持 ES5，ESNext 文件需要经过预编译。部分场景下，编译工具的选择可能需要通过扩展名区分，需要重新定义ESNext文件的扩展名。此时，ESNext 文件必须使用 <code>.es</code> 扩展名。</p>
<p>但是，更推荐使用其他条件作为是否需要编译的区分：</p>
<ol>
<li>基于文件内容。</li>
<li>不同类型文件放在不同目录下。</li>
</ol>
<h3 id="2-2-结构"><a href="#2-2-结构" class="headerlink" title="2.2 结构"></a>2.2 结构</h3><h4 id="2-2-1-缩进"><a href="#2-2-1-缩进" class="headerlink" title="2.2.1 缩进"></a>2.2.1 缩进</h4><h5 id="建议-使用多行模板字符串时遵循缩进原则。当空行与空白字符敏感时，不使用多行模板字符串。"><a href="#建议-使用多行模板字符串时遵循缩进原则。当空行与空白字符敏感时，不使用多行模板字符串。" class="headerlink" title="[建议] 使用多行模板字符串时遵循缩进原则。当空行与空白字符敏感时，不使用多行模板字符串。"></a>[建议] 使用多行模板字符串时遵循缩进原则。当空行与空白字符敏感时，不使用多行模板字符串。</h5><p>解释：</p>
<p><code>4</code> 空格为一个缩进，换行后添加一层缩进。将起始和结束的 <code>` </code> 符号单独放一行，有助于生成 HTML 时的标签对齐。</p>
<p>为避免破坏缩进的统一，当空行与空白字符敏感时，建议使用 <code>多个模板字符串</code> 或 <code>普通字符串</code> 进行连接运算，也可使用数组 <code>join</code> 生成字符串。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> html = <span class="string">`</span></div><div class="line"><span class="string">        &lt;div&gt;</span></div><div class="line"><span class="string">            &lt;p&gt;&lt;/p&gt;</span></div><div class="line"><span class="string">            &lt;p&gt;&lt;/p&gt;</span></div><div class="line"><span class="string">        &lt;/div&gt;</span></div><div class="line"><span class="string">    `</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeting</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'Hello, \n'</span></div><div class="line">        + <span class="string">`<span class="subst">$&#123;name.firstName&#125;</span> <span class="subst">$&#123;name.lastName&#125;</span>`</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeting</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">`Hello,</span></div><div class="line"><span class="string"><span class="subst">$&#123;name.firstName&#125;</span> <span class="subst">$&#123;name.lastName&#125;</span>`</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-2-2-空格"><a href="#2-2-2-空格" class="headerlink" title="2.2.2 空格"></a>2.2.2 空格</h4><h5 id="强制-使用-generator-时，-前面不允许有空格，-后面必须有一个空格。"><a href="#强制-使用-generator-时，-前面不允许有空格，-后面必须有一个空格。" class="headerlink" title="[强制] 使用 generator 时，* 前面不允许有空格，* 后面必须有一个空格。"></a>[强制] 使用 <code>generator</code> 时，<code>*</code> 前面不允许有空格，<code>*</code> 后面必须有一个空格。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">caller</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'a'</span>;</div><div class="line">    <span class="keyword">yield</span>* callee();</div><div class="line">    <span class="keyword">yield</span> <span class="string">'d'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> * <span class="title">caller</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'a'</span>;</div><div class="line">    <span class="keyword">yield</span> *callee();</div><div class="line">    <span class="keyword">yield</span> <span class="string">'d'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-2-3-语句"><a href="#2-2-3-语句" class="headerlink" title="2.2.3 语句"></a>2.2.3 语句</h4><h5 id="强制-类声明结束不允许添加分号。"><a href="#强制-类声明结束不允许添加分号。" class="headerlink" title="[强制] 类声明结束不允许添加分号。"></a>[强制] 类声明结束不允许添加分号。</h5><p>解释：</p>
<p>与函数声明保持一致。</p>
<h5 id="强制-类成员定义中，方法定义后不允许添加分号，成员属性定义后必须添加分号。"><a href="#强制-类成员定义中，方法定义后不允许添加分号，成员属性定义后必须添加分号。" class="headerlink" title="[强制] 类成员定义中，方法定义后不允许添加分号，成员属性定义后必须添加分号。"></a>[强制] 类成员定义中，方法定义后不允许添加分号，成员属性定义后必须添加分号。</h5><p>解释：</p>
<p>成员属性是当前 <strong>Stage 0</strong> 的标准，如果使用的话，则定义后加上分号。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">    foo = <span class="number">3</span>;</div><div class="line"></div><div class="line">    bar() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">    foo = <span class="number">3</span></div><div class="line"></div><div class="line">    bar() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="强制-export-语句后，不允许出现表示空语句的分号。"><a href="#强制-export-语句后，不允许出现表示空语句的分号。" class="headerlink" title="[强制] export 语句后，不允许出现表示空语句的分号。"></a>[强制] <code>export</code> 语句后，不允许出现表示空语句的分号。</h5><p>解释：</p>
<p><code>export</code> 关键字不影响后续语句类型。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h5 id="强制-属性装饰器后，可以不加分号的场景，不允许加分号。"><a href="#强制-属性装饰器后，可以不加分号的场景，不允许加分号。" class="headerlink" title="[强制] 属性装饰器后，可以不加分号的场景，不允许加分号。"></a>[强制] 属性装饰器后，可以不加分号的场景，不允许加分号。</h5><p>解释：</p>
<p>只有一种场景是必须加分号的：当属性 <code>key</code> 是 <code>computed property key</code> 时，其装饰器必须加分号，否则修饰 <code>key</code> 的 <code>[]</code> 会做为之前表达式的 <code>property accessor</code>。</p>
<p>上面描述的场景，装饰器后需要加分号。其余场景下的属性装饰器后不允许加分号。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">    @log(<span class="string">'INFO'</span>)</div><div class="line">    bar() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @log(<span class="string">'INFO'</span>);</div><div class="line">    [<span class="string">'bar'</span> + <span class="number">2</span>]() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">    @log(<span class="string">'INFO'</span>);</div><div class="line">    bar() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @log(<span class="string">'INFO'</span>)</div><div class="line">    [<span class="string">'bar'</span> + <span class="number">2</span>]() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="强制-箭头函数的参数只有一个，并且不包含解构时，参数部分的括号必须省略。"><a href="#强制-箭头函数的参数只有一个，并且不包含解构时，参数部分的括号必须省略。" class="headerlink" title="[强制] 箭头函数的参数只有一个，并且不包含解构时，参数部分的括号必须省略。"></a>[强制] 箭头函数的参数只有一个，并且不包含解构时，参数部分的括号必须省略。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line">list.map(<span class="function"><span class="params">item</span> =&gt;</span> item * <span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">let</span> fetchName = <span class="keyword">async</span> id =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> user = <span class="keyword">await</span> request(<span class="string">`users/<span class="subst">$&#123;id&#125;</span>`</span>);</div><div class="line">    <span class="keyword">return</span> user.fullName;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">list.map(<span class="function">(<span class="params">item</span>) =&gt;</span> item * <span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">let</span> fetchName = <span class="keyword">async</span> (id) =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> user = <span class="keyword">await</span> request(<span class="string">`users/<span class="subst">$&#123;id&#125;</span>`</span>);</div><div class="line">    <span class="keyword">return</span> user.fullName;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h5 id="建议-箭头函数的函数体只有一个单行表达式语句，且作为返回值时，省略-和-return。"><a href="#建议-箭头函数的函数体只有一个单行表达式语句，且作为返回值时，省略-和-return。" class="headerlink" title="[建议] 箭头函数的函数体只有一个单行表达式语句，且作为返回值时，省略 {} 和 return。"></a>[建议] 箭头函数的函数体只有一个单行表达式语句，且作为返回值时，省略 <code>{}</code> 和 <code>return</code>。</h5><p>如果单个表达式过长，可以使用 <code>()</code> 进行包裹。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line">list.map(<span class="function"><span class="params">item</span> =&gt;</span> item * <span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="keyword">let</span> foo = <span class="function"><span class="params">()</span> =&gt;</span> (</div><div class="line">    condition</div><div class="line">        ? returnValueA()</div><div class="line">        : returnValueB()</div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">list.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> item * <span class="number">2</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h5 id="建议-箭头函数的函数体只有一个-Object-Literal，且作为返回值时，使用-包裹。"><a href="#建议-箭头函数的函数体只有一个-Object-Literal，且作为返回值时，使用-包裹。" class="headerlink" title="[建议] 箭头函数的函数体只有一个 Object Literal，且作为返回值时，使用 () 包裹。"></a>[建议] 箭头函数的函数体只有一个 <code>Object Literal</code>，且作为返回值时，使用 <code>()</code> 包裹。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line">list.map(<span class="function"><span class="params">item</span> =&gt;</span> (&#123;<span class="attr">name</span>: item[<span class="number">0</span>], <span class="attr">email</span>: item[<span class="number">1</span>]&#125;));</div></pre></td></tr></table></figure>
<h5 id="强制-解构多个变量时，如果超过行长度限制，每个解构的变量必须单独一行。"><a href="#强制-解构多个变量时，如果超过行长度限制，每个解构的变量必须单独一行。" class="headerlink" title="[强制] 解构多个变量时，如果超过行长度限制，每个解构的变量必须单独一行。"></a>[强制] 解构多个变量时，如果超过行长度限制，每个解构的变量必须单独一行。</h5><p>解释：</p>
<p>太多的变量解构会让一行的代码非常长，极有可能超过单行长度控制，使代码可读性下降。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">let</span> &#123;</div><div class="line">    name: personName,</div><div class="line">    email: personEmail,</div><div class="line">    sex: personSex,</div><div class="line">    age: personAge</div><div class="line">&#125; = person;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>: personName, <span class="attr">email</span>: personEmail,</div><div class="line">    sex: personSex, <span class="attr">age</span>: personAge</div><div class="line">&#125; = person;</div></pre></td></tr></table></figure>
<h2 id="3-语言特性"><a href="#3-语言特性" class="headerlink" title="3 语言特性"></a>3 语言特性</h2><h3 id="3-1-变量"><a href="#3-1-变量" class="headerlink" title="3.1 变量"></a>3.1 变量</h3><h4 id="强制-使用-let-和-const-定义变量，不使用-var。"><a href="#强制-使用-let-和-const-定义变量，不使用-var。" class="headerlink" title="[强制] 使用 let 和 const 定义变量，不使用 var。"></a>[强制] 使用 <code>let</code> 和 <code>const</code> 定义变量，不使用 <code>var</code>。</h4><p>解释：</p>
<p>使用 <code>let</code> 和 <code>const</code> 定义时，变量作用域范围更明确。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-2-解构"><a href="#3-2-解构" class="headerlink" title="3.2 解构"></a>3.2 解构</h3><h4 id="强制-不要使用3层及以上的解构。"><a href="#强制-不要使用3层及以上的解构。" class="headerlink" title="[强制] 不要使用3层及以上的解构。"></a>[强制] 不要使用3层及以上的解构。</h4><p>解释：</p>
<p>过多层次的解构会让代码变得难以阅读。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">let</span> &#123;<span class="attr">documentElement</span>: &#123;<span class="attr">firstElementChild</span>: &#123;nextSibling&#125;&#125;&#125; = <span class="built_in">window</span>;</div></pre></td></tr></table></figure>
<h4 id="建议-使用解构减少中间变量。"><a href="#建议-使用解构减少中间变量。" class="headerlink" title="[建议] 使用解构减少中间变量。"></a>[建议] 使用解构减少中间变量。</h4><p>解释：</p>
<p>常见场景如变量值交换，可能产生中间变量。这种场景推荐使用解构。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line">[x, y] = [y, x];</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">let</span> temp = x;</div><div class="line">x = y;</div><div class="line">y = temp;</div></pre></td></tr></table></figure>
<h4 id="强制-仅定义一个变量时不允许使用解构。"><a href="#强制-仅定义一个变量时不允许使用解构。" class="headerlink" title="[强制] 仅定义一个变量时不允许使用解构。"></a>[强制] 仅定义一个变量时不允许使用解构。</h4><p>解释：</p>
<p>在这种场景下，使用解构将降低代码可读性。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">let</span> len = myString.length;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">let</span> &#123;<span class="attr">length</span>: len&#125; = myString;</div></pre></td></tr></table></figure>
<h4 id="强制-如果不节省编写时产生的中间变量，解构表达式-号右边不允许是-ObjectLiteral-和-ArrayLiteral。"><a href="#强制-如果不节省编写时产生的中间变量，解构表达式-号右边不允许是-ObjectLiteral-和-ArrayLiteral。" class="headerlink" title="[强制] 如果不节省编写时产生的中间变量，解构表达式 = 号右边不允许是 ObjectLiteral 和 ArrayLiteral。"></a>[强制] 如果不节省编写时产生的中间变量，解构表达式 <code>=</code> 号右边不允许是 <code>ObjectLiteral</code> 和 <code>ArrayLiteral</code>。</h4><p>解释：</p>
<p>在这种场景下，使用解构将降低代码可读性，通常也并无收益。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">let</span> &#123;<span class="attr">first</span>: firstName, <span class="attr">last</span>: lastName&#125; = person;</div><div class="line"><span class="keyword">let</span> one = <span class="number">1</span>;</div><div class="line"><span class="keyword">let</span> two = <span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">let</span> [one, two] = [<span class="number">1</span>, <span class="number">2</span>];</div></pre></td></tr></table></figure>
<h4 id="强制-使用剩余运算符时，剩余运算符之前的所有元素必需具名。"><a href="#强制-使用剩余运算符时，剩余运算符之前的所有元素必需具名。" class="headerlink" title="[强制] 使用剩余运算符时，剩余运算符之前的所有元素必需具名。"></a>[强制] 使用剩余运算符时，剩余运算符之前的所有元素必需具名。</h4><p>解释：</p>
<p>剩余运算符之前的元素省略名称可能带来较大的程序阅读障碍。如果仅仅为了取数组后几项，请使用 <code>slice</code> 方法。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">let</span> [one, two, ...anyOther] = myArray;</div><div class="line"><span class="keyword">let</span> other = myArray.slice(<span class="number">3</span>);</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">let</span> [,,, ...other] = myArray;</div></pre></td></tr></table></figure>
<h3 id="3-3-模板字符串"><a href="#3-3-模板字符串" class="headerlink" title="3.3 模板字符串"></a>3.3 模板字符串</h3><h4 id="强制-字符串内变量替换时，不要使用-2-次及以上的函数调用。"><a href="#强制-字符串内变量替换时，不要使用-2-次及以上的函数调用。" class="headerlink" title="[强制] 字符串内变量替换时，不要使用 2 次及以上的函数调用。"></a>[强制] 字符串内变量替换时，不要使用 <code>2</code> 次及以上的函数调用。</h4><p>解释：</p>
<p>在变量替换符内有太多的函数调用等复杂语法会导致可读性下降。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">let</span> fullName = getFullName(getFirstName(), getLastName());</div><div class="line"><span class="keyword">let</span> s = <span class="string">`Hello <span class="subst">$&#123;fullName&#125;</span>`</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">let</span> s = <span class="string">`Hello <span class="subst">$&#123;getFullName(getFirstName(), getLastName())&#125;</span>`</span>;</div></pre></td></tr></table></figure>
<h3 id="3-4-函数"><a href="#3-4-函数" class="headerlink" title="3.4 函数"></a>3.4 函数</h3><h4 id="建议-使用变量默认语法代替基于条件判断的默认值声明。"><a href="#建议-使用变量默认语法代替基于条件判断的默认值声明。" class="headerlink" title="[建议] 使用变量默认语法代替基于条件判断的默认值声明。"></a>[建议] 使用变量默认语法代替基于条件判断的默认值声明。</h4><p>解释：</p>
<p>添加默认值有助于引擎的优化，在未来 <code>strong mode</code> 下也会有更好的效果。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">text = <span class="string">'hello'</span></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">    text = text || <span class="string">'hello'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="强制-不要使用-arguments-对象，应使用-args-代替。"><a href="#强制-不要使用-arguments-对象，应使用-args-代替。" class="headerlink" title="[强制] 不要使用 arguments 对象，应使用 ...args 代替。"></a>[强制] 不要使用 <code>arguments</code> 对象，应使用 <code>...args</code> 代替。</h4><p>解释：</p>
<p>在未来 <code>strong mode</code> 下 <code>arguments</code> 将被禁用。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">...args</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(args.join(<span class="string">''</span>));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log([].join.call(<span class="built_in">arguments</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-5-箭头函数"><a href="#3-5-箭头函数" class="headerlink" title="3.5 箭头函数"></a>3.5 箭头函数</h3><h4 id="强制-一个函数被设计为需要-call-和-apply-的时候，不能是箭头函数。"><a href="#强制-一个函数被设计为需要-call-和-apply-的时候，不能是箭头函数。" class="headerlink" title="[强制] 一个函数被设计为需要 call 和 apply 的时候，不能是箭头函数。"></a>[强制] 一个函数被设计为需要 <code>call</code> 和 <code>apply</code> 的时候，不能是箭头函数。</h4><p>解释：</p>
<p>箭头函数会强制绑定当前环境下的 <code>this</code>。</p>
<h3 id="3-6-对象"><a href="#3-6-对象" class="headerlink" title="3.6 对象"></a>3.6 对象</h3><h4 id="建议-定义对象时，如果所有键均指向同名变量，则所有键都使用缩写；如果有一个键无法指向同名变量，则所有键都不使用缩写。"><a href="#建议-定义对象时，如果所有键均指向同名变量，则所有键都使用缩写；如果有一个键无法指向同名变量，则所有键都不使用缩写。" class="headerlink" title="[建议] 定义对象时，如果所有键均指向同名变量，则所有键都使用缩写；如果有一个键无法指向同名变量，则所有键都不使用缩写。"></a>[建议] 定义对象时，如果所有键均指向同名变量，则所有键都使用缩写；如果有一个键无法指向同名变量，则所有键都不使用缩写。</h4><p>解释：</p>
<p>目的在于保持所有键值对声明的一致性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">let</span> foo = &#123;x, y, z&#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> foo2 = &#123;</div><div class="line">    x: <span class="number">1</span>,</div><div class="line">    y: <span class="number">2</span>,</div><div class="line">    z: z</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">let</span> foo = &#123;</div><div class="line">    x: x,</div><div class="line">    y: y,</div><div class="line">    z: z</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> foo2 = &#123;</div><div class="line">    x: <span class="number">1</span>,</div><div class="line">    y: <span class="number">2</span>,</div><div class="line">    z</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="强制-定义方法时使用-MethodDefinition-语法，不使用-PropertyName-FunctionExpression-语法。"><a href="#强制-定义方法时使用-MethodDefinition-语法，不使用-PropertyName-FunctionExpression-语法。" class="headerlink" title="[强制] 定义方法时使用 MethodDefinition 语法，不使用 PropertyName: FunctionExpression 语法。"></a>[强制] 定义方法时使用 <code>MethodDefinition</code> 语法，不使用 <code>PropertyName: FunctionExpression</code> 语法。</h4><p>解释：</p>
<p><code>MethodDefinition</code> 语法更清晰简洁。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">let</span> foo = &#123;</div><div class="line">    bar(x, y) &#123;</div><div class="line">        <span class="keyword">return</span> x + y;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">let</span> foo = &#123;</div><div class="line">    bar: <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> x + y;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="建议-使用-Object-keys-或-Object-entries-进行对象遍历。"><a href="#建议-使用-Object-keys-或-Object-entries-进行对象遍历。" class="headerlink" title="[建议] 使用 Object.keys 或 Object.entries 进行对象遍历。"></a>[建议] 使用 <code>Object.keys</code> 或 <code>Object.entries</code> 进行对象遍历。</h4><p>解释：</p>
<p>不建议使用 <code>for .. in</code> 进行对象的遍历，以避免遗漏 <code>hasOwnProperty</code> 产生的错误。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(foo)) &#123;</div><div class="line">    <span class="keyword">let</span> value = foo[key];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(foo)) &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="建议-定义对象的方法不应使用箭头函数。"><a href="#建议-定义对象的方法不应使用箭头函数。" class="headerlink" title="[建议] 定义对象的方法不应使用箭头函数。"></a>[建议] 定义对象的方法不应使用箭头函数。</h4><p>解释：</p>
<p>箭头函数将 <code>this</code> 绑定到当前环境，在 <code>obj.method()</code> 调用时容易导致不期待的 <code>this</code>。除非明确需要绑定 <code>this</code>，否则不应使用箭头函数。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">let</span> foo = &#123;</div><div class="line">    bar(x, y) &#123;</div><div class="line">        <span class="keyword">return</span> x + y;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">let</span> foo = &#123;</div><div class="line">    bar: <span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="建议-尽量使用计算属性键在一个完整的字面量中完整地定义一个对象，避免对象定义后直接增加对象属性。"><a href="#建议-尽量使用计算属性键在一个完整的字面量中完整地定义一个对象，避免对象定义后直接增加对象属性。" class="headerlink" title="[建议] 尽量使用计算属性键在一个完整的字面量中完整地定义一个对象，避免对象定义后直接增加对象属性。"></a>[建议] 尽量使用计算属性键在一个完整的字面量中完整地定义一个对象，避免对象定义后直接增加对象属性。</h4><p>解释：</p>
<p>在一个完整的字面量中声明所有的键值，而不需要将代码分散开来，有助于提升代码可读性。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> MY_KEY = <span class="string">'bar'</span>;</div><div class="line"><span class="keyword">let</span> foo = &#123;</div><div class="line">    [MY_KEY + <span class="string">'Hash'</span>]: <span class="number">123</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> MY_KEY = <span class="string">'bar'</span>;</div><div class="line"><span class="keyword">let</span> foo = &#123;&#125;;</div><div class="line">foo[MY_KEY + <span class="string">'Hash'</span>] = <span class="number">123</span>;</div></pre></td></tr></table></figure>
<h3 id="3-7-类"><a href="#3-7-类" class="headerlink" title="3.7 类"></a>3.7 类</h3><h4 id="强制-使用-class-关键字定义一个类。"><a href="#强制-使用-class-关键字定义一个类。" class="headerlink" title="[强制] 使用 class 关键字定义一个类。"></a>[强制] 使用 <code>class</code> 关键字定义一个类。</h4><p>解释：</p>
<p>直接使用 <code>class</code> 定义类更清晰。不要再使用 <code>function</code> 和 <code>prototype</code> 形式的定义。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextNode</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(value, engine) &#123;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">        <span class="keyword">this</span>.engine = engine;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    clone() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">TextNode</span>(<span class="params">value, engine</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.value = value;</div><div class="line">    <span class="keyword">this</span>.engine = engine;</div><div class="line">&#125;</div><div class="line"></div><div class="line">TextNode.prototype.clone = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="强制-使用-super-访问父类成员，而非父类的-prototype。"><a href="#强制-使用-super-访问父类成员，而非父类的-prototype。" class="headerlink" title="[强制] 使用 super 访问父类成员，而非父类的 prototype。"></a>[强制] 使用 <code>super</code> 访问父类成员，而非父类的 <code>prototype</code>。</h4><p>解释：</p>
<p>使用 <code>super</code> 和 <code>super.foo</code> 可以快速访问父类成员，而不必硬编码父类模块而导致修改和维护的不便，同时更节省代码。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextNode</span> <span class="keyword">extends</span> <span class="title">Node</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(value, engine) &#123;</div><div class="line">        <span class="keyword">super</span>(value);</div><div class="line">        <span class="keyword">this</span>.engine = engine;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    setNodeValue(value) &#123;</div><div class="line">        <span class="keyword">super</span>.setNodeValue(value);</div><div class="line">        <span class="keyword">this</span>.textContent = value;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextNode</span> <span class="keyword">extends</span> <span class="title">Node</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(value, engine) &#123;</div><div class="line">        Node.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">        <span class="keyword">this</span>.engine = engine;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    setNodeValue(value) &#123;</div><div class="line">        Node.prototype.setNodeValue.call(<span class="keyword">this</span>, value);</div><div class="line">        <span class="keyword">this</span>.textContent = value;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-8-模块"><a href="#3-8-模块" class="headerlink" title="3.8 模块"></a>3.8 模块</h3><h4 id="强制-export-与内容定义放在一起。"><a href="#强制-export-与内容定义放在一起。" class="headerlink" title="[强制] export 与内容定义放在一起。"></a>[强制] <code>export</code> 与内容定义放在一起。</h4><p>解释：</p>
<p>何处声明要导出的东西，就在何处使用 <code>export</code> 关键字，不在声明后再统一导出。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> bar = <span class="number">3</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> bar = <span class="number">3</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123;foo&#125;;</div><div class="line"><span class="keyword">export</span> &#123;bar&#125;;</div></pre></td></tr></table></figure>
<h4 id="建议-相互之间无关联的内容使用命名导出。"><a href="#建议-相互之间无关联的内容使用命名导出。" class="headerlink" title="[建议] 相互之间无关联的内容使用命名导出。"></a>[建议] 相互之间无关联的内容使用命名导出。</h4><p>解释：</p>
<p>举个例子，工具对象中的各个方法，相互之间并没有强关联，通常外部会选择几个使用，则应该使用命名导出。</p>
<p>简而言之，当一个模块只扮演命名空间的作用时，使用命名导出。</p>
<h4 id="强制-所有-import-语句写在模块开始处。"><a href="#强制-所有-import-语句写在模块开始处。" class="headerlink" title="[强制] 所有 import 语句写在模块开始处。"></a>[强制] 所有 <code>import</code> 语句写在模块开始处。</h4><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">import</span> &#123;bar&#125; <span class="keyword">from</span> <span class="string">'./bar'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    bar.work();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">import</span> &#123;bar&#125; <span class="keyword">from</span> <span class="string">'./bar'</span>;</div><div class="line">    bar.work();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-9-集合"><a href="#3-9-集合" class="headerlink" title="3.9 集合"></a>3.9 集合</h3><h4 id="建议-对数组进行连接操作时，使用数组展开语法。"><a href="#建议-对数组进行连接操作时，使用数组展开语法。" class="headerlink" title="[建议] 对数组进行连接操作时，使用数组展开语法。"></a>[建议] 对数组进行连接操作时，使用数组展开语法。</h4><p>解释：</p>
<p>用数组展开代替 <code>concat</code> 方法，数组展开对 <code>Iterable</code> 有更好的兼容性。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">let</span> foo = [...foo, newValue];</div><div class="line"><span class="keyword">let</span> bar = [...bar, ...newValues];</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">let</span> foo = foo.concat(newValue);</div><div class="line"><span class="keyword">let</span> bar = bar.concat(newValues);</div></pre></td></tr></table></figure>
<h4 id="建议-不要使用数组展开进行数组的复制操作。"><a href="#建议-不要使用数组展开进行数组的复制操作。" class="headerlink" title="[建议] 不要使用数组展开进行数组的复制操作。"></a>[建议] 不要使用数组展开进行数组的复制操作。</h4><p>解释：</p>
<p>使用数组展开语法进行复制，代码可读性较差。推荐使用 <code>Array.from</code> 方法进行复制操作。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">let</span> otherArr = <span class="built_in">Array</span>.from(arr);</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">let</span> otherArr = [...arr];</div></pre></td></tr></table></figure>
<h4 id="建议-尽可能使用-for-of-进行遍历。"><a href="#建议-尽可能使用-for-of-进行遍历。" class="headerlink" title="[建议] 尽可能使用 for .. of 进行遍历。"></a>[建议] 尽可能使用 <code>for .. of</code> 进行遍历。</h4><p>解释：</p>
<p>使用 <code>for .. of</code> 可以更好地接受任何的 <code>Iterable</code> 对象，如 <code>Map#values</code> 生成的迭代器，使得方法的通用性更强。</p>
<p>以下情况除外：</p>
<ol>
<li>遍历确实成为了性能瓶颈，需要使用原生 <code>for</code> 循环提升性能。</li>
<li>需要遍历过程中的索引。</li>
</ol>
<h4 id="强制-当键值有可能不是字符串时，必须使用-Map；当元素有可能不是字符串时，必须使用-Set。"><a href="#强制-当键值有可能不是字符串时，必须使用-Map；当元素有可能不是字符串时，必须使用-Set。" class="headerlink" title="[强制] 当键值有可能不是字符串时，必须使用 Map；当元素有可能不是字符串时，必须使用 Set。"></a>[强制] 当键值有可能不是字符串时，必须使用 <code>Map</code>；当元素有可能不是字符串时，必须使用 <code>Set</code>。</h4><p>解释：</p>
<p>使用普通 Object，对非字符串类型的 <code>key</code>，需要自己实现序列化。并且运行过程中的对象变化难以通知 Object。</p>
<h4 id="建议-需要一个不可重复的集合时，应使用-Set。"><a href="#建议-需要一个不可重复的集合时，应使用-Set。" class="headerlink" title="[建议] 需要一个不可重复的集合时，应使用 Set。"></a>[建议] 需要一个不可重复的集合时，应使用 <code>Set</code>。</h4><p>解释：</p>
<p>不要使用 <code>{foo: true}</code> 这样的普通 <code>Object</code>。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">let</span> members = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>]);</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">let</span> members = &#123;</div><div class="line">    one: <span class="literal">true</span>,</div><div class="line">    two: <span class="literal">true</span>,</div><div class="line">    three: <span class="literal">true</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="建议-当需要遍历功能时，使用-Map-和-Set。"><a href="#建议-当需要遍历功能时，使用-Map-和-Set。" class="headerlink" title="[建议] 当需要遍历功能时，使用 Map 和 Set。"></a>[建议] 当需要遍历功能时，使用 <code>Map</code> 和 <code>Set</code>。</h4><p>解释：</p>
<p><code>Map</code> 和 <code>Set</code> 是可遍历对象，能够方便地使用 <code>for...of</code> 遍历。不要使用使用普通 Object。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">let</span> membersAge = <span class="keyword">new</span> <span class="built_in">Map</span>([</div><div class="line">    [<span class="string">'one'</span>, <span class="number">10</span>],</div><div class="line">    [<span class="string">'two'</span>, <span class="number">20</span>],</div><div class="line">    [<span class="string">'three'</span>, <span class="number">30</span>]</div><div class="line">]);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">let</span> membersAge = &#123;</div><div class="line">    one: <span class="number">10</span>,</div><div class="line">    two: <span class="number">20</span>,</div><div class="line">    three: <span class="number">30</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> membersAge) &#123;</div><div class="line">    <span class="keyword">if</span> (membersAge.hasOwnProperty(key)) &#123;</div><div class="line">        <span class="keyword">let</span> value = membersAge[key];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="建议-程序运行过程中有添加或移除元素的操作时，使用-Map-和-Set。"><a href="#建议-程序运行过程中有添加或移除元素的操作时，使用-Map-和-Set。" class="headerlink" title="[建议] 程序运行过程中有添加或移除元素的操作时，使用 Map 和 Set。"></a>[建议] 程序运行过程中有添加或移除元素的操作时，使用 <code>Map</code> 和 <code>Set</code>。</h4><p>解释：</p>
<p>使用 <code>Map</code> 和 <code>Set</code>，程序的可理解性更好；普通 Object 的语义更倾向于表达固定的结构。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">let</span> membersAge = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">membersAge.set(<span class="string">'one'</span>, <span class="number">10</span>);</div><div class="line">membersAge.set(<span class="string">'two'</span>, <span class="number">20</span>);</div><div class="line">membersAge.set(<span class="string">'three'</span>, <span class="number">30</span>);</div><div class="line">membersAge.delete(<span class="string">'one'</span>);</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">let</span> membersAge = &#123;&#125;;</div><div class="line">membersAge.one = <span class="number">10</span>;</div><div class="line">membersAge.two = <span class="number">20</span>;</div><div class="line">membersAge.three = <span class="number">30</span>;</div><div class="line"><span class="keyword">delete</span> membersAge[<span class="string">'one'</span>];</div></pre></td></tr></table></figure>
<h3 id="3-10-异步"><a href="#3-10-异步" class="headerlink" title="3.10 异步"></a>3.10 异步</h3><h4 id="强制-回调函数的嵌套不得超过3层。"><a href="#强制-回调函数的嵌套不得超过3层。" class="headerlink" title="[强制] 回调函数的嵌套不得超过3层。"></a>[强制] 回调函数的嵌套不得超过3层。</h4><p>解释：</p>
<p>深层次的回调函数的嵌套会让代码变得难以阅读。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">getUser(userId, <span class="function"><span class="keyword">function</span> (<span class="params">user</span>) </span>&#123;</div><div class="line">    validateUser(user, <span class="function"><span class="keyword">function</span> (<span class="params">isValid</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isValid) &#123;</div><div class="line">            saveReport(report, user, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                notice(<span class="string">'Saved!'</span>);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="建议-使用-Promise-代替-callback。"><a href="#建议-使用-Promise-代替-callback。" class="headerlink" title="[建议] 使用 Promise 代替 callback。"></a>[建议] 使用 <code>Promise</code> 代替 <code>callback</code>。</h4><p>解释：</p>
<p>相比 <code>callback</code>，使用 <code>Promise</code> 能够使复杂异步过程的代码更清晰。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">let</span> user;</div><div class="line">getUser(userId)</div><div class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">userObj</span>) </span>&#123;</div><div class="line">        user = userObj;</div><div class="line">        <span class="keyword">return</span> validateUser(user);</div><div class="line">    &#125;)</div><div class="line">    .then(<span class="function"><span class="keyword">function</span> (<span class="params">isValid</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isValid) &#123;</div><div class="line">            <span class="keyword">return</span> saveReport(report, user);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">'Invalid!'</span>);</div><div class="line">    &#125;)</div><div class="line">    .then(</div><div class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            notice(<span class="string">'Saved!'</span>);</div><div class="line">        &#125;,</div><div class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</div><div class="line">            notice(message);</div><div class="line">        &#125;</div><div class="line">    );</div></pre></td></tr></table></figure>
<h4 id="强制-使用标准的-Promise-API。"><a href="#强制-使用标准的-Promise-API。" class="headerlink" title="[强制] 使用标准的 Promise API。"></a>[强制] 使用标准的 <code>Promise</code> API。</h4><p>解释：</p>
<ol>
<li>不允许使用非标准的 <code>Promise</code> API，如 <code>jQuery</code> 的 <code>Deferred</code>、<code>Q.js</code> 的 <code>defer</code> 等。</li>
<li>不允许使用非标准的 <code>Promise</code> 扩展 API，如 <code>bluebird</code> 的 <code>Promise.any</code> 等。</li>
</ol>
<p>使用标准的 <code>Promise</code> API，当运行环境都支持时，可以把 Promise Lib 直接去掉。</p>
<h4 id="强制-不允许直接扩展-Promise-对象的-prototype。"><a href="#强制-不允许直接扩展-Promise-对象的-prototype。" class="headerlink" title="[强制] 不允许直接扩展 Promise 对象的 prototype。"></a>[强制] 不允许直接扩展 <code>Promise</code> 对象的 <code>prototype</code>。</h4><p>解释：</p>
<p>理由和 <strong>不允许修改和扩展任何原生对象和宿主对象的原型</strong> 是一样的。如果想要使用更方便，可以用 utility 函数的形式。</p>
<h4 id="强制-不得为了编写的方便，将可以并行的IO过程串行化。"><a href="#强制-不得为了编写的方便，将可以并行的IO过程串行化。" class="headerlink" title="[强制] 不得为了编写的方便，将可以并行的IO过程串行化。"></a>[强制] 不得为了编写的方便，将可以并行的IO过程串行化。</h4><p>解释：</p>
<p>并行 IO 消耗时间约等于 IO 时间最大的那个过程，串行的话消耗时间将是所有过程的时间之和。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">requestData().then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    renderTags(data.tags);</div><div class="line">    renderArticles(data.articles);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">requestData</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> [tags, articles] = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([</div><div class="line">        requestTags(),</div><div class="line">        requestArticles()</div><div class="line">    ]);</div><div class="line">    <span class="keyword">return</span> &#123;tags, articles&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">requestData</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> tags = <span class="keyword">await</span> requestTags();</div><div class="line">    <span class="keyword">let</span> articles = <span class="keyword">await</span> requestArticles();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(&#123;tags, articles&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="建议-使用-async-await-代替-generator-co。"><a href="#建议-使用-async-await-代替-generator-co。" class="headerlink" title="[建议] 使用 async/await 代替 generator + co。"></a>[建议] 使用 <code>async/await</code> 代替 <code>generator</code> + <code>co</code>。</h4><p>解释：</p>
<p>使用语言自身的能力可以使代码更清晰，也无需引入 <code>co</code> 库。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">addReport(report, userId).then(</div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        notice(<span class="string">'Saved!'</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</div><div class="line">        notice(message);</div><div class="line">    &#125;</div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">addReport</span>(<span class="params">report, userId</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> user = <span class="keyword">await</span> getUser(userId);</div><div class="line">    <span class="keyword">let</span> isValid = <span class="keyword">await</span> validateUser(user);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (isValid) &#123;</div><div class="line">        <span class="keyword">let</span> savePromise = saveReport(report, user);</div><div class="line">        <span class="keyword">return</span> savePromise();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">'Invalid'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addReport</span>(<span class="params">report, userId</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> co(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">let</span> user = <span class="keyword">yield</span> getUser(userId);</div><div class="line">        <span class="keyword">let</span> isValid = <span class="keyword">yield</span> validateUser(user);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (isValid) &#123;</div><div class="line">            <span class="keyword">let</span> savePromise = saveReport(report, user);</div><div class="line">            <span class="keyword">return</span> savePromise();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">'Invalid'</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-环境"><a href="#4-环境" class="headerlink" title="4 环境"></a>4 环境</h2><h3 id="4-1-运行环境"><a href="#4-1-运行环境" class="headerlink" title="4.1 运行环境"></a>4.1 运行环境</h3><h4 id="建议-持续跟进与关注运行环境对语言特性的支持程度。"><a href="#建议-持续跟进与关注运行环境对语言特性的支持程度。" class="headerlink" title="[建议] 持续跟进与关注运行环境对语言特性的支持程度。"></a>[建议] 持续跟进与关注运行环境对语言特性的支持程度。</h4><p>解释：</p>
<p><a href="https://kangax.github.io/compat-table/es6/" target="_blank" rel="external">查看环境对语言特性的支持程度</a></p>
<p>ES 标准的制定还在不断进行中，各种环境对语言特性的支持也日新月异。了解项目中用到了哪些 ESNext 的特性，了解项目的运行环境，并持续跟进这些特性在运行环境中的支持程度是很有必要的。这意味着：</p>
<ol>
<li>如果有任何一个运行环境（比如 chrome）支持了项目里用到的所有特性，你可以在开发时抛弃预编译。</li>
<li>如果所有环境都支持了某一特性（比如 Promise），你可以抛弃相关的 shim，或无需在预编译时进行转换。</li>
<li>如果所有环境都支持了项目里用到的所有特性，你可以完全抛弃预编译。</li>
</ol>
<p>无论如何，在选择预编译工具时，你都需要清晰的知道你现阶段将在项目里使用哪些语言特性，然后了解预编译工具对语言特性的支持程度，做出选择。</p>
<h4 id="强制-在运行环境中没有-Promise-时，将-Promise-的实现-shim-到-global-中。"><a href="#强制-在运行环境中没有-Promise-时，将-Promise-的实现-shim-到-global-中。" class="headerlink" title="[强制] 在运行环境中没有 Promise 时，将 Promise 的实现 shim 到 global 中。"></a>[强制] 在运行环境中没有 <code>Promise</code> 时，将 <code>Promise</code> 的实现 <code>shim</code> 到 <code>global</code> 中。</h4><p>解释：</p>
<p>当前运行环境下没有 <code>Promise</code> 时，可以引入 <code>shim</code> 的扩展。如果自己实现，需要实现在 <code>global</code> 下，并且与标准 API 保持一致。</p>
<p>这样，未来运行环境支持时，可以随时把 <code>Promise</code> 扩展直接扔掉，而应用代码无需任何修改。</p>
<h3 id="4-2-预编译"><a href="#4-2-预编译" class="headerlink" title="4.2 预编译"></a>4.2 预编译</h3><h4 id="建议-使用-babel-做为预编译工具时，建议使用-5-x-版本。"><a href="#建议-使用-babel-做为预编译工具时，建议使用-5-x-版本。" class="headerlink" title="[建议] 使用 babel 做为预编译工具时，建议使用 5.x 版本。"></a>[建议] 使用 <code>babel</code> 做为预编译工具时，建议使用 <code>5.x</code> 版本。</h4><p>解释：</p>
<p>由于 <code>babel</code> 最新的 <code>6</code> 暂时还不稳定，建议暂时使用 <code>5.x</code>。不同的产品，对于浏览器支持的情况不同，使用 <code>babel</code> 的时候，需要设置的参数也有一些区别。下面在示例中给出一些建议的参数。</p>
<p>示例：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">＃ 建议的参数</div><div class="line">--loose all --modules amd --blacklist strict</div><div class="line"></div><div class="line">＃ 如果需要使用 es7.classProperties、es7.decorators 等一些特性，需要额外的 --stage 0 参数</div><div class="line">--loose all --modules amd --blacklist strict --stage 0</div></pre></td></tr></table></figure>
<h4 id="建议-使用-babel-做为预编译工具时，通过-external-helpers-减少生成文件的大小。"><a href="#建议-使用-babel-做为预编译工具时，通过-external-helpers-减少生成文件的大小。" class="headerlink" title="[建议] 使用 babel 做为预编译工具时，通过 external-helpers 减少生成文件的大小。"></a>[建议] 使用 <code>babel</code> 做为预编译工具时，通过 <code>external-helpers</code> 减少生成文件的大小。</h4><p>解释：</p>
<p>当 <code>babel</code> 在转换代码的过程中发现需要一些特性时，会在该文件头部生成对应的 <code>helper</code> 代码。默认情况下，对于每一个经由 <code>babel</code> 处理的文件，均会在文件头部生成对应需要的辅助函数，多份文件辅助函数存在重复，占用了不必要的代码体积。</p>
<p>因此推荐打开<code>externalHelpers: true</code>选项，使 <code>babel</code> 在转换后内容中不写入 <code>helper</code> 相关的代码，而是使用一个外部的 <code>.js</code>统一提供所有的 <code>helper</code>。对于<a href="https://github.com/babel/babel.github.io/blob/5.0.0/docs/usage/external-helpers.md" target="_blank" rel="external">external-helpers</a>的使用，可以有两种方式：</p>
<ol>
<li>默认方式：需要通过 <code>&lt;script&gt;</code> 自行引入<code>babel-polyfill.js</code> 和 <code>babel-external-helpers.js</code>。</li>
<li>定制方式：自己实现 <a href="https://github.com/babel/babel.github.io/blob/5.0.0/docs/usage/runtime.md" target="_blank" rel="external">babel-runtime</a>。</li>
</ol>
<p>示例：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 默认方式</div><div class="line">--loose all --modules amd --external-helpers</div><div class="line"><span class="meta">#</span> `babelHelpers` 的代码可以通过执行 `babel-external-helpers -t var` 得到所有相关API的实现</div><div class="line"></div><div class="line"><span class="meta">#</span> 定制方式</div><div class="line">--loose all --modules amd --optional runtime</div></pre></td></tr></table></figure>
<h4 id="建议-使用-TypeScript-做为预编译工具时，建议使用-1-6-版本。"><a href="#建议-使用-TypeScript-做为预编译工具时，建议使用-1-6-版本。" class="headerlink" title="[建议] 使用 TypeScript 做为预编译工具时，建议使用 1.6+ 版本。"></a>[建议] 使用 <code>TypeScript</code> 做为预编译工具时，建议使用 <code>1.6+</code> 版本。</h4><p>解释：</p>
<p><code>TypeScript</code> 1.6 之后，基本摒弃了之前的与 ESNext 相冲突的地方。目前 <code>TypeScript</code> 的思路就是遵循标准，将 stage 已经足够成熟的功能纳入，并提供静态类型和类型检查，所以其在 stage 0/1 的支持上不如 <code>babel</code>。另外，<code>TypeScript</code> 不能指定关闭某个 transform，但其编译速度比 <code>babel</code> 更高。</p>
<p><code>TypeScript</code> 的常用参数在下面给出了示例。</p>
<p>示例：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">--module amd --target ES3</div><div class="line">--module commonjs --target ES6</div></pre></td></tr></table></figure>
<h4 id="建议-使用-TypeScript-做为预编译工具时，不使用-tsc-命令。"><a href="#建议-使用-TypeScript-做为预编译工具时，不使用-tsc-命令。" class="headerlink" title="[建议] 使用 TypeScript 做为预编译工具时，不使用 tsc 命令。"></a>[建议] 使用 <code>TypeScript</code> 做为预编译工具时，不使用 <code>tsc</code> 命令。</h4><p>解释：</p>
<p><code>TypeScript</code> 提供的 <code>tsc</code> 命令只支持后缀名 <code>.ts</code>、<code>.tsx</code>、<code>.d.ts</code> 的文件编译，对于 JavaScript 来说，保持后缀名为 <code>.js</code> 是原则，本文档的 <code>文件</code> 章节也有所要求。</p>
<p>如果要使用 <code>TypeScript</code> 做为预编译工具，可基于其 <a href="https://github.com/Microsoft/TypeScript/wiki/Using-the-Compiler-API" target="_blank" rel="external">Compiler API</a> 开发自己的预编译工具。如果你是 FIS 用户，可以使用 <a href="https://github.com/fex-team/fis3-parser-typescript" target="_blank" rel="external">FIS TypeScript 插件</a>。</p>
<h4 id="建议-生成的代码在浏览器环境运行时，应生成-AMD-模块化代码。"><a href="#建议-生成的代码在浏览器环境运行时，应生成-AMD-模块化代码。" class="headerlink" title="[建议] 生成的代码在浏览器环境运行时，应生成 AMD 模块化代码。"></a>[建议] 生成的代码在浏览器环境运行时，应生成 AMD 模块化代码。</h4><p>解释：</p>
<p>AMD 在浏览器环境应用较为成熟。</p>
<h4 id="建议-浏览器端项目中如果-ESNext-代码和-ES3-5-代码混合，不要使用-TypeScript-做为预编译工具。"><a href="#建议-浏览器端项目中如果-ESNext-代码和-ES3-5-代码混合，不要使用-TypeScript-做为预编译工具。" class="headerlink" title="[建议] 浏览器端项目中如果 ESNext 代码和 ES3/5 代码混合，不要使用 TypeScript 做为预编译工具。"></a>[建议] 浏览器端项目中如果 ESNext 代码和 ES3/5 代码混合，不要使用 <code>TypeScript</code> 做为预编译工具。</h4><p>解释：</p>
<p><code>TypeScript</code> 产生的 module 代码使用 exports.default 导出默认的 export，但是没有直接为 module.exports 赋值，导致在另外一个普通文件中使用 require(‘moduleName’) 是拿不到东西的。</p>
<p>需要使用 <code>TypeScript</code> 的话，建议整个项目所有文件都是 ESNext module 的，采用混合的 module 容易出现不可预期的结果。</p>
<h4 id="建议-AMD-CommonJS-模块依赖-ESNext-模块时，AMD-CommonJS-模块对-default-export-的-require-需要改造。"><a href="#建议-AMD-CommonJS-模块依赖-ESNext-模块时，AMD-CommonJS-模块对-default-export-的-require-需要改造。" class="headerlink" title="[建议] AMD/CommonJS 模块依赖 ESNext 模块时，AMD/CommonJS 模块对 default export 的 require 需要改造。"></a>[建议] AMD/CommonJS 模块依赖 ESNext 模块时，AMD/CommonJS 模块对 default export 的 require 需要改造。</h4><p>解释：</p>
<p>ESNext 模块经过编译后，named export 会挂载在 exports 对象上，default export 也会挂载在 exports 对象上名称为 default 的属性。同时 exports 对象会包含一个值为 true 的 __esModule 属性。那么问题来了，当 AMD/CommonJS 模块依赖了 ESNext 模块时，require 期望拿到的是 exports.default，但你实际上拿到的是 exports。</p>
<p>所以，老的 AMD/CommonJS 模块依赖了 default export 的 ESNext 模块时，对 default export 的 require 需要改造成 <code>require(&#39;name&#39;).default</code>。</p>
<p>另外，如果是 ESNext 模块之间的互相依赖，transpiler 会通过加入中间对象和引入 interop 方法，所以不会产生这个问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1 前言&quot;&gt;&lt;/a&gt;1 前言&lt;/h2&gt;&lt;p&gt;随着 ECMAScript 的不断发展，越来越多更新的语言特性将被使用，给应用的开发带来方便。本文档的目标是使 ECMAScript 新特性的代码风格保持一致，并给予一些实践建议。&lt;/p&gt;
&lt;p&gt;本文档仅包含新特性部分。基础部分请遵循 &lt;a href=&quot;javascript-style-guide.md&quot;&gt;JavaScript Style Guide&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;由于 ECMAScript 依然在快速的不断发展，本文档也将可能随时保持更新。更新内容主要涉及对新增的语言特性的格式规范化、实践指导，引擎与编译器环境变化的使用指导。&lt;/p&gt;
&lt;p&gt;虽然本文档是针对 ECMAScript 设计的，但是在使用各种基于 ECMAScript 扩展的语言时(如 JSX、TypeScript 等)，适用的部分也应尽量遵循本文档的约定。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://www.hqxdb.com/categories/javascript/"/>
    
      <category term="规范" scheme="https://www.hqxdb.com/categories/javascript/%E8%A7%84%E8%8C%83/"/>
    
    
      <category term="JavaScript" scheme="https://www.hqxdb.com/tags/JavaScript/"/>
    
      <category term="编码规范" scheme="https://www.hqxdb.com/tags/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>React规范</title>
    <link href="https://www.hqxdb.com/2017/08/23/JS%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83/react-style-guide/"/>
    <id>https://www.hqxdb.com/2017/08/23/JS书写规范/react-style-guide/</id>
    <published>2017-08-23T14:06:46.000Z</published>
    <updated>2017-08-27T02:52:14.541Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">人生入戏，全靠演技</blockquote><br><a id="more"></a> </p>
<h2 id="文件组织"><a href="#文件组织" class="headerlink" title="文件组织"></a>文件组织</h2><ul>
<li><p>[强制]同一目录下不得拥有同名的<code>.js</code>和<code>.jsx</code>文件。</p>
<p>  在使用模块导入时，倾向于不添加后缀，如果存在同名但不同后缀的文件，构建工具将无法决定哪一个是需要引入的模块。</p>
</li>
<li><p>[强制]组件文件使用一致的<code>.js</code>或 <code>.jsx</code>后缀。</p>
<p>  所有组件文件的后缀名从<code>.js</code>或<code>.jsx</code>中任选其一。</p>
<p>  不应在项目中出现部分组件为<code>.js</code>文件，部分为<code>.jsx</code>的情况。</p>
</li>
<li><p>[强制]每一个文件以<code>export default</code>的形式暴露一个组件。</p>
<p>  允许一个文件中存在多个不同的组件，但仅允许通过<code>export default</code>暴露一个组件，其它组件均定义为内部组件。</p>
</li>
<li><p>[强制]每个存放组件的目录使用一个<code>index.js</code>以命名导出的形式暴露所有组件。</p>
<p>  同目录内的组件相互引用使用<code>import Foo from &#39;./Foo&#39;;</code>进行。</p>
<p>  引用其它目录的组件使用<code>import {Foo} from &#39;../component&#39;;</code>进行。</p>
<p>  建议使用<a href="https://marketplace.visualstudio.com/items?itemName=BrunoLM.export-index" target="_blank" rel="external">VSCode的export-index插件</a>等插件自动生成<code>index.js</code>的内容。</p>
</li>
</ul>
<h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><ul>
<li><p>[强制]组件名为PascalCase。</p>
<p>  包括函数组件，名称均为PascalCase。</p>
</li>
<li><p>[强制]组件名称与文件名称保持相同。</p>
<p>  同时组件名称应当能体现出组件的功能，以便通过观察文件名即确定使用哪一个组件。</p>
</li>
<li><p>[强制]高阶组件使用camelCase命名。</p>
<p>  高阶组件事实上并非一个组件，而是一个“生成组件类型”的函数，因此遵守JavaScript函数命名的规范，使用camelCase命名。</p>
</li>
<li><p>[强制]使用<code>onXxx</code>形式作为<code>props</code>中用于回调的属性名称。</p>
<p>  使用统一的命名规则用以区分<code>props</code>中回调和非回调部分的属性，在JSX上可以清晰地看到一个组件向上和向下的逻辑交互。</p>
<p>  对于不用于回调的函数类型的属性，使用动词作为属性名称。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// onClick作为回调以on开头，renderText非回调函数则使用动词</span></div><div class="line"><span class="keyword">let</span> Label = <span class="function">(<span class="params">&#123;onClick, renderText&#125;</span>) =&gt;</span> &lt;span onClick=&#123;onClick&#125;&gt;&#123;renderText()&#125;&lt;<span class="regexp">/span&gt;;</span></div></pre></td></tr></table></figure>
</li>
<li><p>[建议]使用<code>withXxx</code>或<code>xxxable</code>形式的词作为高阶组件的名称。</p>
<p>  高阶组件是为组件添加行为和功能的函数，因此使用如上形式的词有助于对其功能进行理解。</p>
</li>
<li><p>[建议]作为组件方法的事件处理函数以具备业务含义的词作为名称，不使用<code>onXxx</code>形式命名。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Good</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Form</span> </span>&#123;</div><div class="line">    @autobind</div><div class="line">    collectAndSubmitData() &#123;</div><div class="line">        <span class="keyword">let</span> data = &#123;</div><div class="line">            name: <span class="keyword">this</span>.state.name,</div><div class="line">            age: <span class="keyword">this</span>.state.age</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">this</span>.props.onSubmit(data);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @autobind</div><div class="line">    syncName() &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @autobind</div><div class="line">    syncAge() &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div&gt;</div><div class="line">                &lt;label&gt;姓名：&lt;input type=<span class="string">"text"</span> onChange=&#123;<span class="keyword">this</span>.syncName&#125; /&gt;<span class="xml"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></div><div class="line">                &lt;label&gt;年龄：&lt;input type=<span class="string">"number"</span> onChange=&#123;<span class="keyword">this</span>.syncAge&#125; /&gt;<span class="xml"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></div><div class="line">                &lt;button type=<span class="string">"button"</span> onClick=&#123;<span class="keyword">this</span>.collectAndSubmit&#125;&gt;提交&lt;<span class="regexp">/button&gt;</span></div><div class="line"><span class="regexp">            &lt;/</span>div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="组件声明"><a href="#组件声明" class="headerlink" title="组件声明"></a>组件声明</h2><ul>
<li><p>[强制]使用ES Class声明组件，禁止使用<code>React.createClass</code>。</p>
<p>  <a href="https://facebook.github.io/react/blog/2017/04/07/react-v15.5.0.html" target="_blank" rel="external">React v15.5.0</a>已经弃用了<code>React.createClass</code>函数。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Bad</span></div><div class="line"><span class="keyword">let</span> Message = React.createClass(&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;this.state.message&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Good</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;this.state.message&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>[强制]不使用<code>state</code>的组件声明为函数组件。</p>
<p>  函数组件在React中有着特殊的地位，在将来也有可能得到更多的内部优化。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Bad</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NextNumber</span> </span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;this.props.value + 1&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Good</span></div><div class="line"><span class="keyword">let</span> NextNumber = <span class="function">(<span class="params">&#123;value&#125;</span>) =&gt;</span> &lt;span&gt;&#123;value + <span class="number">1</span>&#125;&lt;<span class="regexp">/span&gt;;</span></div></pre></td></tr></table></figure>
</li>
<li><p>[强制]所有组件均需声明<code>propTypes</code>。</p>
<p>  <code>propsTypes</code>在提升组件健壮性的同时，也是一种类似组件的文档的存在，有助于代码的阅读和理解。</p>
</li>
<li><p>[强制]对于所有非<code>isRequired</code>的属性，在<code>defaultProps</code>中声明对应的值。</p>
<p>  声明初始值有助于对组件初始状态的理解，也可以减少<code>propTypes</code>对类型进行校验产生的开销。</p>
<p>  对于初始没有值的属性，应当声明初始值为<code>null</code>而非<code>undefined</code>。</p>
</li>
<li><p>[强制]如无必要，使用静态属性语法声明<code>propsTypes</code>、<code>contextTypes</code>、<code>defaultProps</code>和<code>state</code>。</p>
<p>  仅当初始<code>state</code>需要从<code>props</code>计算得到的时候，才将<code>state</code>的声明放在构造函数中，其它情况下均使用静态属性声明进行。</p>
</li>
<li><p>[强制]依照规定顺序编排组件中的方法和属性。</p>
<p>  按照以下顺序编排组件中的方法和属性：</p>
<ol>
<li><code>static displayName</code></li>
<li><code>static propTypes</code></li>
<li><code>static contextTypes</code></li>
<li><code>state defaultProps</code></li>
<li><code>static state</code></li>
<li>其它静态的属性</li>
<li>用于事件处理并且以属性的方式（<code>onClick = e =&gt; {...}</code>）声明的方法</li>
<li>其它实例属性</li>
<li><code>constructor</code></li>
<li><code>getChildContext</code></li>
<li><code>componentWillMount</code></li>
<li><code>componentDidMount</code></li>
<li><code>shouldComponentUpdate</code></li>
<li><code>componentWillUpdate</code></li>
<li><code>componentDidUpdate</code></li>
<li><code>componentWillUnmount</code></li>
<li>事件处理方法</li>
<li>其它方法</li>
<li><p><code>render</code></p>
<p>其中<code>shouldComponentUpdate</code>和<code>render</code>是一个组件最容易被阅读的函数，因此放在最下方有助于快速定位。</p>
</li>
</ol>
</li>
<li><p>[建议]无需显式引入React对象。</p>
<p>  使用JSX隐式地依赖当前环境下有<code>React</code>这一对象，但在源码上并没有显式使用，这种情况下添加<code>import React from &#39;react&#39;;</code>会造成一个没有使用的变量存在。</p>
<p>  使用<a href="https://www.npmjs.com/package/babel-plugin-react-require" target="_blank" rel="external">babel-plugin-react-require</a>插件可以很好地解决这一问题，因此无需显式地编写<code>import React from &#39;react&#39;;</code>这一语句。</p>
</li>
<li><p>[建议]使用箭头函数声明函数组件。</p>
<p>  箭头函数具备更简洁的语法（无需<code>function</code>关键字），且可以在仅有一个语句时省去<code>return</code>造成的额外缩进。</p>
</li>
<li><p>[建议]高阶组件返回新的组件类型时，添加<code>displayName</code>属性。</p>
<p>  同时在<code>displayName</code>上声明高阶组件的存在。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Good</span></div><div class="line"><span class="keyword">let</span> asPureComponent = <span class="function"><span class="params">Component</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">let</span> componentName = Component.displayName || Component.name || <span class="string">'UnknownComponent'</span>;</div><div class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</div><div class="line">        <span class="keyword">static</span> displayName = <span class="string">`asPure(<span class="subst">$&#123;componentName&#125;</span>)`</span></div><div class="line"></div><div class="line">        render() &#123;</div><div class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">..this.props</span>&#125; /&gt;</span>;</span></div><div class="line"><span class="xml">        &#125;</span></div><div class="line"><span class="xml">    &#125;;</span></div><div class="line"><span class="xml">&#125;;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="组件实现"><a href="#组件实现" class="headerlink" title="组件实现"></a>组件实现</h2><ul>
<li><p>[强制]除顶层或路由级组件以外，所有组件均在概念上实现为纯组件（Pure Component）。</p>
<p>  本条规则并非要求组件继承自<code>PureComponent</code>，“概念上的纯组件”的意思为一个组件在<code>props</code>和<code>state</code>没有变化（shallowEqual）的情况下，渲染的结果应保持一致，即<code>shouldComponentUpdate</code>应当返回<code>false</code>。</p>
<p>  一个典型的非纯组件是使用了随机数或日期等函数：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> RandomNumber = <span class="function"><span class="params">()</span> =&gt;</span> &lt;span&gt;&#123;<span class="built_in">Math</span>.random()&#125;&lt;<span class="regexp">/span&gt;;</span></div><div class="line"><span class="regexp">let Clock = () =&gt; &lt;span&gt;&#123;Date.time()&#125;&lt;/</span>span&gt;;</div></pre></td></tr></table></figure>
<p>  非纯组件具备向上的“传染性”，即一个包含非纯组件的组件也必须是非纯组件，依次沿组件树结构向上。由于非纯组件无法通过<code>shouldComponentUpdate</code>优化渲染性能且具备传染性，因此要避免在非顶层或路由组件中使用。</p>
<p>  如果需要在组件树的某个节点使用随机数、日期等非纯的数据，应当由顶层组件生成这个值并通过<code>props</code>传递下来。对于使用Redux等应用状态管理的系统，可以在应用状态中存放相关值（如Redux使用Action Creator生成这些值并通过Action和reducer更新到store中）。</p>
</li>
<li><p>[强制]禁止为继承自<code>PureComponent</code>的组件编写<code>shouldComponentUpdate</code>实现。</p>
<p>  参考<a href="https://github.com/facebook/react/issues/9239" target="_blank" rel="external">React的相关Issue</a>，在React的实现中，<code>PureComponent</code>并不直接实现<code>shouldComponentUpdate</code>，而是添加一个<code>isReactPureComponent</code>的标记，由<code>CompositeComponent</code>通过识别这个标记实现相关的逻辑。因此在<code>PureComponent</code>上自定义<code>shouldComponentUpdate</code>并无法享受<code>super.shouldComponentUpdate</code>的逻辑复用，也会使得这个继承关系失去意义。</p>
</li>
<li><p>[强制]为非继承自<code>PureComponent</code>的纯组件实现<code>shouldComponentUpdate</code>方法。</p>
<p>  <code>shouldComponentUpdate</code>方法在React的性能中扮演着至关重要的角色，纯组件必定能通过<code>props</code>和<code>state</code>的变化来决定是否进行渲染，因此如果组件为纯组件且不继承<code>shouldComponentUpdate</code>，则应当有自己的<code>shouldComponentUpdate</code>实现来减少不必要的渲染。</p>
</li>
<li><p>[建议]为函数组件添加<code>PureComponent</code>能力。</p>
<p>  函数组件并非一定是纯组件，因此其<code>shouldComponentUpdate</code>的实现为<code>return true;</code>，这可能导致额外的无意义渲染，因此推荐使用高阶组件为其添加<code>shouldComponentUpdate</code>的相关逻辑。</p>
<p>  推荐使用<a href="https://www.npmjs.com/package/react-pure-stateless-component" target="_blank" rel="external">react-pure-stateless-component</a>库实现这一功能。</p>
</li>
<li><p>[建议]使用<code>@autobind</code>进行事件处理方法与<code>this</code>的绑定。</p>
<p>  由于<code>PureComponent</code>使用<a href="https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/shallowEqual.js" target="_blank" rel="external"><code>shallowEqual</code></a><code>进行是否渲染的判断，如果在JSX中使用</code>bind<code>或箭头函数绑定</code>this<code>会造成子组件每次获取的函数都是一个新的引用，这破坏了</code>shouldComponentUpdate<code>的逻辑，引入了无意义的重复渲染，因此需要在</code>render<code>调用之前就将事件处理方法与</code>this<code>绑定，在每次</code>render`调用中获取同样的引用。</p>
<p>  当前比较流行的事前绑定<code>this</code>的方法有2种，其一使用类属性的语法：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">    onClick = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>  其二使用<code>@autobind</code>的装饰器：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">    @autobind</div><div class="line">    onClick(e) &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  使用类属性语法虽然可以避免引入一个<code>autobind</code>的实现，但存在一定的缺陷：</p>
<ol>
<li>对于新手不容易理解函数内的<code>this</code>的定义。</li>
<li><p>无法在函数是使用其它的装饰器（如<code>memoize</code>、<code>deprecated</code>或检验相关的逻辑等）。</p>
<p>因此，推荐使用<code>@autobind</code>装饰器实现<code>this</code>的事先绑定，推荐使用<a href="https://www.npmjs.com/package/core-decorators" target="_blank" rel="external">core-decorators</a>库提供的相关装饰器实现。</p>
</li>
</ol>
</li>
</ul>
<h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><ul>
<li><p>[强制]没有子节点的非DOM组件使用自闭合语法。</p>
<p>  对于DOM节点，按照HTML编码规范相关规则进行闭合，<strong>其中void element使用自闭合语法</strong>。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Bad</span></div><div class="line">&lt;Foo&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Foo</span>&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// Good</span></div><div class="line">&lt;Foo /&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>[强制]保持起始和结束标签在同一层缩进。</p>
<p>  对于标签前面有其它语句（如<code>return</code>的情况，使用括号进行换行和缩进）。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Bad</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="xml">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div><div class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Good</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div&gt;</div><div class="line">                &lt;span&gt;Hello World&lt;<span class="regexp">/span&gt;</span></div><div class="line"><span class="regexp">            &lt;/</span>div&gt;;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  对于直接<code>return</code>的函数组件，可以直接使用括号而省去大括号和<code>return</code>关键字：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> Message = <span class="function"><span class="params">()</span> =&gt;</span> (</div><div class="line">    &lt;div&gt;</div><div class="line">        &lt;span&gt;Hello World&lt;<span class="regexp">/span&gt;</span></div><div class="line"><span class="regexp">    &lt;/</span>div&gt;</div><div class="line">);</div></pre></td></tr></table></figure>
</li>
<li><p>[强制]对于多属性需要换行，从第一个属性开始，每个属性一行。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 没有子节点</span></div><div class="line">&lt;SomeComponent</div><div class="line">    longProp=&#123;longProp&#125;</div><div class="line">    anotherLongProp=&#123;anotherLongProp&#125;</div><div class="line">/&gt;</div><div class="line"></div><div class="line"><span class="comment">// 有子节点</span></div><div class="line">&lt;SomeComponent</div><div class="line">    longProp=&#123;longProp&#125;</div><div class="line">    anotherLongProp=&#123;anotherLongProp&#125;</div><div class="line">&gt;</div><div class="line">    &lt;SomeChild /&gt;</div><div class="line">    &lt;SomeChild /&gt;</div><div class="line">&lt;<span class="regexp">/SomeComponent&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>[强制]以字符串字面量作为值的属性使用双引号（<code>&quot;</code>），在其它类型表达式中的字符串使用单引号（<code>&#39;</code>）。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Bad</span></div><div class="line">&lt;Foo bar=<span class="string">'bar'</span> /&gt;</div><div class="line">&lt;Foo style=&#123;&#123;<span class="attr">width</span>: <span class="string">"20px"</span>&#125;&#125; /&gt;</div><div class="line"></div><div class="line"><span class="comment">// Good</span></div><div class="line">&lt;Foo bar=<span class="string">"bar"</span> /&gt;</div><div class="line">&lt;Foo style=&#123;&#123;<span class="attr">width</span>: <span class="string">'20px'</span>&#125;&#125; /&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>[强制]自闭合标签的<code>/&gt;</code>前添加一个空格。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Bad</span></div><div class="line">&lt;Foo bar=<span class="string">"bar"</span>/&gt;</div><div class="line">&lt;Foo bar=<span class="string">"bar"</span>  /&gt;</div><div class="line"></div><div class="line"><span class="comment">// Good</span></div><div class="line">&lt;Foo bar=<span class="string">"bar"</span> /&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>[强制]对于值为<code>true</code>的属性，省去值部分。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Bad</span></div><div class="line">&lt;Foo visible=&#123;<span class="literal">true</span>&#125; /&gt;</div><div class="line"></div><div class="line"><span class="comment">// Good</span></div><div class="line">&lt;Foo visible /&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>[强制]对于需要使用<code>key</code>的场合，提供一个唯一标识作为<code>key</code>属性的值，禁止使用可能会变化的属性（如索引）。</p>
<p>  <code>key</code>属性是React在进行列表更新时的重要属性，如该属性会发生变化，渲染的性能和<strong>正确性</strong>都无法得到保证。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Bad</span></div><div class="line">&#123;list.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &lt;Foo key=&#123;index&#125; &#123;...item&#125; /&gt;)&#125;</div><div class="line"></div><div class="line"><span class="comment">// Good</span></div><div class="line">&#123;list.map(<span class="function"><span class="params">item</span> =&gt;</span> &lt;Foo key=&#123;item.id&#125; &#123;...item&#125; /&gt;)&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>[建议]避免在JSX的属性值中直接使用对象和函数表达式。</p>
<p>  <code>PureComponent</code>使用<a href="https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/shallowEqual.js" target="_blank" rel="external"><code>shallowEqual</code></a>对<code>props</code>和<code>state</code>进行比较来决定是否需要渲染，而在JSX的属性值中使用对象、函数表达式会造成每一次的对象引用不同，从而<code>shallowEqual</code>会返回<code>false</code>，导致不必要的渲染。</p>
</li>
</ul>
<pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Bad</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WarnButton</span> </span>&#123;</div><div class="line">    alertMessage(message) &#123;</div><div class="line">        alert(message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.alertMessage(this.props.message)&#125;&gt;提示<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Good</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WarnButton</span> </span>&#123;</div><div class="line">    @autobind</div><div class="line">    alertMessage() &#123;</div><div class="line">        alert(<span class="keyword">this</span>.props.message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onClick</span>=<span class="string">&#123;this.alertMessage&#125;</span>&gt;</span>提示<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><ul>
<li><p>[建议]将JSX的层级控制在3层以内。</p>
<p>  JSX提供了基于组件的便携的复用形式，因此可以通过将结构中的一部分封装为一个函数组件来很好地拆分大型复杂的结构。层次过深的结构会带来过多缩进、可读性下降等缺点。如同控制函数内代码行数和分支层级一样，对JSX的层级进行控制可以有效提升代码的可维护性。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Bad</span></div><div class="line"><span class="keyword">let</span> List = <span class="function">(<span class="params">&#123;items&#125;</span>) =&gt;</span> (</div><div class="line">    &lt;ul&gt;</div><div class="line">        &#123;</div><div class="line">            items.map(<span class="function"><span class="params">item</span> =&gt;</span> (</div><div class="line">                &lt;li&gt;</div><div class="line">                    &lt;header&gt;</div><div class="line">                        &lt;h3&gt;&#123;item.title&#125;&lt;<span class="regexp">/h3&gt;</span></div><div class="line"><span class="regexp">                        &lt;span&gt;&#123;item.subtitle&#125;&lt;/</span>span&gt;</div><div class="line">                    &lt;<span class="regexp">/header&gt;</span></div><div class="line"><span class="regexp">                    &lt;section&gt;&#123;item.content&#125;&lt;/</span>section&gt;</div><div class="line">                    &lt;footer&gt;</div><div class="line">                        &lt;span&gt;&#123;item.author&#125;&lt;<span class="regexp">/span&gt;@&lt;time&gt;&#123;item.postTime&#125;&lt;/</span>time&gt;</div><div class="line">                    &lt;<span class="regexp">/footer&gt;</span></div><div class="line"><span class="regexp">                &lt;/</span>li&gt;</div><div class="line">            ))</div><div class="line">        &#125;</div><div class="line">    &lt;<span class="regexp">/ul&gt;</span></div><div class="line"><span class="regexp">);</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">/</span><span class="regexp">/ Good</span></div><div class="line"><span class="regexp">let Header = (&#123;title, subtitle&#125;) =&gt; (</span></div><div class="line"><span class="regexp">    &lt;header&gt;</span></div><div class="line"><span class="regexp">        &lt;h3&gt;&#123;title&#125;&lt;/</span>h3&gt;</div><div class="line">        &lt;span&gt;&#123;subtitle&#125;&lt;<span class="regexp">/span&gt;</span></div><div class="line"><span class="regexp">    &lt;/</span>header&gt;</div><div class="line">);</div><div class="line"></div><div class="line"><span class="keyword">let</span> Content = <span class="function">(<span class="params">&#123;content&#125;</span>) =&gt;</span> &lt;section&gt;&#123;content&#125;&lt;<span class="regexp">/section&gt;;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">let Footer = (&#123;author, postTime&#125;) =&gt; (</span></div><div class="line"><span class="regexp">    &lt;footer&gt;</span></div><div class="line"><span class="regexp">        &lt;span&gt;&#123;author&#125;&lt;/</span>span&gt;@&lt;time&gt;&#123;postTime&#125;&lt;<span class="regexp">/time&gt;</span></div><div class="line"><span class="regexp">    &lt;/</span>footer&gt;</div><div class="line">);</div><div class="line"></div><div class="line"><span class="keyword">let</span> Item = <span class="function"><span class="params">item</span> =&gt;</span> (</div><div class="line">    &lt;div&gt;</div><div class="line">        &lt;Header &#123;...item&#125; /&gt;</div><div class="line">        &lt;Content &#123;...item&#125; /&gt;</div><div class="line">        &lt;Footer &#123;...item&#125; /&gt;</div><div class="line">    &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">);</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">let List = (&#123;items&#125;) =&gt; (</span></div><div class="line"><span class="regexp">    &lt;ul&gt;</span></div><div class="line"><span class="regexp">        &#123;items.map(Item)&#125;</span></div><div class="line"><span class="regexp">    &lt;/u</span>l&gt;</div><div class="line">);</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;人生入戏，全靠演技&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://www.hqxdb.com/categories/javascript/"/>
    
      <category term="规范" scheme="https://www.hqxdb.com/categories/javascript/%E8%A7%84%E8%8C%83/"/>
    
    
      <category term="javascript" scheme="https://www.hqxdb.com/tags/javascript/"/>
    
      <category term="react" scheme="https://www.hqxdb.com/tags/react/"/>
    
      <category term="jsx" scheme="https://www.hqxdb.com/tags/jsx/"/>
    
      <category term="html" scheme="https://www.hqxdb.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>CSS编码规范</title>
    <link href="https://www.hqxdb.com/2017/08/23/JS%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83/css-style-guide/"/>
    <id>https://www.hqxdb.com/2017/08/23/JS书写规范/css-style-guide/</id>
    <published>2017-08-23T14:06:46.000Z</published>
    <updated>2017-08-27T02:51:29.238Z</updated>
    
    <content type="html"><![CDATA[<!-- <blockquote class="blockquote-center"></blockquote> -->
<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h2><p>CSS 作为网页样式的描述语言，在百度一直有着广泛的应用。本文档的目标是使 CSS 代码风格保持一致，容易被理解和被维护。</p>
<p>虽然本文档是针对 CSS 设计的，但是在使用各种 CSS 的预编译器(如 less、sass、stylus 等)时，适用的部分也应尽量遵循本文档的约定。</p>
<a id="more"></a> 
<h2 id="2-代码风格"><a href="#2-代码风格" class="headerlink" title="2 代码风格"></a>2 代码风格</h2><h3 id="2-1-文件"><a href="#2-1-文件" class="headerlink" title="2.1 文件"></a>2.1 文件</h3><h4 id="建议-CSS-文件使用无-BOM-的-UTF-8-编码。"><a href="#建议-CSS-文件使用无-BOM-的-UTF-8-编码。" class="headerlink" title="[建议] CSS 文件使用无 BOM 的 UTF-8 编码。"></a>[建议] <code>CSS</code> 文件使用无 <code>BOM</code> 的 <code>UTF-8</code> 编码。</h4><p>解释：</p>
<p>UTF-8 编码具有更广泛的适应性。BOM 在使用程序或工具处理文件时可能造成不必要的干扰。</p>
<h3 id="2-2-缩进"><a href="#2-2-缩进" class="headerlink" title="2.2 缩进"></a>2.2 缩进</h3><h4 id="强制-使用-4-个空格做为一个缩进层级，不允许使用-2-个空格-或-tab-字符。"><a href="#强制-使用-4-个空格做为一个缩进层级，不允许使用-2-个空格-或-tab-字符。" class="headerlink" title="[强制] 使用 4 个空格做为一个缩进层级，不允许使用 2 个空格 或 tab 字符。"></a>[强制] 使用 <code>4</code> 个空格做为一个缩进层级，不允许使用 <code>2</code> 个空格 或 <code>tab</code> 字符。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.selector</span> &#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-3-空格"><a href="#2-3-空格" class="headerlink" title="2.3 空格"></a>2.3 空格</h3><h4 id="强制-选择器-与-之间必须包含空格。"><a href="#强制-选择器-与-之间必须包含空格。" class="headerlink" title="[强制] 选择器 与 { 之间必须包含空格。"></a>[强制] <code>选择器</code> 与 <code>{</code> 之间必须包含空格。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.selector</span> &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="强制-属性名-与之后的-之间不允许包含空格，-与-属性值-之间必须包含空格。"><a href="#强制-属性名-与之后的-之间不允许包含空格，-与-属性值-之间必须包含空格。" class="headerlink" title="[强制] 属性名 与之后的 : 之间不允许包含空格， : 与 属性值 之间必须包含空格。"></a>[强制] <code>属性名</code> 与之后的 <code>:</code> 之间不允许包含空格， <code>:</code> 与 <code>属性值</code> 之间必须包含空格。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">margin</span>: 0;</div></pre></td></tr></table></figure>
<h4 id="强制-列表型属性值-书写在单行时，-后必须跟一个空格。"><a href="#强制-列表型属性值-书写在单行时，-后必须跟一个空格。" class="headerlink" title="[强制] 列表型属性值 书写在单行时，, 后必须跟一个空格。"></a>[强制] <code>列表型属性值</code> 书写在单行时，<code>,</code> 后必须跟一个空格。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">font-family</span>: <span class="selector-tag">Arial</span>, <span class="selector-tag">sans-serif</span>;</div></pre></td></tr></table></figure>
<h3 id="2-4-行长度"><a href="#2-4-行长度" class="headerlink" title="2.4 行长度"></a>2.4 行长度</h3><h4 id="强制-每行不得超过-120-个字符，除非单行不可分割。"><a href="#强制-每行不得超过-120-个字符，除非单行不可分割。" class="headerlink" title="[强制] 每行不得超过 120 个字符，除非单行不可分割。"></a>[强制] 每行不得超过 <code>120</code> 个字符，除非单行不可分割。</h4><p>解释：</p>
<p>常见不可分割的场景为URL超长。</p>
<h4 id="建议-对于超长的样式，在样式值的-空格-处或-后换行，建议按逻辑分组。"><a href="#建议-对于超长的样式，在样式值的-空格-处或-后换行，建议按逻辑分组。" class="headerlink" title="[建议] 对于超长的样式，在样式值的 空格 处或 , 后换行，建议按逻辑分组。"></a>[建议] 对于超长的样式，在样式值的 <code>空格</code> 处或 <code>,</code> 后换行，建议按逻辑分组。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 不同属性值按逻辑分组 */</span></div><div class="line"><span class="selector-tag">background</span>:</div><div class="line">    <span class="selector-tag">transparent</span> <span class="selector-tag">url</span>(<span class="selector-tag">aVeryVeryVeryLongUrlIsPlacedHere</span>)</div><div class="line">    <span class="selector-tag">no-repeat</span> 0 0;</div><div class="line"></div><div class="line"><span class="comment">/* 可重复多次的属性，每次重复一行 */</span></div><div class="line"><span class="selector-tag">background-image</span>:</div><div class="line">    <span class="selector-tag">url</span>(<span class="selector-tag">aVeryVeryVeryLongUrlIsPlacedHere</span>)</div><div class="line">    <span class="selector-tag">url</span>(<span class="selector-tag">anotherVeryVeryVeryLongUrlIsPlacedHere</span>);</div><div class="line"></div><div class="line"><span class="comment">/* 类似函数的属性值可以根据函数调用的缩进进行 */</span></div><div class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">-webkit-gradient</span>(</div><div class="line">    <span class="selector-tag">linear</span>,</div><div class="line">    <span class="selector-tag">left</span> <span class="selector-tag">bottom</span>,</div><div class="line">    <span class="selector-tag">left</span> <span class="selector-tag">top</span>,</div><div class="line">    <span class="selector-tag">color-stop</span>(0<span class="selector-class">.04</span>, <span class="selector-tag">rgb</span>(88,94,124)),</div><div class="line">    <span class="selector-tag">color-stop</span>(0<span class="selector-class">.52</span>, <span class="selector-tag">rgb</span>(115,123,162))</div><div class="line">);</div></pre></td></tr></table></figure>
<h3 id="2-5-选择器"><a href="#2-5-选择器" class="headerlink" title="2.5 选择器"></a>2.5 选择器</h3><h4 id="强制-当一个-rule-包含多个-selector-时，每个选择器声明必须独占一行。"><a href="#强制-当一个-rule-包含多个-selector-时，每个选择器声明必须独占一行。" class="headerlink" title="[强制] 当一个 rule 包含多个 selector 时，每个选择器声明必须独占一行。"></a>[强制] 当一个 rule 包含多个 selector 时，每个选择器声明必须独占一行。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* good */</span></div><div class="line"><span class="selector-class">.post</span>,</div><div class="line"><span class="selector-class">.page</span>,</div><div class="line"><span class="selector-class">.comment</span> &#123;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* bad */</span></div><div class="line"><span class="selector-class">.post</span>, <span class="selector-class">.page</span>, <span class="selector-class">.comment</span> &#123;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="强制-gt-、-、-选择器的两边各保留一个空格。"><a href="#强制-gt-、-、-选择器的两边各保留一个空格。" class="headerlink" title="[强制] &gt;、+、~ 选择器的两边各保留一个空格。"></a>[强制] <code>&gt;</code>、<code>+</code>、<code>~</code> 选择器的两边各保留一个空格。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* good */</span></div><div class="line"><span class="selector-tag">main</span> &gt; <span class="selector-tag">nav</span> &#123;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">label</span> + <span class="selector-tag">input</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> ~ <span class="selector-tag">button</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#69C</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* bad */</span></div><div class="line"><span class="selector-tag">main</span>&gt;<span class="selector-tag">nav</span> &#123;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">label</span>+<span class="selector-tag">input</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:checked</span>~<span class="selector-tag">button</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#69C</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="强制-属性选择器中的值必须用双引号包围。"><a href="#强制-属性选择器中的值必须用双引号包围。" class="headerlink" title="[强制] 属性选择器中的值必须用双引号包围。"></a>[强制] 属性选择器中的值必须用双引号包围。</h4><p>解释：</p>
<p>不允许使用单引号，不允许不使用引号。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* good */</span></div><div class="line"><span class="selector-tag">article</span><span class="selector-attr">[character="juliet"]</span> &#123;</div><div class="line">    <span class="attribute">voice-family</span>: <span class="string">"Vivien Leigh"</span>, victoria, female;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* bad */</span></div><div class="line"><span class="selector-tag">article</span><span class="selector-attr">[character='juliet']</span> &#123;</div><div class="line">    <span class="attribute">voice-family</span>: <span class="string">"Vivien Leigh"</span>, victoria, female;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-6-属性"><a href="#2-6-属性" class="headerlink" title="2.6 属性"></a>2.6 属性</h3><h4 id="强制-属性定义必须另起一行。"><a href="#强制-属性定义必须另起一行。" class="headerlink" title="[强制] 属性定义必须另起一行。"></a>[强制] 属性定义必须另起一行。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* good */</span></div><div class="line"><span class="selector-class">.selector</span> &#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* bad */</span></div><div class="line"><span class="selector-class">.selector</span> &#123; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; &#125;</div></pre></td></tr></table></figure>
<h4 id="强制-属性定义后必须以分号结尾。"><a href="#强制-属性定义后必须以分号结尾。" class="headerlink" title="[强制] 属性定义后必须以分号结尾。"></a>[强制] 属性定义后必须以分号结尾。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* good */</span></div><div class="line"><span class="selector-class">.selector</span> &#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* bad */</span></div><div class="line"><span class="selector-class">.selector</span> &#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-通用"><a href="#3-通用" class="headerlink" title="3 通用"></a>3 通用</h2><h3 id="3-1-选择器"><a href="#3-1-选择器" class="headerlink" title="3.1 选择器"></a>3.1 选择器</h3><h4 id="强制-如无必要，不得为-id、class-选择器添加类型选择器进行限定。"><a href="#强制-如无必要，不得为-id、class-选择器添加类型选择器进行限定。" class="headerlink" title="[强制] 如无必要，不得为 id、class 选择器添加类型选择器进行限定。"></a>[强制] 如无必要，不得为 <code>id</code>、<code>class</code> 选择器添加类型选择器进行限定。</h4><p>解释：</p>
<p>在性能和维护性上，都有一定的影响。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* good */</span></div><div class="line"><span class="selector-id">#error</span>,</div><div class="line"><span class="selector-class">.danger-message</span> &#123;</div><div class="line">    <span class="attribute">font-color</span>: <span class="number">#c00</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* bad */</span></div><div class="line"><span class="selector-tag">dialog</span><span class="selector-id">#error</span>,</div><div class="line"><span class="selector-tag">p</span><span class="selector-class">.danger-message</span> &#123;</div><div class="line">    <span class="attribute">font-color</span>: <span class="number">#c00</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="建议-选择器的嵌套层级应不大于-3-级，位置靠后的限定条件应尽可能精确。"><a href="#建议-选择器的嵌套层级应不大于-3-级，位置靠后的限定条件应尽可能精确。" class="headerlink" title="[建议] 选择器的嵌套层级应不大于 3 级，位置靠后的限定条件应尽可能精确。"></a>[建议] 选择器的嵌套层级应不大于 <code>3</code> 级，位置靠后的限定条件应尽可能精确。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* good */</span></div><div class="line"><span class="selector-id">#username</span> <span class="selector-tag">input</span> &#123;&#125;</div><div class="line"><span class="selector-class">.comment</span> <span class="selector-class">.avatar</span> &#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">/* bad */</span></div><div class="line"><span class="selector-class">.page</span> <span class="selector-class">.header</span> <span class="selector-class">.login</span> <span class="selector-id">#username</span> <span class="selector-tag">input</span> &#123;&#125;</div><div class="line"><span class="selector-class">.comment</span> <span class="selector-tag">div</span> * &#123;&#125;</div></pre></td></tr></table></figure>
<h3 id="3-2-属性缩写"><a href="#3-2-属性缩写" class="headerlink" title="3.2 属性缩写"></a>3.2 属性缩写</h3><h4 id="建议-在可以使用缩写的情况下，尽量使用属性缩写。"><a href="#建议-在可以使用缩写的情况下，尽量使用属性缩写。" class="headerlink" title="[建议] 在可以使用缩写的情况下，尽量使用属性缩写。"></a>[建议] 在可以使用缩写的情况下，尽量使用属性缩写。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* good */</span></div><div class="line"><span class="selector-class">.post</span> &#123;</div><div class="line">    <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">1.5</span> arial, sans-serif;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* bad */</span></div><div class="line"><span class="selector-class">.post</span> &#123;</div><div class="line">    <span class="attribute">font-family</span>: arial, sans-serif;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="建议-使用-border-margin-padding-等缩写时，应注意隐含值对实际数值的影响，确实需要设置多个方向的值时才使用缩写。"><a href="#建议-使用-border-margin-padding-等缩写时，应注意隐含值对实际数值的影响，确实需要设置多个方向的值时才使用缩写。" class="headerlink" title="[建议] 使用 border / margin / padding 等缩写时，应注意隐含值对实际数值的影响，确实需要设置多个方向的值时才使用缩写。"></a>[建议] 使用 <code>border</code> / <code>margin</code> / <code>padding</code> 等缩写时，应注意隐含值对实际数值的影响，确实需要设置多个方向的值时才使用缩写。</h4><p>解释：</p>
<p><code>border</code> / <code>margin</code> / <code>padding</code> 等缩写会同时设置多个属性的值，容易覆盖不需要覆盖的设定。如某些方向需要继承其他声明的值，则应该分开设置。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* centering &lt;article class="page"&gt; horizontally and highlight featured ones */</span></div><div class="line"><span class="selector-tag">article</span> &#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">5px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* good */</span></div><div class="line"><span class="selector-class">.page</span> &#123;</div><div class="line">    <span class="attribute">margin-right</span>: auto;</div><div class="line">    <span class="attribute">margin-left</span>: auto;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.featured</span> &#123;</div><div class="line">    <span class="attribute">border-color</span>: <span class="number">#69c</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* bad */</span></div><div class="line"><span class="selector-class">.page</span> &#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">5px</span> auto; <span class="comment">/* introducing redundancy */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.featured</span> &#123;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#69c</span>; <span class="comment">/* introducing redundancy */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-3-属性书写顺序"><a href="#3-3-属性书写顺序" class="headerlink" title="3.3 属性书写顺序"></a>3.3 属性书写顺序</h3><h4 id="建议-同一-rule-set-下的属性在书写时，应按功能进行分组，并以-Formatting-Model（布局方式、位置）-gt-Box-Model（尺寸）-gt-Typographic（文本相关）-gt-Visual（视觉效果）-的顺序书写，以提高代码的可读性。"><a href="#建议-同一-rule-set-下的属性在书写时，应按功能进行分组，并以-Formatting-Model（布局方式、位置）-gt-Box-Model（尺寸）-gt-Typographic（文本相关）-gt-Visual（视觉效果）-的顺序书写，以提高代码的可读性。" class="headerlink" title="[建议] 同一 rule set 下的属性在书写时，应按功能进行分组，并以 Formatting Model（布局方式、位置） &gt; Box Model（尺寸） &gt; Typographic（文本相关） &gt; Visual（视觉效果） 的顺序书写，以提高代码的可读性。"></a>[建议] 同一 rule set 下的属性在书写时，应按功能进行分组，并以 <strong>Formatting Model（布局方式、位置） &gt; Box Model（尺寸） &gt; Typographic（文本相关） &gt; Visual（视觉效果）</strong> 的顺序书写，以提高代码的可读性。</h4><p>解释：</p>
<ul>
<li>Formatting Model 相关属性包括：<code>position</code> / <code>top</code> / <code>right</code> / <code>bottom</code> / <code>left</code> / <code>float</code> / <code>display</code> / <code>overflow</code> 等</li>
<li>Box Model 相关属性包括：<code>border</code> / <code>margin</code> / <code>padding</code> / <code>width</code> / <code>height</code> 等</li>
<li>Typographic 相关属性包括：<code>font</code> / <code>line-height</code> / <code>text-align</code> / <code>word-wrap</code> 等</li>
<li>Visual 相关属性包括：<code>background</code> / <code>color</code> / <code>transition</code> / <code>list-style</code> 等</li>
</ul>
<p>另外，如果包含 <code>content</code> 属性，应放在最前面。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.sidebar</span> &#123;</div><div class="line">    <span class="comment">/* formatting model: positioning schemes / offsets / z-indexes / display / ...  */</span></div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">50px</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">overflow-x</span>: hidden;</div><div class="line"></div><div class="line">    <span class="comment">/* box model: sizes / margins / paddings / borders / ...  */</span></div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</div><div class="line"></div><div class="line">    <span class="comment">/* typographic: font / aligns / text styles / ... */</span></div><div class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</div><div class="line"></div><div class="line">    <span class="comment">/* visual: colors / shadows / gradients / ... */</span></div><div class="line">    <span class="attribute">background</span>: <span class="number">#f5f5f5</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</div><div class="line">    <span class="attribute">-webkit-transition</span>: color <span class="number">1s</span>;</div><div class="line">       <span class="attribute">-moz-transition</span>: color <span class="number">1s</span>;</div><div class="line">            <span class="attribute">transition</span>: color <span class="number">1s</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-4-清除浮动"><a href="#3-4-清除浮动" class="headerlink" title="3.4 清除浮动"></a>3.4 清除浮动</h3><h4 id="建议-当元素需要撑起高度以包含内部的浮动元素时，通过对伪类设置-clear-或触发-BFC-的方式进行-clearfix。尽量不使用增加空标签的方式。"><a href="#建议-当元素需要撑起高度以包含内部的浮动元素时，通过对伪类设置-clear-或触发-BFC-的方式进行-clearfix。尽量不使用增加空标签的方式。" class="headerlink" title="[建议] 当元素需要撑起高度以包含内部的浮动元素时，通过对伪类设置 clear 或触发 BFC 的方式进行 clearfix。尽量不使用增加空标签的方式。"></a>[建议] 当元素需要撑起高度以包含内部的浮动元素时，通过对伪类设置 <code>clear</code> 或触发 <code>BFC</code> 的方式进行 <code>clearfix</code>。尽量不使用增加空标签的方式。</h4><p>解释：</p>
<p>触发 BFC 的方式很多，常见的有：</p>
<ul>
<li>float 非 none</li>
<li>position 非 static</li>
<li>overflow 非 visible</li>
</ul>
<p>如希望使用更小副作用的清除浮动方法，参见 <a href="http://nicolasgallagher.com/micro-clearfix-hack/" target="_blank" rel="external">A new micro clearfix hack</a> 一文。</p>
<p>另需注意，对已经触发 BFC 的元素不需要再进行 clearfix。</p>
<h3 id="3-5-important"><a href="#3-5-important" class="headerlink" title="3.5 !important"></a>3.5 !important</h3><h4 id="建议-尽量不使用-important-声明。"><a href="#建议-尽量不使用-important-声明。" class="headerlink" title="[建议] 尽量不使用 !important 声明。"></a>[建议] 尽量不使用 <code>!important</code> 声明。</h4><h4 id="建议-当需要强制指定样式且不允许任何场景覆盖时，通过标签内联和-important-定义样式。"><a href="#建议-当需要强制指定样式且不允许任何场景覆盖时，通过标签内联和-important-定义样式。" class="headerlink" title="[建议] 当需要强制指定样式且不允许任何场景覆盖时，通过标签内联和 !important 定义样式。"></a>[建议] 当需要强制指定样式且不允许任何场景覆盖时，通过标签内联和 <code>!important</code> 定义样式。</h4><p>解释：</p>
<p>必须注意的是，仅在设计上 <code>确实不允许任何其它场景覆盖样式</code> 时，才使用内联的 <code>!important</code> 样式。通常在第三方环境的应用中使用这种方案。下面的 <code>z-index</code> 章节是其中一个特殊场景的典型样例。</p>
<h3 id="3-6-z-index"><a href="#3-6-z-index" class="headerlink" title="3.6 z-index"></a>3.6 z-index</h3><h4 id="建议-将-z-index-进行分层，对文档流外绝对定位元素的视觉层级关系进行管理。"><a href="#建议-将-z-index-进行分层，对文档流外绝对定位元素的视觉层级关系进行管理。" class="headerlink" title="[建议] 将 z-index 进行分层，对文档流外绝对定位元素的视觉层级关系进行管理。"></a>[建议] 将 <code>z-index</code> 进行分层，对文档流外绝对定位元素的视觉层级关系进行管理。</h4><p>解释：</p>
<p>同层的多个元素，如多个由用户输入触发的 Dialog，在该层级内使用相同的 <code>z-index</code> 或递增 <code>z-index</code>。</p>
<p>建议每层包含100个 <code>z-index</code> 来容纳足够的元素，如果每层元素较多，可以调整这个数值。</p>
<h4 id="建议-在可控环境下，期望显示在最上层的元素，z-index-指定为-999999。"><a href="#建议-在可控环境下，期望显示在最上层的元素，z-index-指定为-999999。" class="headerlink" title="[建议] 在可控环境下，期望显示在最上层的元素，z-index 指定为 999999。"></a>[建议] 在可控环境下，期望显示在最上层的元素，<code>z-index</code> 指定为 <code>999999</code>。</h4><p>解释：</p>
<p>可控环境分成两种，一种是自身产品线环境；还有一种是可能会被其他产品线引用，但是不会被外部第三方的产品引用。</p>
<p>不建议取值为 <code>2147483647</code>。以便于自身产品线被其他产品线引用时，当遇到层级覆盖冲突的情况，留出向上调整的空间。</p>
<h4 id="建议-在第三方环境下，期望显示在最上层的元素，通过标签内联和-important，将-z-index-指定为-2147483647。"><a href="#建议-在第三方环境下，期望显示在最上层的元素，通过标签内联和-important，将-z-index-指定为-2147483647。" class="headerlink" title="[建议] 在第三方环境下，期望显示在最上层的元素，通过标签内联和 !important，将 z-index 指定为 2147483647。"></a>[建议] 在第三方环境下，期望显示在最上层的元素，通过标签内联和 <code>!important</code>，将 <code>z-index</code> 指定为 <code>2147483647</code>。</h4><p>解释：</p>
<p>第三方环境对于开发者来说完全不可控。在第三方环境下的元素，为了保证元素不被其页面其他样式定义覆盖，需要采用此做法。</p>
<h2 id="4-值与单位"><a href="#4-值与单位" class="headerlink" title="4 值与单位"></a>4 值与单位</h2><h3 id="4-1-文本"><a href="#4-1-文本" class="headerlink" title="4.1 文本"></a>4.1 文本</h3><h4 id="强制-文本内容必须用双引号包围。"><a href="#强制-文本内容必须用双引号包围。" class="headerlink" title="[强制] 文本内容必须用双引号包围。"></a>[强制] 文本内容必须用双引号包围。</h4><p>解释：</p>
<p>文本类型的内容可能在选择器、属性值等内容中。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* good */</span></div><div class="line"><span class="selector-tag">html</span><span class="selector-attr">[lang|="zh"]</span> <span class="selector-tag">q</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">    <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>, sans-serif;</div><div class="line">    <span class="attribute">content</span>: <span class="string">"“"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">html</span><span class="selector-attr">[lang|="zh"]</span> <span class="selector-tag">q</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>, sans-serif;</div><div class="line">    <span class="attribute">content</span>: <span class="string">"”"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* bad */</span></div><div class="line"><span class="selector-tag">html</span><span class="selector-attr">[lang|=zh]</span> <span class="selector-tag">q</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">    <span class="attribute">font-family</span>: <span class="string">'Microsoft YaHei'</span>, sans-serif;</div><div class="line">    <span class="attribute">content</span>: <span class="string">'“'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">html</span><span class="selector-attr">[lang|=zh]</span> <span class="selector-tag">q</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>, sans-serif;</div><div class="line">    <span class="attribute">content</span>: <span class="string">"”"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-2-数值"><a href="#4-2-数值" class="headerlink" title="4.2 数值"></a>4.2 数值</h3><h4 id="强制-当数值为-0-1-之间的小数时，省略整数部分的-0。"><a href="#强制-当数值为-0-1-之间的小数时，省略整数部分的-0。" class="headerlink" title="[强制] 当数值为 0 - 1 之间的小数时，省略整数部分的 0。"></a>[强制] 当数值为 0 - 1 之间的小数时，省略整数部分的 <code>0</code>。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* good */</span></div><div class="line"><span class="selector-tag">panel</span> &#123;</div><div class="line">    <span class="attribute">opacity</span>: .<span class="number">8</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* bad */</span></div><div class="line"><span class="selector-tag">panel</span> &#123;</div><div class="line">    <span class="attribute">opacity</span>: <span class="number">0.8</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-3-url"><a href="#4-3-url" class="headerlink" title="4.3 url()"></a>4.3 url()</h3><h4 id="强制-url-函数中的路径不加引号。"><a href="#强制-url-函数中的路径不加引号。" class="headerlink" title="[强制] url() 函数中的路径不加引号。"></a>[强制] <code>url()</code> 函数中的路径不加引号。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(bg.png);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="建议-url-函数中的绝对路径可省去协议名。"><a href="#建议-url-函数中的绝对路径可省去协议名。" class="headerlink" title="[建议] url() 函数中的绝对路径可省去协议名。"></a>[建议] <code>url()</code> 函数中的绝对路径可省去协议名。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(//baidu.com/img/bg.png) no-repeat <span class="number">0</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-4-长度"><a href="#4-4-长度" class="headerlink" title="4.4 长度"></a>4.4 长度</h3><h4 id="强制-长度为-0-时须省略单位。-也只有长度单位可省"><a href="#强制-长度为-0-时须省略单位。-也只有长度单位可省" class="headerlink" title="[强制] 长度为 0 时须省略单位。 (也只有长度单位可省)"></a>[强制] 长度为 <code>0</code> 时须省略单位。 (也只有长度单位可省)</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* good */</span></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* bad */</span></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">5px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-5-颜色"><a href="#4-5-颜色" class="headerlink" title="4.5 颜色"></a>4.5 颜色</h3><h4 id="强制-RGB颜色值必须使用十六进制记号形式-rrggbb。不允许使用-rgb-。"><a href="#强制-RGB颜色值必须使用十六进制记号形式-rrggbb。不允许使用-rgb-。" class="headerlink" title="[强制] RGB颜色值必须使用十六进制记号形式 #rrggbb。不允许使用 rgb()。"></a>[强制] RGB颜色值必须使用十六进制记号形式 <code>#rrggbb</code>。不允许使用 <code>rgb()</code>。</h4><p>解释：</p>
<p>带有alpha的颜色信息可以使用 <code>rgba()</code>。使用 <code>rgba()</code> 时每个逗号后必须保留一个空格。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* good */</span></div><div class="line"><span class="selector-class">.success</span> &#123;</div><div class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="built_in">rgba</span>(0, 128, 0, .3);</div><div class="line">    <span class="attribute">border-color</span>: <span class="number">#008000</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* bad */</span></div><div class="line"><span class="selector-class">.success</span> &#123;</div><div class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="built_in">rgba</span>(0,128,0,.3);</div><div class="line">    <span class="attribute">border-color</span>: <span class="built_in">rgb</span>(0, 128, 0);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="强制-颜色值可以缩写时，必须使用缩写形式。"><a href="#强制-颜色值可以缩写时，必须使用缩写形式。" class="headerlink" title="[强制] 颜色值可以缩写时，必须使用缩写形式。"></a>[强制] 颜色值可以缩写时，必须使用缩写形式。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* good */</span></div><div class="line"><span class="selector-class">.success</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#aca</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* bad */</span></div><div class="line"><span class="selector-class">.success</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#aaccaa</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="强制-颜色值不允许使用命名色值。"><a href="#强制-颜色值不允许使用命名色值。" class="headerlink" title="[强制] 颜色值不允许使用命名色值。"></a>[强制] 颜色值不允许使用命名色值。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* good */</span></div><div class="line"><span class="selector-class">.success</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#90ee90</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* bad */</span></div><div class="line"><span class="selector-class">.success</span> &#123;</div><div class="line">    <span class="attribute">color</span>: lightgreen;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="建议-颜色值中的英文字符采用小写。如不用小写也需要保证同一项目内保持大小写一致。"><a href="#建议-颜色值中的英文字符采用小写。如不用小写也需要保证同一项目内保持大小写一致。" class="headerlink" title="[建议] 颜色值中的英文字符采用小写。如不用小写也需要保证同一项目内保持大小写一致。"></a>[建议] 颜色值中的英文字符采用小写。如不用小写也需要保证同一项目内保持大小写一致。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* good */</span></div><div class="line"><span class="selector-class">.success</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#aca</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#90ee90</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* good */</span></div><div class="line"><span class="selector-class">.success</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#ACA</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#90EE90</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* bad */</span></div><div class="line"><span class="selector-class">.success</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#ACA</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#90ee90</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-6-2D-位置"><a href="#4-6-2D-位置" class="headerlink" title="4.6 2D 位置"></a>4.6 2D 位置</h3><h4 id="强制-必须同时给出水平和垂直方向的位置。"><a href="#强制-必须同时给出水平和垂直方向的位置。" class="headerlink" title="[强制] 必须同时给出水平和垂直方向的位置。"></a>[强制] 必须同时给出水平和垂直方向的位置。</h4><p>解释：</p>
<p>2D 位置初始值为 <code>0% 0%</code>，但在只有一个方向的值时，另一个方向的值会被解析为 center。为避免理解上的困扰，应同时给出两个方向的值。<a href="http://www.w3.org/TR/CSS21/colors.html#propdef-background-position" target="_blank" rel="external">background-position属性值的定义</a></p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* good */</span></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">background-position</span>: center top; <span class="comment">/* 50% 0% */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* bad */</span></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">background-position</span>: top; <span class="comment">/* 50% 0% */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="5-文本编排"><a href="#5-文本编排" class="headerlink" title="5 文本编排"></a>5 文本编排</h2><h3 id="5-1-字体族"><a href="#5-1-字体族" class="headerlink" title="5.1 字体族"></a>5.1 字体族</h3><h4 id="强制-font-family-属性中的字体族名称应使用字体的英文-Family-Name，其中如有空格，须放置在引号中。"><a href="#强制-font-family-属性中的字体族名称应使用字体的英文-Family-Name，其中如有空格，须放置在引号中。" class="headerlink" title="[强制] font-family 属性中的字体族名称应使用字体的英文 Family Name，其中如有空格，须放置在引号中。"></a>[强制] <code>font-family</code> 属性中的字体族名称应使用字体的英文 <code>Family Name</code>，其中如有空格，须放置在引号中。</h4><p>解释：</p>
<p>所谓英文 Family Name，为字体文件的一个元数据，常见名称如下：</p>
<table>
<thead>
<tr>
<th>字体</th>
<th>操作系统</th>
<th>Family Name</th>
</tr>
</thead>
<tbody>
<tr>
<td>宋体 (中易宋体)</td>
<td>Windows</td>
<td>SimSun</td>
</tr>
<tr>
<td>黑体 (中易黑体)</td>
<td>Windows</td>
<td>SimHei</td>
</tr>
<tr>
<td>微软雅黑</td>
<td>Windows</td>
<td>Microsoft YaHei</td>
</tr>
<tr>
<td>微软正黑</td>
<td>Windows</td>
<td>Microsoft JhengHei</td>
</tr>
<tr>
<td>华文黑体</td>
<td>Mac/iOS</td>
<td>STHeiti</td>
</tr>
<tr>
<td>冬青黑体</td>
<td>Mac/iOS</td>
<td>Hiragino Sans GB</td>
</tr>
<tr>
<td>文泉驿正黑</td>
<td>Linux</td>
<td>WenQuanYi Zen Hei</td>
</tr>
<tr>
<td>文泉驿微米黑</td>
<td>Linux</td>
<td>WenQuanYi Micro Hei</td>
</tr>
</tbody>
</table>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h1</span> &#123;</div><div class="line">    <span class="attribute">font-family</span>: <span class="string">"Microsoft YaHei"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="强制-font-family-按「西文字体在前、中文字体在后」、「效果佳-质量高-更能满足需求-的字体在前、效果一般的字体在后」的顺序编写，最后必须指定一个通用字体族-serif-sans-serif-。"><a href="#强制-font-family-按「西文字体在前、中文字体在后」、「效果佳-质量高-更能满足需求-的字体在前、效果一般的字体在后」的顺序编写，最后必须指定一个通用字体族-serif-sans-serif-。" class="headerlink" title="[强制] font-family 按「西文字体在前、中文字体在后」、「效果佳 (质量高/更能满足需求) 的字体在前、效果一般的字体在后」的顺序编写，最后必须指定一个通用字体族( serif / sans-serif )。"></a>[强制] <code>font-family</code> 按「西文字体在前、中文字体在后」、「效果佳 (质量高/更能满足需求) 的字体在前、效果一般的字体在后」的顺序编写，最后必须指定一个通用字体族( <code>serif</code> / <code>sans-serif</code> )。</h4><p>解释：</p>
<p>更详细说明可参考<a href="http://www.zhihu.com/question/19911793/answer/13329819" target="_blank" rel="external">本文</a>。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Display according to platform */</span></div><div class="line"><span class="selector-class">.article</span> &#123;</div><div class="line">    <span class="attribute">font-family</span>: Arial, sans-serif;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Specific for most platforms */</span></div><div class="line"><span class="selector-tag">h1</span> &#123;</div><div class="line">    <span class="attribute">font-family</span>: <span class="string">"Helvetica Neue"</span>, Arial, <span class="string">"Hiragino Sans GB"</span>, <span class="string">"WenQuanYi Micro Hei"</span>, <span class="string">"Microsoft YaHei"</span>, sans-serif;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="强制-font-family-不区分大小写，但在同一个项目中，同样的-Family-Name-大小写必须统一。"><a href="#强制-font-family-不区分大小写，但在同一个项目中，同样的-Family-Name-大小写必须统一。" class="headerlink" title="[强制] font-family 不区分大小写，但在同一个项目中，同样的 Family Name 大小写必须统一。"></a>[强制] <code>font-family</code> 不区分大小写，但在同一个项目中，同样的 <code>Family Name</code> 大小写必须统一。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* good */</span></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">font-family</span>: Arial, sans-serif;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">h1</span> &#123;</div><div class="line">    <span class="attribute">font-family</span>: Arial, <span class="string">"Microsoft YaHei"</span>, sans-serif;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* bad */</span></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">font-family</span>: arial, sans-serif;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">h1</span> &#123;</div><div class="line">    <span class="attribute">font-family</span>: Arial, <span class="string">"Microsoft YaHei"</span>, sans-serif;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-2-字号"><a href="#5-2-字号" class="headerlink" title="5.2 字号"></a>5.2 字号</h3><h4 id="强制-需要在-Windows-平台显示的中文内容，其字号应不小于-12px。"><a href="#强制-需要在-Windows-平台显示的中文内容，其字号应不小于-12px。" class="headerlink" title="[强制] 需要在 Windows 平台显示的中文内容，其字号应不小于 12px。"></a>[强制] 需要在 Windows 平台显示的中文内容，其字号应不小于 <code>12px</code>。</h4><p>解释：</p>
<p>由于 Windows 的字体渲染机制，小于 <code>12px</code> 的文字显示效果极差、难以辨认。</p>
<h3 id="5-3-字体风格"><a href="#5-3-字体风格" class="headerlink" title="5.3 字体风格"></a>5.3 字体风格</h3><h4 id="建议-需要在-Windows-平台显示的中文内容，不要使用除-normal-外的-font-style。其他平台也应慎用。"><a href="#建议-需要在-Windows-平台显示的中文内容，不要使用除-normal-外的-font-style。其他平台也应慎用。" class="headerlink" title="[建议] 需要在 Windows 平台显示的中文内容，不要使用除 normal 外的 font-style。其他平台也应慎用。"></a>[建议] 需要在 Windows 平台显示的中文内容，不要使用除 <code>normal</code> 外的 <code>font-style</code>。其他平台也应慎用。</h4><p>解释：</p>
<p>由于中文字体没有 <code>italic</code> 风格的实现，所有浏览器下都会 fallback 到 <code>obilique</code> 实现 (自动拟合为斜体)，小字号下 (特别是 Windows 下会在小字号下使用点阵字体的情况下) 显示效果差，造成阅读困难。</p>
<h3 id="5-4-字重"><a href="#5-4-字重" class="headerlink" title="5.4 字重"></a>5.4 字重</h3><h4 id="强制-font-weight-属性必须使用数值方式描述。"><a href="#强制-font-weight-属性必须使用数值方式描述。" class="headerlink" title="[强制] font-weight 属性必须使用数值方式描述。"></a>[强制] <code>font-weight</code> 属性必须使用数值方式描述。</h4><p>解释：</p>
<p>CSS 的字重分 100 – 900 共九档，但目前受字体本身质量和浏览器的限制，实际上支持 <code>400</code> 和 <code>700</code> 两档，分别等价于关键词 <code>normal</code> 和 <code>bold</code>。</p>
<p>浏览器本身使用一系列<a href="http://www.w3.org/TR/CSS21/fonts.html#propdef-font-weight" target="_blank" rel="external">启发式规则</a>来进行匹配，在 <code>&lt;700</code> 时一般匹配字体的 Regular 字重，<code>&gt;=700</code> 时匹配 Bold 字重。</p>
<p>但已有浏览器开始支持 <code>=600</code> 时匹配 Semibold 字重 (见<a href="http://justineo.github.io/slideshows/font/#/3/15" target="_blank" rel="external">此表</a>)，故使用数值描述增加了灵活性，也更简短。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* good */</span></div><div class="line"><span class="selector-tag">h1</span> &#123;</div><div class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* bad */</span></div><div class="line"><span class="selector-tag">h1</span> &#123;</div><div class="line">    <span class="attribute">font-weight</span>: bold;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-5-行高"><a href="#5-5-行高" class="headerlink" title="5.5 行高"></a>5.5 行高</h3><h4 id="建议-line-height-在定义文本段落时，应使用数值。"><a href="#建议-line-height-在定义文本段落时，应使用数值。" class="headerlink" title="[建议] line-height 在定义文本段落时，应使用数值。"></a>[建议] <code>line-height</code> 在定义文本段落时，应使用数值。</h4><p>解释：</p>
<p>将 <code>line-height</code> 设置为数值，浏览器会基于当前元素设置的 <code>font-size</code> 进行再次计算。在不同字号的文本段落组合中，能达到较为舒适的行间间隔效果，避免在每个设置了 <code>font-size</code> 都需要设置 <code>line-height</code>。</p>
<p>当 <code>line-height</code> 用于控制垂直居中时，还是应该设置成与容器高度一致。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="6-变换与动画"><a href="#6-变换与动画" class="headerlink" title="6 变换与动画"></a>6 变换与动画</h2><h4 id="强制-使用-transition-时应指定-transition-property。"><a href="#强制-使用-transition-时应指定-transition-property。" class="headerlink" title="[强制] 使用 transition 时应指定 transition-property。"></a>[强制] 使用 <code>transition</code> 时应指定 <code>transition-property</code>。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* good */</span></div><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">transition</span>: color <span class="number">1s</span>, border-color <span class="number">1s</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* bad */</span></div><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">transition</span>: all <span class="number">1s</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="建议-尽可能在浏览器能高效实现的属性上添加过渡和动画。"><a href="#建议-尽可能在浏览器能高效实现的属性上添加过渡和动画。" class="headerlink" title="[建议] 尽可能在浏览器能高效实现的属性上添加过渡和动画。"></a>[建议] 尽可能在浏览器能高效实现的属性上添加过渡和动画。</h4><p>解释：</p>
<p>见<a href="http://www.html5rocks.com/en/tutorials/speed/high-performance-animations/" target="_blank" rel="external">本文</a>，在可能的情况下应选择这样四种变换：</p>
<ul>
<li><code>transform: translate(npx, npx);</code></li>
<li><code>transform: scale(n);</code></li>
<li><code>transform: rotate(ndeg);</code></li>
<li><code>opacity: 0..1;</code></li>
</ul>
<p>典型的，可以使用 <code>translate</code> 来代替 <code>left</code> 作为动画属性。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* good */</span></div><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">transition</span>: transform <span class="number">1s</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(20px); <span class="comment">/* move right for 20px */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* bad */</span></div><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">transition</span>: left <span class="number">1s</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">20px</span>; <span class="comment">/* move right for 20px */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="7-响应式"><a href="#7-响应式" class="headerlink" title="7 响应式"></a>7 响应式</h2><h4 id="强制-Media-Query-不得单独编排，必须与相关的规则一起定义。"><a href="#强制-Media-Query-不得单独编排，必须与相关的规则一起定义。" class="headerlink" title="[强制] Media Query 不得单独编排，必须与相关的规则一起定义。"></a>[强制] <code>Media Query</code> 不得单独编排，必须与相关的规则一起定义。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Good */</span></div><div class="line"><span class="comment">/* header styles */</span></div><div class="line">@<span class="keyword">media</span> (...) &#123;</div><div class="line">    <span class="comment">/* header styles */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* main styles */</span></div><div class="line">@<span class="keyword">media</span> (...) &#123;</div><div class="line">    <span class="comment">/* main styles */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* footer styles */</span></div><div class="line">@<span class="keyword">media</span> (...) &#123;</div><div class="line">    <span class="comment">/* footer styles */</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/* Bad */</span></div><div class="line"><span class="comment">/* header styles */</span></div><div class="line"><span class="comment">/* main styles */</span></div><div class="line"><span class="comment">/* footer styles */</span></div><div class="line"></div><div class="line">@<span class="keyword">media</span> (...) &#123;</div><div class="line">    <span class="comment">/* header styles */</span></div><div class="line">    <span class="comment">/* main styles */</span></div><div class="line">    <span class="comment">/* footer styles */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="强制-Media-Query-如果有多个逗号分隔的条件时，应将每个条件放在单独一行中。"><a href="#强制-Media-Query-如果有多个逗号分隔的条件时，应将每个条件放在单独一行中。" class="headerlink" title="[强制] Media Query 如果有多个逗号分隔的条件时，应将每个条件放在单独一行中。"></a>[强制] <code>Media Query</code> 如果有多个逗号分隔的条件时，应将每个条件放在单独一行中。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span></div><div class="line">(-webkit-min-device-pixel-ratio: 2), /* Webkit-based browsers */</div><div class="line">(<span class="selector-tag">min--moz-device-pixel-ratio</span>: 2),    <span class="comment">/* Older Firefox browsers (prior to Firefox 16) */</span></div><div class="line">(<span class="selector-tag">min-resolution</span>: 2<span class="selector-tag">dppx</span>),             <span class="comment">/* The standard way */</span></div><div class="line">(<span class="selector-tag">min-resolution</span>: 192<span class="selector-tag">dpi</span>) &#123;           <span class="comment">/* dppx fallback */</span></div><div class="line">    <span class="comment">/* Retina-specific stuff here */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="建议-尽可能给出在高分辨率设备-Retina-下效果更佳的样式。"><a href="#建议-尽可能给出在高分辨率设备-Retina-下效果更佳的样式。" class="headerlink" title="[建议] 尽可能给出在高分辨率设备 (Retina) 下效果更佳的样式。"></a>[建议] 尽可能给出在高分辨率设备 (Retina) 下效果更佳的样式。</h4><h2 id="8-兼容性"><a href="#8-兼容性" class="headerlink" title="8 兼容性"></a>8 兼容性</h2><h3 id="8-1-属性前缀"><a href="#8-1-属性前缀" class="headerlink" title="8.1 属性前缀"></a>8.1 属性前缀</h3><h4 id="强制-带私有前缀的属性由长到短排列，按冒号位置对齐。"><a href="#强制-带私有前缀的属性由长到短排列，按冒号位置对齐。" class="headerlink" title="[强制] 带私有前缀的属性由长到短排列，按冒号位置对齐。"></a>[强制] 带私有前缀的属性由长到短排列，按冒号位置对齐。</h4><p>解释：</p>
<p>标准属性放在最后，按冒号对齐方便阅读，也便于在编辑器内进行多行编辑。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">-webkit-box-sizing</span>: border-box;</div><div class="line">       <span class="attribute">-moz-box-sizing</span>: border-box;</div><div class="line">            <span class="attribute">box-sizing</span>: border-box;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="8-2-Hack"><a href="#8-2-Hack" class="headerlink" title="8.2 Hack"></a>8.2 Hack</h3><h4 id="建议-需要添加-hack-时应尽可能考虑是否可以采用其他方式解决。"><a href="#建议-需要添加-hack-时应尽可能考虑是否可以采用其他方式解决。" class="headerlink" title="[建议] 需要添加 hack 时应尽可能考虑是否可以采用其他方式解决。"></a>[建议] 需要添加 <code>hack</code> 时应尽可能考虑是否可以采用其他方式解决。</h4><p>解释：</p>
<p>如果能通过合理的 HTML 结构或使用其他的 CSS 定义达到理想的样式，则不应该使用 hack 手段解决问题。通常 hack 会导致维护成本的增加。</p>
<h4 id="建议-尽量使用-选择器-hack-处理兼容性，而非-属性-hack。"><a href="#建议-尽量使用-选择器-hack-处理兼容性，而非-属性-hack。" class="headerlink" title="[建议] 尽量使用 选择器 hack 处理兼容性，而非 属性 hack。"></a>[建议] 尽量使用 <code>选择器 hack</code> 处理兼容性，而非 <code>属性 hack</code>。</h4><p>解释：</p>
<p>尽量使用符合 CSS 语法的 selector hack，可以避免一些第三方库无法识别 hack 语法的问题。</p>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* IE 7 */</span></div><div class="line">*<span class="selector-pseudo">:first-child</span> + <span class="selector-tag">html</span> <span class="selector-id">#header</span> &#123;</div><div class="line">    <span class="attribute">margin-top</span>: <span class="number">3px</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* IE 6 */</span></div><div class="line">* <span class="selector-tag">html</span> <span class="selector-id">#header</span> &#123;</div><div class="line">    <span class="attribute">margin-top</span>: <span class="number">5px</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">4px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="建议-尽量使用简单的-属性-hack。"><a href="#建议-尽量使用简单的-属性-hack。" class="headerlink" title="[建议] 尽量使用简单的 属性 hack。"></a>[建议] 尽量使用简单的 <code>属性 hack</code>。</h4><p>示例：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">_display</span>: inline; <span class="comment">/* fix double margin */</span></div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">    *zoom: 1; /* triggering hasLayout */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="8-3-Expression"><a href="#8-3-Expression" class="headerlink" title="8.3 Expression"></a>8.3 Expression</h3><h4 id="强制-禁止使用-Expression。"><a href="#强制-禁止使用-Expression。" class="headerlink" title="[强制] 禁止使用 Expression。"></a>[强制] 禁止使用 <code>Expression</code>。</h4>]]></content>
    
    <summary type="html">
    
      &lt;!-- &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;/blockquote&gt; --&gt;
&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1 前言&quot;&gt;&lt;/a&gt;1 前言&lt;/h2&gt;&lt;p&gt;CSS 作为网页样式的描述语言，在百度一直有着广泛的应用。本文档的目标是使 CSS 代码风格保持一致，容易被理解和被维护。&lt;/p&gt;
&lt;p&gt;虽然本文档是针对 CSS 设计的，但是在使用各种 CSS 的预编译器(如 less、sass、stylus 等)时，适用的部分也应尽量遵循本文档的约定。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://www.hqxdb.com/categories/javascript/"/>
    
      <category term="规范" scheme="https://www.hqxdb.com/categories/javascript/%E8%A7%84%E8%8C%83/"/>
    
    
      <category term="CSS编码规范" scheme="https://www.hqxdb.com/tags/CSS%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>E-JSON数据传输标准</title>
    <link href="https://www.hqxdb.com/2017/08/23/JS%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83/e-json/"/>
    <id>https://www.hqxdb.com/2017/08/23/JS书写规范/e-json/</id>
    <published>2017-08-23T14:06:46.000Z</published>
    <updated>2017-08-27T02:51:38.489Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>E-JSON的设计目标是使业务系统向浏览器端传递的JSON数据保持一致，容易被理解和处理，并兼顾传输的数据量。E-JSON依托于http协议（rfc2616）与JSON数据交换格式（rfc4627）。</p>
<a id="more"></a> 
<h3 id="编撰"><a href="#编撰" class="headerlink" title="编撰"></a>编撰</h3><p>erik, 欧阳先伟</p>
<h3 id="评审"><a href="#评审" class="headerlink" title="评审"></a>评审</h3><p>曹特磊，蓝晓斌，李铮，林攀辉，童遥，王志寿，严俊羿</p>
<h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>在本文档中，使用的关键字会以中文+括号包含的关键字英文表示：必须(MUST)。关键字”MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL”被定义在rfc2119中。</p>
<!-- more --> 
<h2 id="JSON数据类型"><a href="#JSON数据类型" class="headerlink" title="JSON数据类型"></a>JSON数据类型</h2><p>JSON（JavaScript Object Notation）是一种轻量级，基于文本，语言无关的数据交换格式。其包括了基本数据类型4种和复合数据类型2种，共6种数据类型。在下面章节中，JSON数据类型的表示法为JSON+空格+数据类型，如：JSON Array。</p>
<p>传输的数据，包括对象属性以及数组成员， <em>必须(MUST)</em> 是6种JSON数据类型之一。 <em>杜绝(MUST NOT)</em> 使用function、Date等js对象类型。</p>
<h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><ul>
<li>Number可以表示整数和浮点数。</li>
<li>Boolean可以表示真假，值为true或false。</li>
<li>String表示一个字符串。</li>
<li>Null通常用于表示空对象。</li>
</ul>
<p>“true”和true，这两个数据代表的是不同的数据类型。非字符串类型数据输出时一定 <em>不要(MUST NOT)</em> 为两端加上双引号，否则可能产生不希望的后果（如if中判断”false”的结果是true）。其他容易产生错误的例子如：0和”0”等。</p>
<h3 id="复合数据类型"><a href="#复合数据类型" class="headerlink" title="复合数据类型"></a>复合数据类型</h3><p>Object是无序的集合，以键值对的方式保持数据。一个Object中包含零到多个name/value的数据，数据间以逗号(,)分隔。name为String类型，value可以是任意类型的数据。</p>
<p>Object的最后一个元素之后一定 <em>不要(MUST NOT)</em> 加上分隔符的逗号，否则可能导致解析出错。</p>
<p>Array(数组)为多个值的有序集合，数组元素间以逗号(,)分隔。</p>
<h2 id="http响应头"><a href="#http响应头" class="headerlink" title="http响应头"></a>http响应头</h2><h3 id="status"><a href="#status" class="headerlink" title="status"></a>status</h3><p>http响应的status <em>必须(MUST)</em> 为200。通常JSON数据被用于通过XMLHttpRequest对象访问，通过javascript进行处理。返回错误的状态码可能导致错误不被响应，数据不被处理。</p>
<h3 id="Content-Type"><a href="#Content-Type" class="headerlink" title="Content-Type"></a>Content-Type</h3><p>Content-Type字段定义了响应体的类型。一般情况下，浏览器会根据该类型对内容进行正确的处理。对于传输JSON数据的响应，Content-Type <em>推荐(RECOMMENDED)</em> 设置为”text/javascript”或”text/plain”。 <em>避免(MUST NOT)</em> 将Context-Type设置为text/html，否则可能导致安全问题。</p>
<p>Content-Type中可以指定字符集。通常 <em>需要(SHOULD)</em> 明确指定一个字符集。如果是通过XMLHTTPRequest请求的数据，并且字符编码为UTF-8时，可以不指定字符集。</p>
<h4 id="Context-Type示例"><a href="#Context-Type示例" class="headerlink" title="Context-Type示例"></a>Context-Type示例</h4><pre><code>text/javascript;charset=UTF-8
</code></pre><h2 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h2><p>返回的数据包含在http响应体中。数据 <em>必须(MUST)</em> 是一个JSON Object。该Object可能包含3个字段：status，statusInfo，data。</p>
<h3 id="status-1"><a href="#status-1" class="headerlink" title="status"></a>status</h3><p>status字段 <em>必须(MUST)</em> 是一个不小于0的JSON Number整数，表示请求的状态。这个字段 <em>可以(SHOULD)</em> 被省略，省略时和为0时表示同一含义。</p>
<p>0：表示server端理解了请求，成功处理并返回。</p>
<p>非0：表示发生错误。 <em>可以(SHOULD)</em> 根据错误类型扩展错误码。</p>
<h4 id="一个成功请求的status字段"><a href="#一个成功请求的status字段" class="headerlink" title="一个成功请求的status字段"></a>一个成功请求的status字段</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"status"</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">"data"</span>: <span class="string">"hello world!"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="statusInfo"><a href="#statusInfo" class="headerlink" title="statusInfo"></a>statusInfo</h3><p>statusInfo字段 <em>通常(SHOULD)</em> 是一个JSON String或JSON Object，表示除了请求状态外server端想要对status做出的说明，使client端能够获取更多信息进行后续处理。这个字段是 <em>可选的(OPTIONAL)</em> 。下面的两个例子中，statusInfo字段的信息都可以用于client端程序的后续处理，但是粒度和处理方式会有不同。</p>
<h4 id="client端参数错误的statusInfo"><a href="#client端参数错误的statusInfo" class="headerlink" title="client端参数错误的statusInfo"></a>client端参数错误的statusInfo</h4><p>简单说明的statusInfo：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"status"</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">"statusInfo"</span>: <span class="string">"参数错误"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具有更多信息的statusInfo：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"status"</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">"statusInfo"</span>: &#123;</div><div class="line">        <span class="attr">"text"</span>: <span class="string">"参数错误"</span>,</div><div class="line">        <span class="attr">"parameters"</span>: &#123;</div><div class="line">            <span class="attr">"email"</span>: <span class="string">"电子邮件格式不正确"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="data"><a href="#data" class="headerlink" title="data"></a>data</h3><p>data字段可以是除JSON Null之外的任意JSON类型，表示请求返回的数据主体。这个字段是 <em>可选的(OPTIONAL)</em> 。数据主体data包含了在请求成功时有意义的数据。</p>
<h4 id="一个查询姓名请求的返回数据"><a href="#一个查询姓名请求的返回数据" class="headerlink" title="一个查询姓名请求的返回数据"></a>一个查询姓名请求的返回数据</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"status"</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">"data"</span>: <span class="string">"Lily"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="数据场景"><a href="#数据场景" class="headerlink" title="数据场景"></a>数据场景</h2><p>本章为常见数据场景定义了通用的标准数据格式，用于数据传输和使用。额外地，本章为部分可能大数据量传输的数据场景定义了变通数据格式。变通数据格式可在数据解析阶段转换成标准数据格式。</p>
<p>变通数据格式 <em>必须(MUST)</em> 是一个JSON Object，其中 <em>必须(MUST)</em> 包含e-type属性和data属性。e-type属性标识数据类型，便于对数据进行解析；data属性包含变通后的数据。变通数据 <em>可以(MAY)</em> 包含其他的属性，标识数据的其他扩展信息。</p>
<p>变通数据格式的e-type属性定义了table值。e-type属性可以使用者扩展其他属性值，扩展的属性值 <em>必须(MUST)</em> 以“项目缩写-名称”命名，如“fc-list”，自主解析。</p>
<h3 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h3><p>日期类型不属于JSON数据类型。对于日期类型，我们 <em>必须(MUST)</em> 使用JSON String来表示。为了让日期能够更容易的被显示和被解析，对于日期我们 <em>应当(SHOULD)</em> 使用更适合internet的格式，遵循rfc3339。</p>
<h4 id="数据场景：日期"><a href="#数据场景：日期" class="headerlink" title="数据场景：日期"></a>数据场景：日期</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"status"</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">"data"</span>: <span class="string">"2010-10-10"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h3><p>记录代表二维表中的一行，通常用于表示某个具体事务抽象的属性。标准记录数据 <em>必须(MUST)</em> 为一个JSON Object，记录的主键命名 <em>必须(MUST)</em> 为“id”。单条记录数据不包含变通数据格式。</p>
<h4 id="数据场景：记录"><a href="#数据场景：记录" class="headerlink" title="数据场景：记录"></a>数据场景：记录</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"id"</span>: <span class="number">250</span>,</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"erik"</span>,</div><div class="line">    <span class="attr">"sex"</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">"age"</span>: <span class="number">18</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="二维表"><a href="#二维表" class="headerlink" title="二维表"></a>二维表</h3><p>二维表类型表识为table，是关系模型的主要数据结构。二维表结构具有变通数据格式。标准二维表数据 <em>必须(MUST)</em> 以一维JSON Array形式表示，JSON Array中每一项是一个JSON Object，代表一条记录。JSON Object的每个成员代表一个字段。每条记录的主键命名 <em>必须(MUST)</em> 为”id”。</p>
<p>在标准二维表中，字段名在每条记录中都被传输，会造成额外的数据量传输。这个问题会随着记录数的增大会更加突出。为了减少传输数据量，变通格式使用二维JSON Array传输数据，扩展fields属性用于字段说明。fields字段为JSON Array。</p>
<h4 id="数据场景：标准二维表"><a href="#数据场景：标准二维表" class="headerlink" title="数据场景：标准二维表"></a>数据场景：标准二维表</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123;</div><div class="line">        <span class="attr">"id"</span>: <span class="number">250</span>,</div><div class="line">        <span class="attr">"name"</span>: <span class="string">"erik"</span>,</div><div class="line">        <span class="attr">"sex"</span>: <span class="number">1</span>,</div><div class="line">        <span class="attr">"age"</span>: <span class="number">18</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="attr">"id"</span>: <span class="number">251</span>,</div><div class="line">        <span class="attr">"name"</span>: <span class="string">"欧阳先伟"</span>,</div><div class="line">        <span class="attr">"sex"</span>: <span class="number">1</span>,</div><div class="line">        <span class="attr">"age"</span>: <span class="number">28</span></div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<h4 id="数据场景：变通二维表"><a href="#数据场景：变通二维表" class="headerlink" title="数据场景：变通二维表"></a>数据场景：变通二维表</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"e-type"</span>: <span class="string">"table"</span>,</div><div class="line">    <span class="attr">"fields"</span>: [<span class="string">"id"</span>, <span class="string">"name"</span>, <span class="string">"sex"</span>, <span class="string">"age"</span>],</div><div class="line">    <span class="attr">"data"</span>: [</div><div class="line">        [<span class="number">250</span>, <span class="string">"erik"</span>, <span class="number">1</span>, <span class="number">18</span>],</div><div class="line">        [<span class="number">251</span>, <span class="string">"欧阳先伟"</span>, <span class="number">1</span>, <span class="number">28</span>]</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="数据页"><a href="#数据页" class="headerlink" title="数据页"></a>数据页</h3><p>数据页是列表数据常用的数据方式，可能通过查询或翻页获得数据。数据页是二维表数据的包装，包含列表数据本身更多的信息。</p>
<p>数据页 <em>必须(MUST)</em> 是一个JSON Object，其中 <em>必须(MUST)</em> 包含的属性为data。data是一个二维表。数据页可以包括一些 <em>可选(OPTIONAL)</em> 的属性，表示当前数据页的信息。下表列举了数据页的可选属性。</p>
<h3 id="数据页可选属性"><a href="#数据页可选属性" class="headerlink" title="数据页可选属性"></a>数据页可选属性</h3><ul>
<li>{Number} page - 当前页码，计数 <em>必须(MUST)</em> 为不小于0的整数，从0开始。</li>
<li>{Number} pageSize - 每页显示条数， <em>必须(MUST)</em> 大于0。</li>
<li>{Number} total - 列表总记录数， <em>必须(MUST)</em> 为不小于0的整数。表示当前条件下所有记录的数目，非本页的记录数。</li>
<li>{String} orderBy - 列表排序规则。多个排序规则之间以逗号分割（,）；正序或倒序以asc或desc表示，与字段名之间以一个空格间隔。例：”id desc,name asc”</li>
<li>{String} keyword - 列表所属的搜索关键字。</li>
<li>{Object} condition - 列表所属的搜索条件集合。属性中可以包含或不包含keyword字段，如果不包含， <em>建议(RECOMMMANDED)</em> 在解析的时候附加搜索关键字keyword条件。 </li>
</ul>
<h4 id="数据场景：数据页"><a href="#数据场景：数据页" class="headerlink" title="数据场景：数据页"></a>数据场景：数据页</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"page"</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">"pageSize"</span>: <span class="number">30</span>,</div><div class="line">    <span class="attr">"keyword"</span>: <span class="string">""</span>,</div><div class="line">    <span class="attr">"data"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"id"</span>: <span class="number">250</span>,</div><div class="line">            <span class="attr">"name"</span>: <span class="string">"erik"</span>,</div><div class="line">            <span class="attr">"sex"</span>: <span class="number">1</span>,</div><div class="line">            <span class="attr">"age"</span>: <span class="number">18</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"id"</span>: <span class="number">251</span>,</div><div class="line">            <span class="attr">"name"</span>: <span class="string">"欧阳先伟"</span>,</div><div class="line">            <span class="attr">"sex"</span>: <span class="number">1</span>,</div><div class="line">            <span class="attr">"age"</span>: <span class="number">28</span></div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="键-值对象"><a href="#键-值对象" class="headerlink" title="键/值对象"></a>键/值对象</h3><p>对于在一个JSON Object中表示键/值：</p>
<ul>
<li>键的属性名 <em>必须(MUST)</em> 为name， <em>杜绝(MUST NOT)</em> 使用key或k</li>
<li>值的属性名 <em>必须(MUST)</em> 为value， <em>杜绝(MUST NOT)</em> 使用v。</li>
</ul>
<h4 id="数据场景：键-值对象"><a href="#数据场景：键-值对象" class="headerlink" title="数据场景：键/值对象"></a>数据场景：键/值对象</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"BMW"</span>,</div><div class="line">    <span class="attr">"value"</span>: <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="键-值有序集合"><a href="#键-值有序集合" class="headerlink" title="键/值有序集合"></a>键/值有序集合</h3><p>键/值有序集合表示对事务或逻辑类型的抽象与分类。常见的应用场景有单选复选框集合，下拉菜单等。</p>
<p>标准的键/值有序集合是一个JSON Array，集合中的每一项是一个JSON Object。项 <em>必须(MUST)</em> 包含name和value属性。 <em>可以(MAY)</em> 通过其他的属性修饰每一项的特殊信息，如selected。</p>
<h4 id="数据场景：键-值有序集合"><a href="#数据场景：键-值有序集合" class="headerlink" title="数据场景：键/值有序集合"></a>数据场景：键/值有序集合</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123;</div><div class="line">        <span class="attr">"name"</span>: <span class="string">"BMW"</span>,</div><div class="line">        <span class="attr">"value"</span>: <span class="number">1</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="attr">"name"</span>: <span class="string">"Benz"</span>,</div><div class="line">        <span class="attr">"value"</span>: <span class="number">2</span>,</div><div class="line">        <span class="attr">"selected"</span>: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><p>树形数据用于表示层叠的数据结构。树型数据 <em>必须(MUST)</em> 是一个JSON Object，代表树型数据的根节点。下面是标准定义的可选节点列表，不在列表中的属性 <em>可以(SHOULD)</em> 自行扩展。</p>
<h3 id="树型数据结构的可选节点属性"><a href="#树型数据结构的可选节点属性" class="headerlink" title="树型数据结构的可选节点属性"></a>树型数据结构的可选节点属性</h3><ul>
<li>{Number|String} id - 节点的唯一标识。</li>
<li>{String} text - 名称或用于显示的字符串。</li>
<li>{Array} children - 子节点列表。</li>
</ul>
<h4 id="数据场景：树型数据"><a href="#数据场景：树型数据" class="headerlink" title="数据场景：树型数据"></a>数据场景：树型数据</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">"text"</span>: <span class="string">"中国"</span>,</div><div class="line">    <span class="attr">"children"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"id"</span>: <span class="number">10</span>,</div><div class="line">            <span class="attr">"text"</span>: <span class="string">"北京"</span>,</div><div class="line">            <span class="attr">"children"</span>: [</div><div class="line">                &#123;</div><div class="line">                    <span class="attr">"id"</span>: <span class="number">100</span>,</div><div class="line">                    <span class="attr">"text"</span>: <span class="string">"东城区"</span></div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    <span class="attr">"id"</span>: <span class="number">101</span>,</div><div class="line">                    <span class="attr">"text"</span>: <span class="string">"西城区"</span></div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    <span class="attr">"id"</span>: <span class="number">102</span>,</div><div class="line">                    <span class="attr">"text"</span>: <span class="string">"海淀区"</span></div><div class="line">                &#125;</div><div class="line">                ......</div><div class="line">            ]</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"id"</span>: <span class="number">31</span>,</div><div class="line">            <span class="attr">"text"</span>: <span class="string">"海南"</span>,</div><div class="line">            <span class="attr">"children"</span>: [</div><div class="line">                &#123;</div><div class="line">                    <span class="attr">"id"</span>: <span class="number">600</span>,</div><div class="line">                    <span class="attr">"text"</span>: <span class="string">"海口"</span></div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    <span class="attr">"id"</span>: <span class="number">601</span>,</div><div class="line">                    <span class="attr">"text"</span>: <span class="string">"三亚"</span></div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    <span class="attr">"id"</span>: <span class="number">602</span>,</div><div class="line">                    <span class="attr">"text"</span>: <span class="string">"五指山"</span></div><div class="line">                &#125;</div><div class="line">                ......</div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">        ......</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul>
<li>[RFC 2119] “Key words for use in RFCs to Indicate Requirement Levels”</li>
<li>[RFC 4627] “The application/json Media Type for JavaScript Object Notation (JSON)”</li>
<li>[RFC 2616] “Hypertext Transfer Protocol”</li>
<li>[RFC 3339] “Date and Time on the Internet: Timestamps”</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;E-JSON的设计目标是使业务系统向浏览器端传递的JSON数据保持一致，容易被理解和处理，并兼顾传输的数据量。E-JSON依托于http协议（rfc2616）与JSON数据交换格式（rfc4627）。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://www.hqxdb.com/categories/javascript/"/>
    
      <category term="规范" scheme="https://www.hqxdb.com/categories/javascript/%E8%A7%84%E8%8C%83/"/>
    
    
      <category term="E-JSON" scheme="https://www.hqxdb.com/tags/E-JSON/"/>
    
      <category term="E-JSON编码规范" scheme="https://www.hqxdb.com/tags/E-JSON%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>项目目录结构规范</title>
    <link href="https://www.hqxdb.com/2017/08/23/JS%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83/directory/"/>
    <id>https://www.hqxdb.com/2017/08/23/JS书写规范/directory/</id>
    <published>2017-08-23T14:06:46.000Z</published>
    <updated>2017-08-27T02:51:33.925Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>该文档主要的设计目标是项目开发的目录结构保持一致，使容易理解并方便构建与管理。<br><a id="more"></a> </p>
<h3 id="编撰"><a href="#编撰" class="headerlink" title="编撰"></a>编撰</h3><p>李玉北、erik、黄后锦、王杨、张立理、赵雷、陈新乐、刘恺华。</p>
<p>本文档由<code>商业运营体系前端技术组</code>审校发布。</p>
<h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>在本文档中，使用的关键字会以中文+括号包含的关键字英文表示：必须(MUST)。关键字”MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL”被定义在rfc2119中。</p>
<h3 id="规范说明约定"><a href="#规范说明约定" class="headerlink" title="规范说明约定"></a>规范说明约定</h3><p>以下规范文档中：</p>
<ol>
<li><code>项目</code>包含但不限于<code>业务项目</code>和<code>包项目</code>。</li>
<li><code>${root}</code>表示<code>项目</code>的根目录。</li>
</ol>
<p><a name="restype"></a></p>
<h2 id="资源分类"><a href="#资源分类" class="headerlink" title="资源分类"></a>资源分类</h2><p><code>资源</code>分成两大类：</p>
<ol>
<li><code>源代码资源</code>：指开发者编写的源代码，包括<code>js</code>、<code>html</code>、<code>css</code>、<code>template</code>等。</li>
<li><code>内容资源</code>：指希望做为内容提供给访问者的资源，包括<code>图片</code>、<code>字体</code>、<code>flash</code>、<code>pdf</code>等。</li>
</ol>
<!-- more --> 
<h2 id="目录命名原则"><a href="#目录命名原则" class="headerlink" title="目录命名原则"></a>目录命名原则</h2><ol>
<li>简洁。有习惯性缩写的单词 <em>必须(MUST)</em> 采用容易理解的缩写。如：源代码目录使用<code>src</code>，不使用<code>source</code>。下面是更多例子：<ol>
<li><code>img</code>: 图片。 <em>不允许(MUST NOT)</em> 使用<code>image</code>、<code>images</code>、<code>imgs</code>等。</li>
<li><code>js</code>: javascript脚本。 <em>不允许(MUST NOT)</em> 使用<code>script</code>、<code>scripts</code>等。</li>
<li><code>css</code>: 样式表。 <em>不允许(MUST NOT)</em> 使用<code>style</code>、<code>styles</code>等。</li>
<li><code>swf</code>: flash。 <em>不允许(MUST NOT)</em> 使用<code>flash</code>等。</li>
<li><code>src</code>: 源文件目录。 <em>不允许(MUST NOT)</em> 使用<code>source</code>等。</li>
<li><code>dep</code>: 引入的第三方依赖包目录。 <em>不允许(MUST NOT)</em> 使用<code>lib</code>、<code>library</code>、<code>dependency</code>等。</li>
</ol>
</li>
<li><em>不允许(MUST NOT)</em> 使用复数形式。如：<code>imgs</code>、<code>docs</code>是不被允许的。</li>
</ol>
<h2 id="目录划分"><a href="#目录划分" class="headerlink" title="目录划分"></a>目录划分</h2><p><a name="root"></a></p>
<h3 id="root-目录结构划分"><a href="#root-目录结构划分" class="headerlink" title="${root}目录结构划分"></a>${root}目录结构划分</h3><p>在${root}下，目录结构 <em>必须(MUST)</em> 按照<code>职能</code>进行划分， <em>不允许(MUST NOT)</em> 将<code>资源类型</code>或<code>业务逻辑</code>划分的目录直接置于${root}下。</p>
<p>常用的目录有<code>src</code>、<code>doc</code>、<code>dep</code>、<code>test</code>等。详细请参考<a href="#level1">一级目录详细说明</a></p>
<pre><code>${root}/
    src/
    test/
    doc/
    dep/
    ...
</code></pre><h3 id="业务项目目录结构划分"><a href="#业务项目目录结构划分" class="headerlink" title="业务项目目录结构划分"></a>业务项目目录结构划分</h3><p><code>业务项目</code>的${root}目录结构划分遵循<a href="#root">${root}目录结构划分</a>。</p>
<h4 id="项目代号"><a href="#项目代号" class="headerlink" title="项目代号"></a>项目代号</h4><p>业务项目 <em>可以(SHOULD)</em> 为项目起一个代号名称。代号名称 <em>必须(MUST)</em> 为一个单词，不宜过长。例：北斗的项目代号为<code>triones</code>，哥伦布的项目代号为<code>clb</code>，百度锦囊的项目代号为<code>jn</code>。项目代号有利于区分不同项目，为未来项目之间的重用留下扩展的后路。</p>
<p>在项目开发时，通常会使用如下<a href="module.md#config">加载器配置</a>，将项目代号指向<code>src</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    baseUrl: <span class="string">'$&#123;docroot&#125;'</span>,</div><div class="line">    paths: &#123;</div><div class="line">        <span class="string">'triones'</span>: <span class="string">'src'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="根据业务逻辑划分src目录结构"><a href="#根据业务逻辑划分src目录结构" class="headerlink" title="根据业务逻辑划分src目录结构"></a>根据业务逻辑划分src目录结构</h4><p><code>业务项目</code>的<code>src</code>目录内，绝大多数情况 <em>应当(SHOULD)</em> 根据<code>业务逻辑</code>划分目录结构。划分出的子目录（比如<a href="#bizdirexample">例子</a>中的<code>biz1</code>）我们称为<code>业务目录</code>。</p>
<p><code>src</code>下 <em>必须(MUST)</em> 只包含<code>业务目录</code>与<code>common</code>目录。<code>业务公共资源</code> <em>必须(MUST)</em> 命名为<code>common</code>。<code>common</code>目录做为<code>业务公共资源</code>的目录，也视如<code>业务目录</code>。</p>
<pre><code>${root}/
    src/
        common/
        biz1/
            subbiz1/
            subbiz2/
        biz2/
</code></pre><p>较小规模的<code>业务项目</code>（如投放端），<code>src</code>目录允许视如<code>业务目录</code>，直接按照<a href="#bizdirprinciple">业务目录划分原则</a>划分目录结构。</p>
<pre><code>${root}/
    src/
        foo.js
</code></pre><p><a name="bizdirprinciple"></a></p>
<h4 id="业务目录划分原则"><a href="#业务目录划分原则" class="headerlink" title="业务目录划分原则"></a>业务目录划分原则</h4><ol>
<li><code>JS资源</code> <em>不允许(MUST NOT)</em> 按<code>资源类型</code>划分目录， <em>必须(MUST)</em> 按<code>业务逻辑</code>划分目录。<code>JS资源</code>应直接置于<code>业务目录</code>下。即：<code>业务目录</code>下不允许出现<code>js</code>目录。</li>
<li>除<code>JS资源</code>外的<code>源文件资源</code>，当资源数量较多时，为方便管理， <em>允许(SHOULD)</em> 按<code>资源类型</code>划分目录。即：<code>业务目录</code>下允许出现<code>css</code>、<code>tpl</code>目录。</li>
<li><code>内容资源</code> <em>允许(SHOULD)</em> 按<code>资源类型</code>划分目录。即：<code>业务目录</code>下允许出现<code>img</code>、<code>swf</code>、<code>font</code>目录。</li>
<li><code>业务目录</code>中，如果文件太多不好管理，需要划分子目录时，也 <em>必须(MUST)</em> 继续遵守根据<code>业务逻辑</code>划分的原则，划分子业务。如：下面例子中的<code>subbiz1</code>。</li>
</ol>
<p>通常，对于一个<code>业务目录</code>， <em>鼓励(SHOULD)</em> 将业务相关的<code>源文件资源</code>都直接置于<code>业务目录</code>下。</p>
<pre><code>biz1/
    img/
        add_button.png
    add.js
    add.tpl.html
    add.css
</code></pre><p><code>业务目录</code>下<code>源文件资源</code>数量较多时，我们第一直觉应该是：是否业务划分不够细？是否应该划分子业务，建立子业务目录？</p>
<pre><code>biz2/
    subbiz1/
        list.js
        list.tpl.html
        list.css
    subbiz2/
</code></pre><p>遇到确实是一个业务整体，无法划分子业务时， <em>允许(MAY)</em> 将非<code>JS资源</code>按<code>资源类型</code>划分目录进行管理。</p>
<pre><code>biz1/
    css/
        add.css
        edit.css
        remove.css
        img/
            add_button.png
    tpl/
        add.html
        edit.html
        remove.html
    add.js
    edit.js
    remove.js
</code></pre><p><code>源文件资源</code>和<code>内容资源</code>请参考<a href="#restype">资源分类</a>章节，常用<code>资源目录</code>请参考<a href="#resdir">资源目录</a>章节，常用<code>业务目录</code>请参考<a href="#bizdir">业务目录</a>章节。</p>
<p><a name="bizdirexample"></a></p>
<h4 id="业务项目目录划分示例"><a href="#业务项目目录划分示例" class="headerlink" title="业务项目目录划分示例"></a>业务项目目录划分示例</h4><pre><code>${root}/
    src/
        common/
            img/
                sprites.png
                logo.png
            conf.js
            layout.css
        biz1/
            img/
                add_button.png
            add.js
            add.tpl.html
            add.less
        biz2/
            subbiz1/
                list.js
                list.tpl.html
                list.css
            subbiz2/
    dep/
        er/
            src/
            test/
        esui/
            src/
            test/
    test/
    doc/
    index.html
    main.html
    ......
</code></pre><p><a name="packagedir"></a></p>
<h3 id="包项目目录结构划分"><a href="#包项目目录结构划分" class="headerlink" title="包项目目录结构划分"></a>包项目目录结构划分</h3><p><code>包项目</code>的${root}目录结构划分遵循<a href="#root">${root}目录结构划分</a>。</p>
<p><a name="packagesrc"></a></p>
<h4 id="包项目src目录结构划分"><a href="#包项目src目录结构划分" class="headerlink" title="包项目src目录结构划分"></a>包项目src目录结构划分</h4><p><code>包</code>是实现某个独立功能，有复用价值的代码集。按照通常的理解，一个<code>包项目</code>不应该特别复杂。</p>
<p>所以，<code>包</code>可视如一个不太复杂的<code>业务</code>，其<code>src</code>下的划分原则与<code>业务项目</code>的<a href="#bizdirprinciple">业务目录划分原则</a>保持一致。</p>
<pre><code>${root}/
    src/
        css/
            img/
                sprites.png
            table.css
            button.css
            select.css
        main.js
        Control.js
        InputControl.js
        Button.js
        Table.js
        Select.js
    test/
    doc/
    package.json
    ...
</code></pre><h2 id="常用目录"><a href="#常用目录" class="headerlink" title="常用目录"></a>常用目录</h2><p><a name="level1"></a></p>
<h3 id="一级目录"><a href="#一级目录" class="headerlink" title="一级目录"></a>一级目录</h3><p>直接置于<code>${root}</code>下的目录称作<code>一级目录</code>。一级目录 <em>必须(MUST)</em> 具有某种<code>职能</code>属性。</p>
<p>除了下面列举的一些常见目录之外，<code>${root}</code>下面也可以放置一些跟项目发布相关的文件，例如<code>build.sh</code>，<code>build.xml</code>，<code>Makefile</code>，<code>Gruntfile</code>等等.</p>
<h4 id="src"><a href="#src" class="headerlink" title="src"></a>src</h4><p><code>src</code>目录用于存放开发时源文件，发布时 <em>必须(MUST)</em> 被删除。</p>
<h4 id="dep"><a href="#dep" class="headerlink" title="dep"></a>dep</h4><p><code>dep</code>目录用于存放<code>项目</code>引入依赖的第三方包。该目录下的内容通过平台工具管理，项目开发人员 <em>不允许(MUST NOT)</em> 更改<code>dep</code>目录下第三方包的任何内容。</p>
<p>当项目需要修改引入的第三方代码时，第三方包应将源码直接置于<code>${root}/src</code>目录下，规则见该目录下的规定。</p>
<p>更多关于<code>包</code>的内容请参考 <a href="package.md">包结构规范</a></p>
<h4 id="tool"><a href="#tool" class="headerlink" title="tool"></a>tool</h4><p><code>tool</code>目录用于存放开发时或构建阶段使用的工具。该目录在发布时 <em>必须(MUST)</em> 被删除。</p>
<h4 id="test"><a href="#test" class="headerlink" title="test"></a>test</h4><p><code>test</code>目录用于存放测试用例以及开发阶段的模拟数据。该目录在发布时 <em>必须(MUST)</em> 被删除。</p>
<h4 id="doc"><a href="#doc" class="headerlink" title="doc"></a>doc</h4><p><code>doc</code>目录用于存放项目文档。项目文档可能是开发者维护的文档，也可能是通过工具生成的文档。</p>
<h4 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h4><p><code>entry</code>目录用于存放项目的<code>页面入口文件</code>，通常是上线后可被直接访问的静态页面。</p>
<p><code>RIA项目</code>通常会包含较少的<code>页面入口文件</code>，常见的是<code>main.html</code>，这些文件 <em>可以(SHOULD)</em> 直接放在<code>${root}</code>目录下。</p>
<pre><code>${root}/
    src/
        common/
            conf.js
        card/
        gold/
        message/
    index.html
    main.html
    ......
</code></pre><p><code>多页面项目</code>通常<code>页面入口文件</code>较多， <em>可以(SHOULD)</em> 统一放在<code>entry</code>目录中，按<code>业务逻辑</code>命名。</p>
<pre><code>${root}/
    src/
        common/
            conf.js
        card/
        gold/
        message/
    entry/
        card.html
        gold.html
        message.html
        ......
</code></pre><p>项目在发布的时候，构建工具可以<code>页面入口文件</code>为入口进行分析和编译。</p>
<p><code>RIA项目</code>经过构建工具编译后，目录结构可能如下：</p>
<pre><code>output/
    asset/
        js/
        css/
        tpl/
        img/
    index.html
    main.html
</code></pre><p><code>多页面项目</code>经过构建工具编译后，目录结构可能如下：</p>
<pre><code>output/
    card/
        asset/
            js/
            css/
            img/
        index.html
    gold/
        asset/
            js/
            css/
            img/
        index.html
</code></pre><h4 id="asset"><a href="#asset" class="headerlink" title="asset"></a>asset</h4><p><code>asset</code>目录用于存放用于<code>线上访问</code>的静态资源。</p>
<p>通常构建工具会对<code>src</code>目录和<code>dep</code>目录下的资源进行分析、合并与压缩等，生成到<code>asset</code>目录下。所以该目录尽量避免手工管理。下面是一个构建工具生成后的<code>asset</code>目录示例：</p>
<pre><code>${root}/
    asset/
        js/
            loader.js
            build.js
        css/
            common.css
            img/
        tpl/
            build.tpl.html
        img/
        ...
</code></pre><p><a name="resdir"></a></p>
<h3 id="资源目录"><a href="#资源目录" class="headerlink" title="资源目录"></a>资源目录</h3><p>按<code>资源</code>类型命名的目录称作<code>资源目录</code>。<code>资源目录</code> <em>不允许(MUST NOT)</em> 直接置于${root}下。</p>
<h4 id="js"><a href="#js" class="headerlink" title="js"></a>js</h4><p><code>js</code>目录可用于存放<code>js</code>资源文件（包含可编译成<code>js</code>的<code>coffeescript</code>等语言）。<code>js</code>文件后缀名 <em>必须(MUST)</em> 为.js，<code>coffeescript文件</code>后缀名 <em>必须(MUST)</em> 为.coffee。</p>
<p><code>js</code>目录内 <em>必须(MUST)</em> 存放<code>js</code>资源文件，但<code>js</code>资源文件不一定（MAY NOT）存放于<code>js</code>目录下：</p>
<ol>
<li>对于<code>src</code>目录，<code>js</code>资源文件 <em>不允许(MUST NOT)</em> 存放于<code>js</code>目录下。</li>
<li>对于<code>asset</code>目录，<code>js</code>资源文件 <em>可以(SHOULD)</em> 存放于<code>js</code>目录下，视构建行为决定。</li>
<li>对于其他<code>一级目录</code>内，<code>js</code>资源文件 <em>可以(SHOULD)</em> 不存放于<code>js</code>目录下。</li>
</ol>
<h4 id="css"><a href="#css" class="headerlink" title="css"></a>css</h4><p><code>css</code>目录可用于存放<code>css资源文件</code>（包含<code>less</code>，<code>sass</code>等动态样式表语言）。<code>css</code>文件后缀名 <em>必须(MUST)</em> 为.css，<code>less</code>文件后缀名 <em>必须(MUST)</em> 为<code>.less</code>。</p>
<p><code>css</code>目录内 <em>必须(MUST)</em> 存放<code>css</code>资源文件，但<code>css</code>资源文件不一定（MAY NOT）存放于<code>css</code>目录下：</p>
<ol>
<li>对于<code>src</code>目录，<code>css</code>资源文件 <em>可以(SHOULD)</em> 存放于<code>业务目录</code>下，也 <em>可以(SHOULD)</em> 存放于<code>css</code>目录下。</li>
<li>对于<code>asset</code>目录，<code>css</code>资源文件 <em>可以(SHOULD)</em> 存放于<code>css</code>目录下，视构建行为决定。</li>
<li>对于其他<code>一级目录</code>内，<code>css</code>资源文件 <em>可以(SHOULD)</em> 不存放于<code>css</code>目录下。</li>
</ol>
<p>关于css引用图片的位置说明，请参考<a href="#imgdir">img</a>章节。</p>
<p><a name="imgdir"></a></p>
<h4 id="img"><a href="#img" class="headerlink" title="img"></a>img</h4><p><code>img</code>目录可用于存放<code>图片资源文件</code>。包括<code>页面直接引用</code>的图片与<code>css引用</code>图片。常见的图片资源有<code>gif/jpg/png/svg/bmp</code>等。</p>
<p>对于<code>css</code>引用的图片， <em>必须(MUST)</em> 放在<code>./img</code>目录下，<code>.</code>代表当前<code>css</code>资源所在的目录。</p>
<p>对于<code>页面直接引用</code>的图片：</p>
<ol>
<li>被多页面引用的图片 <em>应该(SHOULD)</em> 放在<code>${root}/src/common/img</code>目录下。</li>
<li>单一页面引用的图片 <em>应该(SHOULD)</em> 放在<code>./img</code>目录下，<code>.</code>代表当前页面所在的目录。</li>
</ol>
<h4 id="tpl"><a href="#tpl" class="headerlink" title="tpl"></a>tpl</h4><p><code>tpl</code>目录可用于存放<code>template</code>资源文件。<code>template</code>资源文件后缀名 <em>可以(SHOULD)</em> 为<code>.html</code>或<code>.tpl</code>。</p>
<p>通常，对于<code>RIA</code>系统，<code>template</code>资源文件采用<code>.html</code>后缀使其能够被<code>xhr</code>加载。</p>
<h4 id="font"><a href="#font" class="headerlink" title="font"></a>font</h4><p><code>font</code>目录可用于存放字体资源文件。常见的字体资源有<code>tff/woff/svg</code>等。</p>
<h4 id="swf"><a href="#swf" class="headerlink" title="swf"></a>swf</h4><p><code>swf</code>目录可用于存放<code>flash</code>资源文件。<code>flash</code>资源文件 <em>不允许(MUST NOT)</em> 置于<code>img</code>目录中。</p>
<p><a name="bizdir"></a></p>
<h3 id="业务目录"><a href="#业务目录" class="headerlink" title="业务目录"></a>业务目录</h3><p><a name="commondir"></a></p>
<h4 id="common"><a href="#common" class="headerlink" title="common"></a>common</h4><p><code>common</code>目录为业务公共目录，用于存放业务项目的业务公共文件。所以，根据<code>业务逻辑</code>划分目录结构时，业务逻辑命名 <em>不允许(MUST NOT)</em> 为<code>common</code>。</p>
<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="为啥biz下面没资源类型目录了？"><a href="#为啥biz下面没资源类型目录了？" class="headerlink" title="为啥biz下面没资源类型目录了？"></a>为啥biz下面没资源类型目录了？</h3><p>如果在<code>biz</code>下继续划分<code>资源目录</code>，代码的结构可能就是这样子了：</p>
<pre><code>${root}/
    src/
        biz1/
            js/
                list.js
</code></pre><p>当我们需要使用<code>list.js</code>的时候，必须写如下的代码：<code>require(&quot;../biz1/js/list&quot;)</code>，但是从逻辑上说，更合理的写法应该是<code>require(&quot;../biz1/list&quot;)</code>。因此我们不推荐在<code>biz</code>下面对源代码资源划分目录。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;该文档主要的设计目标是项目开发的目录结构保持一致，使容易理解并方便构建与管理。&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://www.hqxdb.com/categories/javascript/"/>
    
      <category term="规范" scheme="https://www.hqxdb.com/categories/javascript/%E8%A7%84%E8%8C%83/"/>
    
    
      <category term="项目目录结构规范" scheme="https://www.hqxdb.com/tags/%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>HTML编码规范</title>
    <link href="https://www.hqxdb.com/2017/08/23/JS%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83/html-style-guide/"/>
    <id>https://www.hqxdb.com/2017/08/23/JS书写规范/html-style-guide/</id>
    <published>2017-08-23T14:06:46.000Z</published>
    <updated>2017-08-27T02:51:49.218Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h2><p>HTML 作为描述网页结构的超文本标记语言，在百度一直有着广泛的应用。本文档的目标是使 HTML 代码风格保持一致，容易被理解和被维护。</p>
<a id="more"></a> 
<h2 id="2-代码风格"><a href="#2-代码风格" class="headerlink" title="2 代码风格"></a>2 代码风格</h2><h3 id="2-1-缩进与换行"><a href="#2-1-缩进与换行" class="headerlink" title="2.1 缩进与换行"></a>2.1 缩进与换行</h3><h4 id="强制-使用-4-个空格做为一个缩进层级，不允许使用-2-个空格-或-tab-字符。"><a href="#强制-使用-4-个空格做为一个缩进层级，不允许使用-2-个空格-或-tab-字符。" class="headerlink" title="[强制] 使用 4 个空格做为一个缩进层级，不允许使用 2 个空格 或 tab 字符。"></a>[强制] 使用 <code>4</code> 个空格做为一个缩进层级，不允许使用 <code>2</code> 个空格 或 <code>tab</code> 字符。</h4><p>解释：<br>对于非 HTML 标签之间的缩进，比如 script 或 style 标签内容缩进，与 script 或 style 标签的缩进同级。</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css"><span class="comment">/* 样式内容的第一级缩进与所属的 style 标签对齐 */</span></span></div><div class="line"><span class="undefined">ul &#123;</span></div><div class="line"><span class="undefined">    padding: 0;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>first<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>second<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="comment">// 脚本代码的第一级缩进与所属的 script 标签对齐</span></span></div><div class="line"><span class="javascript"><span class="built_in">require</span>([<span class="string">'app'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;</span></div><div class="line"><span class="undefined">    app.init();</span></div><div class="line"><span class="undefined">&#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="建议-每行不得超过-120-个字符。"><a href="#建议-每行不得超过-120-个字符。" class="headerlink" title="[建议] 每行不得超过 120 个字符。"></a>[建议] 每行不得超过 <code>120</code> 个字符。</h4><p>解释：</p>
<p>过长的代码不容易阅读与维护。但是考虑到 HTML 的特殊性，不做硬性要求。</p>
<h3 id="2-2-命名"><a href="#2-2-命名" class="headerlink" title="2.2 命名"></a>2.2 命名</h3><h4 id="强制-class-必须单词全字母小写，单词间以-分隔。"><a href="#强制-class-必须单词全字母小写，单词间以-分隔。" class="headerlink" title="[强制] class 必须单词全字母小写，单词间以 - 分隔。"></a>[强制] <code>class</code> 必须单词全字母小写，单词间以 <code>-</code> 分隔。</h4><h4 id="强制-class-必须代表相应模块或部件的内容或功能，不得以样式信息进行命名。"><a href="#强制-class-必须代表相应模块或部件的内容或功能，不得以样式信息进行命名。" class="headerlink" title="[强制] class 必须代表相应模块或部件的内容或功能，不得以样式信息进行命名。"></a>[强制] <code>class</code> 必须代表相应模块或部件的内容或功能，不得以样式信息进行命名。</h4><p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- good --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidebar"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- bad --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="强制-元素-id-必须保证页面唯一。"><a href="#强制-元素-id-必须保证页面唯一。" class="headerlink" title="[强制] 元素 id 必须保证页面唯一。"></a>[强制] 元素 <code>id</code> 必须保证页面唯一。</h4><p>解释：</p>
<p>同一个页面中，不同的元素包含相同的 <code>id</code>，不符合 <code>id</code> 的属性含义。并且使用 <code>document.getElementById</code> 时可能导致难以追查的问题。</p>
<h4 id="建议-id-建议单词全字母小写，单词间以-分隔。同项目必须保持风格一致。"><a href="#建议-id-建议单词全字母小写，单词间以-分隔。同项目必须保持风格一致。" class="headerlink" title="[建议] id 建议单词全字母小写，单词间以 - 分隔。同项目必须保持风格一致。"></a>[建议] <code>id</code> 建议单词全字母小写，单词间以 <code>-</code> 分隔。同项目必须保持风格一致。</h4><h4 id="建议-id、class-命名，在避免冲突并描述清楚的前提下尽可能短。"><a href="#建议-id、class-命名，在避免冲突并描述清楚的前提下尽可能短。" class="headerlink" title="[建议] id、class 命名，在避免冲突并描述清楚的前提下尽可能短。"></a>[建议] <code>id</code>、<code>class</code> 命名，在避免冲突并描述清楚的前提下尽可能短。</h4><p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- good --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"nav"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- bad --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"navigation"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- good --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"comment"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- bad --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"com"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- good --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"author"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- bad --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="强制-禁止为了-hook-脚本，创建无样式信息的-class。"><a href="#强制-禁止为了-hook-脚本，创建无样式信息的-class。" class="headerlink" title="[强制] 禁止为了 hook 脚本，创建无样式信息的 class。"></a>[强制] 禁止为了 <code>hook 脚本</code>，创建无样式信息的 <code>class</code>。</h4><p>解释：</p>
<p>不允许 <code>class</code> 只用于让 JavaScript 选择某些元素，<code>class</code> 应该具有明确的语义和样式。否则容易导致 CSS class 泛滥。</p>
<p>使用 <code>id</code>、属性选择作为 hook 是更好的方式。</p>
<h4 id="强制-同一页面，应避免使用相同的-name-与-id。"><a href="#强制-同一页面，应避免使用相同的-name-与-id。" class="headerlink" title="[强制] 同一页面，应避免使用相同的 name 与 id。"></a>[强制] 同一页面，应避免使用相同的 <code>name</code> 与 <code>id</code>。</h4><p>解释：</p>
<p>IE 浏览器会混淆元素的 <code>id</code> 和 <code>name</code> 属性， <code>document.getElementById</code> 可能获得不期望的元素。所以在对元素的 <code>id</code> 与 <code>name</code> 属性的命名需要非常小心。</p>
<p>一个比较好的实践是，为 <code>id</code> 和 <code>name</code> 使用不同的命名法。</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"foo"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"foo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="comment">// IE6 将显示 INPUT</span></span></div><div class="line"><span class="javascript">alert(<span class="built_in">document</span>.getElementById(<span class="string">'foo'</span>).tagName);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">`</div></pre></td></tr></table></figure>
<h3 id="2-3-标签"><a href="#2-3-标签" class="headerlink" title="2.3 标签"></a>2.3 标签</h3><h4 id="强制-标签名必须使用小写字母。"><a href="#强制-标签名必须使用小写字母。" class="headerlink" title="[强制] 标签名必须使用小写字母。"></a>[强制] 标签名必须使用小写字母。</h4><p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- good --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello StyleGuide!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- bad --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">P</span>&gt;</span>Hello StyleGuide!<span class="tag">&lt;/<span class="name">P</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="强制-对于无需自闭合的标签，不允许自闭合。"><a href="#强制-对于无需自闭合的标签，不允许自闭合。" class="headerlink" title="[强制] 对于无需自闭合的标签，不允许自闭合。"></a>[强制] 对于无需自闭合的标签，不允许自闭合。</h4><p>解释：</p>
<p>常见无需自闭合标签有 <code>input</code>、<code>br</code>、<code>img</code>、<code>hr</code> 等。</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- good --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- bad --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h4 id="强制-对-HTML5-中规定允许省略的闭合标签，不允许省略闭合标签。"><a href="#强制-对-HTML5-中规定允许省略的闭合标签，不允许省略闭合标签。" class="headerlink" title="[强制] 对 HTML5 中规定允许省略的闭合标签，不允许省略闭合标签。"></a>[强制] 对 <code>HTML5</code> 中规定允许省略的闭合标签，不允许省略闭合标签。</h4><p>解释：</p>
<p>对代码体积要求非常严苛的场景，可以例外。比如：第三方页面使用的投放系统。</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- good --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>first<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>second<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- bad --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>first</div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>second</div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="强制-标签使用必须符合标签嵌套规则。"><a href="#强制-标签使用必须符合标签嵌套规则。" class="headerlink" title="[强制] 标签使用必须符合标签嵌套规则。"></a>[强制] 标签使用必须符合标签嵌套规则。</h4><p>解释：</p>
<p>比如 <code>div</code> 不得置于 <code>p</code> 中，<code>tbody</code> 必须置于 <code>table</code> 中。</p>
<p>详细的标签嵌套规则参见<a href="http://www.cs.tut.fi/~jkorpela/html5.dtd" target="_blank" rel="external">HTML DTD</a>中的 <code>Elements</code> 定义部分。</p>
<h4 id="建议-HTML-标签的使用应该遵循标签的语义。"><a href="#建议-HTML-标签的使用应该遵循标签的语义。" class="headerlink" title="[建议] HTML 标签的使用应该遵循标签的语义。"></a>[建议] HTML 标签的使用应该遵循标签的语义。</h4><p>解释：</p>
<p>下面是常见标签语义</p>
<ul>
<li>p - 段落</li>
<li>h1,h2,h3,h4,h5,h6 - 层级标题</li>
<li>strong,em - 强调</li>
<li>ins - 插入</li>
<li>del - 删除</li>
<li>abbr - 缩写</li>
<li>code - 代码标识</li>
<li>cite - 引述来源作品的标题</li>
<li>q - 引用</li>
<li>blockquote - 一段或长篇引用</li>
<li>ul - 无序列表</li>
<li>ol - 有序列表</li>
<li>dl,dt,dd - 定义列表</li>
</ul>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- good --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Esprima serves as an important <span class="tag">&lt;<span class="name">strong</span>&gt;</span>building block<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> for some JavaScript language tools.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- bad --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Esprima serves as an important <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"strong"</span>&gt;</span>building block<span class="tag">&lt;/<span class="name">span</span>&gt;</span> for some JavaScript language tools.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="建议-在-CSS-可以实现相同需求的情况下不得使用表格进行布局。"><a href="#建议-在-CSS-可以实现相同需求的情况下不得使用表格进行布局。" class="headerlink" title="[建议] 在 CSS 可以实现相同需求的情况下不得使用表格进行布局。"></a>[建议] 在 CSS 可以实现相同需求的情况下不得使用表格进行布局。</h4><p>解释：</p>
<p>在兼容性允许的情况下应尽量保持语义正确性。对网格对齐和拉伸性有严格要求的场景允许例外，如多列复杂表单。</p>
<h4 id="建议-标签的使用应尽量简洁，减少不必要的标签。"><a href="#建议-标签的使用应尽量简洁，减少不必要的标签。" class="headerlink" title="[建议] 标签的使用应尽量简洁，减少不必要的标签。"></a>[建议] 标签的使用应尽量简洁，减少不必要的标签。</h4><p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- good --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"avatar"</span> <span class="attr">src</span>=<span class="string">"image.png"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- bad --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"avatar"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"image.png"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="2-4-属性"><a href="#2-4-属性" class="headerlink" title="2.4 属性"></a>2.4 属性</h3><h4 id="强制-属性名必须使用小写字母。"><a href="#强制-属性名必须使用小写字母。" class="headerlink" title="[强制] 属性名必须使用小写字母。"></a>[强制] 属性名必须使用小写字母。</h4><p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- good --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- bad --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">cellSpacing</span>=<span class="string">"0"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="强制-属性值必须用双引号包围。"><a href="#强制-属性值必须用双引号包围。" class="headerlink" title="[强制] 属性值必须用双引号包围。"></a>[强制] 属性值必须用双引号包围。</h4><p>解释：</p>
<p>不允许使用单引号，不允许不使用引号。</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- good --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"esl.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- bad --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'esl.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">esl.js</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="建议-布尔类型的属性，建议不添加属性值。"><a href="#建议-布尔类型的属性，建议不添加属性值。" class="headerlink" title="[建议] 布尔类型的属性，建议不添加属性值。"></a>[建议] 布尔类型的属性，建议不添加属性值。</h4><p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">disabled</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">checked</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="建议-自定义属性建议以-xxx-为前缀，推荐使用-data-。"><a href="#建议-自定义属性建议以-xxx-为前缀，推荐使用-data-。" class="headerlink" title="[建议] 自定义属性建议以 xxx- 为前缀，推荐使用 data-。"></a>[建议] 自定义属性建议以 <code>xxx-</code> 为前缀，推荐使用 <code>data-</code>。</h4><p>解释：</p>
<p>使用前缀有助于区分自定义属性和标准定义的属性。</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">data-ui-type</span>=<span class="string">"Select"</span>&gt;</span><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="3-通用"><a href="#3-通用" class="headerlink" title="3 通用"></a>3 通用</h2><h3 id="3-1-DOCTYPE"><a href="#3-1-DOCTYPE" class="headerlink" title="3.1 DOCTYPE"></a>3.1 DOCTYPE</h3><h4 id="强制-使用-HTML5-的-doctype-来启用标准模式，建议使用大写的-DOCTYPE。"><a href="#强制-使用-HTML5-的-doctype-来启用标准模式，建议使用大写的-DOCTYPE。" class="headerlink" title="[强制] 使用 HTML5 的 doctype 来启用标准模式，建议使用大写的 DOCTYPE。"></a>[强制] 使用 <code>HTML5</code> 的 <code>doctype</code> 来启用标准模式，建议使用大写的 <code>DOCTYPE</code>。</h4><p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div></pre></td></tr></table></figure>
<h4 id="建议-启用-IE-Edge-模式。"><a href="#建议-启用-IE-Edge-模式。" class="headerlink" title="[建议] 启用 IE Edge 模式。"></a>[建议] 启用 IE Edge 模式。</h4><p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=Edge"</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="建议-在-html-标签上设置正确的-lang-属性。"><a href="#建议-在-html-标签上设置正确的-lang-属性。" class="headerlink" title="[建议] 在 html 标签上设置正确的 lang 属性。"></a>[建议] 在 <code>html</code> 标签上设置正确的 <code>lang</code> 属性。</h4><p>解释：</p>
<p>有助于提高页面的可访问性，如：让语音合成工具确定其所应该采用的发音，令翻译工具确定其翻译语言等。</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="3-2-编码"><a href="#3-2-编码" class="headerlink" title="3.2 编码"></a>3.2 编码</h3><h4 id="强制-页面必须使用精简形式，明确指定字符编码。指定字符编码的-meta-必须是-head-的第一个直接子元素。"><a href="#强制-页面必须使用精简形式，明确指定字符编码。指定字符编码的-meta-必须是-head-的第一个直接子元素。" class="headerlink" title="[强制] 页面必须使用精简形式，明确指定字符编码。指定字符编码的 meta 必须是 head 的第一个直接子元素。"></a>[强制] 页面必须使用精简形式，明确指定字符编码。指定字符编码的 <code>meta</code> 必须是 <code>head</code> 的第一个直接子元素。</h4><p>解释：</p>
<p>见 <a href="http://www.qianduan.net/html5-charset-can-it.html" target="_blank" rel="external">HTML5 Charset能用吗</a> 一文。</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        ......</div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        ......</div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="建议-HTML-文件使用无-BOM-的-UTF-8-编码。"><a href="#建议-HTML-文件使用无-BOM-的-UTF-8-编码。" class="headerlink" title="[建议] HTML 文件使用无 BOM 的 UTF-8 编码。"></a>[建议] <code>HTML</code> 文件使用无 <code>BOM</code> 的 <code>UTF-8</code> 编码。</h4><p>解释：</p>
<p><code>UTF-8</code> 编码具有更广泛的适应性。<code>BOM</code> 在使用程序或工具处理文件时可能造成不必要的干扰。</p>
<h3 id="3-3-CSS-和-JavaScript-引入"><a href="#3-3-CSS-和-JavaScript-引入" class="headerlink" title="3.3 CSS 和 JavaScript 引入"></a>3.3 CSS 和 JavaScript 引入</h3><h4 id="强制-引入-CSS-时必须指明-rel-quot-stylesheet-quot-。"><a href="#强制-引入-CSS-时必须指明-rel-quot-stylesheet-quot-。" class="headerlink" title="[强制] 引入 CSS 时必须指明 rel=&quot;stylesheet&quot;。"></a>[强制] 引入 <code>CSS</code> 时必须指明 <code>rel=&quot;stylesheet&quot;</code>。</h4><p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"page.css"</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="建议-引入-CSS-和-JavaScript-时无须指明-type-属性。"><a href="#建议-引入-CSS-和-JavaScript-时无须指明-type-属性。" class="headerlink" title="[建议] 引入 CSS 和 JavaScript 时无须指明 type 属性。"></a>[建议] 引入 <code>CSS</code> 和 <code>JavaScript</code> 时无须指明 <code>type</code> 属性。</h4><p>解释：</p>
<p><code>text/css</code> 和 <code>text/javascript</code> 是 <code>type</code> 的默认值。</p>
<h4 id="建议-展现定义放置于外部-CSS-中，行为定义放置于外部-JavaScript-中。"><a href="#建议-展现定义放置于外部-CSS-中，行为定义放置于外部-JavaScript-中。" class="headerlink" title="[建议] 展现定义放置于外部 CSS 中，行为定义放置于外部 JavaScript 中。"></a>[建议] 展现定义放置于外部 <code>CSS</code> 中，行为定义放置于外部 <code>JavaScript</code> 中。</h4><p>解释：</p>
<p>结构-样式-行为的代码分离，对于提高代码的可阅读性和维护性都有好处。</p>
<h4 id="建议-在-head-中引入页面需要的所有-CSS-资源。"><a href="#建议-在-head-中引入页面需要的所有-CSS-资源。" class="headerlink" title="[建议] 在 head 中引入页面需要的所有 CSS 资源。"></a>[建议] 在 <code>head</code> 中引入页面需要的所有 <code>CSS</code> 资源。</h4><p>解释：</p>
<p>在页面渲染的过程中，新的CSS可能导致元素的样式重新计算和绘制，页面闪烁。</p>
<h4 id="建议-JavaScript-应当放在页面末尾，或采用异步加载。"><a href="#建议-JavaScript-应当放在页面末尾，或采用异步加载。" class="headerlink" title="[建议] JavaScript 应当放在页面末尾，或采用异步加载。"></a>[建议] <code>JavaScript</code> 应当放在页面末尾，或采用异步加载。</h4><p>解释：</p>
<p>将 <code>script</code> 放在页面中间将阻断页面的渲染。出于性能方面的考虑，如非必要，请遵守此条建议。</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- a lot of elements --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"init-behavior.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="建议-移动环境或只针对现代浏览器设计的-Web-应用，如果引用外部资源的-URL-协议部分与页面相同，建议省略协议前缀。"><a href="#建议-移动环境或只针对现代浏览器设计的-Web-应用，如果引用外部资源的-URL-协议部分与页面相同，建议省略协议前缀。" class="headerlink" title="[建议] 移动环境或只针对现代浏览器设计的 Web 应用，如果引用外部资源的 URL 协议部分与页面相同，建议省略协议前缀。"></a>[建议] 移动环境或只针对现代浏览器设计的 Web 应用，如果引用外部资源的 <code>URL</code> 协议部分与页面相同，建议省略协议前缀。</h4><p>解释：</p>
<p>使用 <code>protocol-relative URL</code> 引入 CSS，在 <code>IE7/8</code> 下，会发两次请求。是否使用 <code>protocol-relative URL</code> 应充分考虑页面针对的环境。</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//s1.bdstatic.com/cache/static/jquery-1.10.2.min_f2fb5194.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="4-head"><a href="#4-head" class="headerlink" title="4 head"></a>4 head</h2><h3 id="4-1-title"><a href="#4-1-title" class="headerlink" title="4.1 title"></a>4.1 title</h3><h4 id="强制-页面必须包含-title-标签声明标题。"><a href="#强制-页面必须包含-title-标签声明标题。" class="headerlink" title="[强制] 页面必须包含 title 标签声明标题。"></a>[强制] 页面必须包含 <code>title</code> 标签声明标题。</h4><h4 id="强制-title-必须作为-head-的直接子元素，并紧随-charset-声明之后。"><a href="#强制-title-必须作为-head-的直接子元素，并紧随-charset-声明之后。" class="headerlink" title="[强制] title 必须作为 head 的直接子元素，并紧随 charset 声明之后。"></a>[强制] <code>title</code> 必须作为 <code>head</code> 的直接子元素，并紧随 <code>charset</code> 声明之后。</h4><p>解释：</p>
<p><code>title</code> 中如果包含 ASCII 之外的字符，浏览器需要知道字符编码类型才能进行解码，否则可能导致乱码。</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>页面标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="4-2-favicon"><a href="#4-2-favicon" class="headerlink" title="4.2 favicon"></a>4.2 favicon</h3><h4 id="强制-保证-favicon-可访问。"><a href="#强制-保证-favicon-可访问。" class="headerlink" title="[强制] 保证 favicon 可访问。"></a>[强制] 保证 <code>favicon</code> 可访问。</h4><p>解释：</p>
<p>在未指定 favicon 时，大多数浏览器会请求 Web Server 根目录下的 <code>favicon.ico</code> 。为了保证 favicon 可访问，避免 404，必须遵循以下两种方法之一：</p>
<ol>
<li>在 Web Server 根目录放置 <code>favicon.ico</code> 文件。</li>
<li>使用 <code>link</code> 指定 favicon。</li>
</ol>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">"path/to/favicon.ico"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="4-3-viewport"><a href="#4-3-viewport" class="headerlink" title="4.3 viewport"></a>4.3 viewport</h3><h4 id="建议-若页面欲对移动设备友好，需指定页面的-viewport。"><a href="#建议-若页面欲对移动设备友好，需指定页面的-viewport。" class="headerlink" title="[建议] 若页面欲对移动设备友好，需指定页面的 viewport。"></a>[建议] 若页面欲对移动设备友好，需指定页面的 <code>viewport</code>。</h4><p>解释：</p>
<p>viewport meta tag 可以设置可视区域的宽度和初始缩放大小，避免在移动设备上出现页面展示不正常。</p>
<p>比如，在页面宽度小于 <code>980px</code> 时，若需 iOS 设备友好，应当设置 viewport 的 <code>width</code> 值来适应你的页面宽度。同时因为不同移动设备分辨率不同，在设置时，应当使用 <code>device-width</code> 和 <code>device-height</code> 变量。</p>
<p>另外，为了使 viewport 正常工作，在页面内容样式布局设计上也要做相应调整，如避免绝对定位等。关于 viewport 的更多介绍，可以参见 <a href="https://developer.apple.com/library/mac/documentation/AppleApplications/Reference/SafariWebContent/UsingtheViewport/UsingtheViewport.html#//apple_ref/doc/uid/TP40006509-SW26" target="_blank" rel="external">Safari Web Content Guide的介绍</a></p>
<h2 id="5-图片"><a href="#5-图片" class="headerlink" title="5 图片"></a>5 图片</h2><h4 id="强制-禁止-img-的-src-取值为空。延迟加载的图片也要增加默认的-src。"><a href="#强制-禁止-img-的-src-取值为空。延迟加载的图片也要增加默认的-src。" class="headerlink" title="[强制] 禁止 img 的 src 取值为空。延迟加载的图片也要增加默认的 src。"></a>[强制] 禁止 <code>img</code> 的 <code>src</code> 取值为空。延迟加载的图片也要增加默认的 <code>src</code>。</h4><p>解释：</p>
<p><code>src</code> 取值为空，会导致部分浏览器重新加载一次当前页面，参考：<a href="https://developer.yahoo.com/performance/rules.html#emptysrc" target="_blank" rel="external">https://developer.yahoo.com/performance/rules.html#emptysrc</a></p>
<h4 id="建议-避免为-img-添加不必要的-title-属性。"><a href="#建议-避免为-img-添加不必要的-title-属性。" class="headerlink" title="[建议] 避免为 img 添加不必要的 title 属性。"></a>[建议] 避免为 <code>img</code> 添加不必要的 <code>title</code> 属性。</h4><p>解释：</p>
<p>多余的 <code>title</code> 影响看图体验，并且增加了页面尺寸。</p>
<h4 id="建议-为重要图片添加-alt-属性。"><a href="#建议-为重要图片添加-alt-属性。" class="headerlink" title="[建议] 为重要图片添加 alt 属性。"></a>[建议] 为重要图片添加 <code>alt</code> 属性。</h4><p>解释：</p>
<p>可以提高图片加载失败时的用户体验。</p>
<h4 id="建议-添加-width-和-height-属性，以避免页面抖动。"><a href="#建议-添加-width-和-height-属性，以避免页面抖动。" class="headerlink" title="[建议] 添加 width 和 height 属性，以避免页面抖动。"></a>[建议] 添加 <code>width</code> 和 <code>height</code> 属性，以避免页面抖动。</h4><h4 id="建议-有下载需求的图片采用-img-标签实现，无下载需求的图片采用-CSS-背景图实现。"><a href="#建议-有下载需求的图片采用-img-标签实现，无下载需求的图片采用-CSS-背景图实现。" class="headerlink" title="[建议] 有下载需求的图片采用 img 标签实现，无下载需求的图片采用 CSS 背景图实现。"></a>[建议] 有下载需求的图片采用 <code>img</code> 标签实现，无下载需求的图片采用 CSS 背景图实现。</h4><p>解释：</p>
<ol>
<li>产品 logo、用户头像、用户产生的图片等有潜在下载需求的图片，以 <code>img</code> 形式实现，能方便用户下载。</li>
<li>无下载需求的图片，比如：icon、背景、代码使用的图片等，尽可能采用 CSS 背景图实现。</li>
</ol>
<h2 id="6-表单"><a href="#6-表单" class="headerlink" title="6 表单"></a>6 表单</h2><h3 id="6-1-控件标题"><a href="#6-1-控件标题" class="headerlink" title="6.1 控件标题"></a>6.1 控件标题</h3><h4 id="强制-有文本标题的控件必须使用-label-标签将其与其标题相关联。"><a href="#强制-有文本标题的控件必须使用-label-标签将其与其标题相关联。" class="headerlink" title="[强制] 有文本标题的控件必须使用 label 标签将其与其标题相关联。"></a>[强制] 有文本标题的控件必须使用 <code>label</code> 标签将其与其标题相关联。</h4><p>解释：</p>
<p>有两种方式：</p>
<ol>
<li>将控件置于 <code>label</code> 内。</li>
<li><code>label</code> 的 <code>for</code> 属性指向控件的 <code>id</code>。</li>
</ol>
<p>推荐使用第一种，减少不必要的 <code>id</code>。如果 DOM 结构不允许直接嵌套，则应使用第二种。</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"confirm"</span> <span class="attr">value</span>=<span class="string">"on"</span>&gt;</span> 我已确认上述条款<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username"</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"textbox"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">id</span>=<span class="string">"username"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="6-2-按钮"><a href="#6-2-按钮" class="headerlink" title="6.2 按钮"></a>6.2 按钮</h3><h4 id="强制-使用-button-元素时必须指明-type-属性值。"><a href="#强制-使用-button-元素时必须指明-type-属性值。" class="headerlink" title="[强制] 使用 button 元素时必须指明 type 属性值。"></a>[强制] 使用 <code>button</code> 元素时必须指明 <code>type</code> 属性值。</h4><p>解释：</p>
<p><code>button</code> 元素的默认 <code>type</code> 为 <code>submit</code>，如果被置于 <code>form</code> 元素中，点击后将导致表单提交。为显示区分其作用方便理解，必须给出 <code>type</code> 属性。</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="建议-尽量不要使用按钮类元素的-name-属性。"><a href="#建议-尽量不要使用按钮类元素的-name-属性。" class="headerlink" title="[建议] 尽量不要使用按钮类元素的 name 属性。"></a>[建议] 尽量不要使用按钮类元素的 <code>name</code> 属性。</h4><p>解释：</p>
<p>由于浏览器兼容性问题，使用按钮的 <code>name</code> 属性会带来许多难以发现的问题。具体情况可参考<a href="http://w3help.org/zh-cn/causes/CM2001" target="_blank" rel="external">此文</a>。</p>
<h3 id="6-3-可访问性-A11Y"><a href="#6-3-可访问性-A11Y" class="headerlink" title="6.3 可访问性 (A11Y)"></a>6.3 可访问性 (A11Y)</h3><h4 id="建议-负责主要功能的按钮在-DOM-中的顺序应靠前。"><a href="#建议-负责主要功能的按钮在-DOM-中的顺序应靠前。" class="headerlink" title="[建议] 负责主要功能的按钮在 DOM 中的顺序应靠前。"></a>[建议] 负责主要功能的按钮在 DOM 中的顺序应靠前。</h4><p>解释：</p>
<p>负责主要功能的按钮应相对靠前，以提高可访问性。如果在 CSS 中指定了 <code>float: right</code> 则可能导致视觉上主按钮在前，而 DOM 中主按钮靠后的情况。</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- good --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-class">.buttons</span> <span class="selector-class">.button-group</span> &#123;</span></div><div class="line"><span class="undefined">    float: right;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"buttons"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"button-group"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- bad --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-class">.buttons</span> <span class="selector-tag">button</span> &#123;</span></div><div class="line"><span class="undefined">    float: right;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"buttons"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="建议-当使用-JavaScript-进行表单提交时，如果条件允许，应使原生提交功能正常工作。"><a href="#建议-当使用-JavaScript-进行表单提交时，如果条件允许，应使原生提交功能正常工作。" class="headerlink" title="[建议] 当使用 JavaScript 进行表单提交时，如果条件允许，应使原生提交功能正常工作。"></a>[建议] 当使用 JavaScript 进行表单提交时，如果条件允许，应使原生提交功能正常工作。</h4><p>解释：</p>
<p>当浏览器 JS 运行错误或关闭 JS 时，提交功能将无法工作。如果正确指定了 <code>form</code> 元素的 <code>action</code> 属性和表单控件的 <code>name</code> 属性时，提交仍可继续进行。</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"用户名"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"密码"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="建议-在针对移动设备开发的页面时，根据内容类型指定输入框的-type-属性。"><a href="#建议-在针对移动设备开发的页面时，根据内容类型指定输入框的-type-属性。" class="headerlink" title="[建议] 在针对移动设备开发的页面时，根据内容类型指定输入框的 type 属性。"></a>[建议] 在针对移动设备开发的页面时，根据内容类型指定输入框的 <code>type</code> 属性。</h4><p>解释：</p>
<p>根据内容类型指定输入框类型，能获得能友好的输入体验。</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="7-多媒体"><a href="#7-多媒体" class="headerlink" title="7 多媒体"></a>7 多媒体</h2><h4 id="建议-当在现代浏览器中使用-audio-以及-video-标签来播放音频、视频时，应当注意格式。"><a href="#建议-当在现代浏览器中使用-audio-以及-video-标签来播放音频、视频时，应当注意格式。" class="headerlink" title="[建议] 当在现代浏览器中使用 audio 以及 video 标签来播放音频、视频时，应当注意格式。"></a>[建议] 当在现代浏览器中使用 <code>audio</code> 以及 <code>video</code> 标签来播放音频、视频时，应当注意格式。</h4><p>解释：</p>
<p>音频应尽可能覆盖到如下格式：</p>
<ul>
<li>MP3</li>
<li>WAV</li>
<li>Ogg</li>
</ul>
<p>视频应尽可能覆盖到如下格式：</p>
<ul>
<li>MP4</li>
<li>WebM</li>
<li>Ogg</li>
</ul>
<h4 id="建议-在支持-HTML5-的浏览器中优先使用-audio-和-video-标签来定义音视频元素。"><a href="#建议-在支持-HTML5-的浏览器中优先使用-audio-和-video-标签来定义音视频元素。" class="headerlink" title="[建议] 在支持 HTML5 的浏览器中优先使用 audio 和 video 标签来定义音视频元素。"></a>[建议] 在支持 <code>HTML5</code> 的浏览器中优先使用 <code>audio</code> 和 <code>video</code> 标签来定义音视频元素。</h4><h4 id="建议-使用退化到插件的方式来对多浏览器进行支持。"><a href="#建议-使用退化到插件的方式来对多浏览器进行支持。" class="headerlink" title="[建议] 使用退化到插件的方式来对多浏览器进行支持。"></a>[建议] 使用退化到插件的方式来对多浏览器进行支持。</h4><p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"audio.mp3"</span> <span class="attr">type</span>=<span class="string">"audio/mpeg"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"audio.ogg"</span> <span class="attr">type</span>=<span class="string">"audio/ogg"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">object</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">data</span>=<span class="string">"audio.mp3"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">embed</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">src</span>=<span class="string">"audio.swf"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">object</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">controls</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"video.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"video.ogg"</span> <span class="attr">type</span>=<span class="string">"video/ogg"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">object</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">data</span>=<span class="string">"video.mp4"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">embed</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">src</span>=<span class="string">"video.swf"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">object</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="建议-只在必要的时候开启音视频的自动播放。"><a href="#建议-只在必要的时候开启音视频的自动播放。" class="headerlink" title="[建议] 只在必要的时候开启音视频的自动播放。"></a>[建议] 只在必要的时候开启音视频的自动播放。</h4><h4 id="建议-在-object-标签内部提供指示浏览器不支持该标签的说明。"><a href="#建议-在-object-标签内部提供指示浏览器不支持该标签的说明。" class="headerlink" title="[建议] 在 object 标签内部提供指示浏览器不支持该标签的说明。"></a>[建议] 在 <code>object</code> 标签内部提供指示浏览器不支持该标签的说明。</h4><p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">data</span>=<span class="string">"something.swf"</span>&gt;</span>DO NOT SUPPORT THIS TAG<span class="tag">&lt;/<span class="name">object</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="8-模板中的-HTML"><a href="#8-模板中的-HTML" class="headerlink" title="8 模板中的 HTML"></a>8 模板中的 HTML</h2><h4 id="建议-模板代码的缩进优先保证-HTML-代码的缩进规则。"><a href="#建议-模板代码的缩进优先保证-HTML-代码的缩进规则。" class="headerlink" title="[建议] 模板代码的缩进优先保证 HTML 代码的缩进规则。"></a>[建议] 模板代码的缩进优先保证 HTML 代码的缩进规则。</h4><p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- good --&gt;</span></div><div class="line">&#123;if $display == true&#125;</div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    &#123;foreach $item_list as $item&#125;</div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;$item.name&#125;<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">    &#123;/foreach&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">&#123;/if&#125;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- bad --&gt;</span></div><div class="line">&#123;if $display == true&#125;</div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    &#123;foreach $item_list as $item&#125;</div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;$item.name&#125;<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">    &#123;/foreach&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">&#123;/if&#125;</div></pre></td></tr></table></figure>
<h4 id="建议-模板代码应以保证-HTML-单个标签语法的正确性为基本原则。"><a href="#建议-模板代码应以保证-HTML-单个标签语法的正确性为基本原则。" class="headerlink" title="[建议] 模板代码应以保证 HTML 单个标签语法的正确性为基本原则。"></a>[建议] 模板代码应以保证 HTML 单个标签语法的正确性为基本原则。</h4><p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- good --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"&#123;if $item.type_id == $current_type&#125;focus&#123;/if&#125;"</span>&gt;</span>&#123; $item.type_name &#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- bad --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> &#123;<span class="attr">if</span> $<span class="attr">item.type_id</span> == <span class="string">$current_type&#125;</span> <span class="attr">class</span>=<span class="string">"focus"</span>&#123;/<span class="attr">if</span>&#125;&gt;</span>&#123; $item.type_name &#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="建议-在循环处理模板数据构造表格时，若要求每行输出固定的个数，建议先将数据分组，之后再循环输出。"><a href="#建议-在循环处理模板数据构造表格时，若要求每行输出固定的个数，建议先将数据分组，之后再循环输出。" class="headerlink" title="[建议] 在循环处理模板数据构造表格时，若要求每行输出固定的个数，建议先将数据分组，之后再循环输出。"></a>[建议] 在循环处理模板数据构造表格时，若要求每行输出固定的个数，建议先将数据分组，之后再循环输出。</h4><p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- good --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">    &#123;foreach $item_list as $item_group&#125;</div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">        &#123;foreach $item_group as $item&#125;</div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123; $item.name &#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        &#123;/foreach&#125;</div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    &#123;/foreach&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- bad --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    &#123;foreach $item_list as $item&#125;</div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123; $item.name &#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        &#123;if $item@iteration is div by 5&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">        &#123;/if&#125;</div><div class="line">    &#123;/foreach&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1 前言&quot;&gt;&lt;/a&gt;1 前言&lt;/h2&gt;&lt;p&gt;HTML 作为描述网页结构的超文本标记语言，在百度一直有着广泛的应用。本文档的目标是使 HTML 代码风格保持一致，容易被理解和被维护。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://www.hqxdb.com/categories/javascript/"/>
    
      <category term="规范" scheme="https://www.hqxdb.com/categories/javascript/%E8%A7%84%E8%8C%83/"/>
    
    
      <category term="HTML" scheme="https://www.hqxdb.com/tags/HTML/"/>
    
      <category term="HTML编码规范" scheme="https://www.hqxdb.com/tags/HTML%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>javascript书写规范目录</title>
    <link href="https://www.hqxdb.com/2017/08/23/JS%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83/README/"/>
    <id>https://www.hqxdb.com/2017/08/23/JS书写规范/README/</id>
    <published>2017-08-23T14:06:46.000Z</published>
    <updated>2017-08-27T02:21:01.885Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">我像风一样自由</blockquote><br><a id="more"></a> </p>
<ul>
<li><a href="./../javascript-style-guide/">Javascript编码规范</a> <span class="std-rec">[1.3]</span></li>
<li><a href="./../es-next-style-guide/">Javascript编码规范 - ESNext补充篇</a> <span class="std-rec">[draft]</span></li>
<li><a href="./../html-style-guide/">HTML编码规范</a> <span class="std-rec">[1.2]</span></li>
<li><a href="./../css-style-guide/">CSS编码规范</a> <span class="std-rec">[1.2]</span></li>
<li><a href="./../less-code-style/">Less编码规范</a> <span class="std-rec">[1.1]</span></li>
<li><a href="./../e-json/">E-JSON数据传输标准</a> <span class="std-rec">[1.0]</span></li>
<li><a href="./../module/">模块和加载器规范</a> <span class="std-rec">[1.1]</span></li>
<li><a href="./../package/">包结构规范</a> <span class="std-rec">[1.1]</span></li>
<li><a href="./../directory/">项目目录结构规范</a> <span class="std-rec">[1.1]</span></li>
<li><a href="./../chart/">图表库标准</a> <span class="std-rec">[1.0]</span></li>
<li><a href="./../react-style-guide/">react编码规范</a> <span class="std-rec">[draft]</span></li>
</ul>
<p>Lint and fix tool：<a href="http://www.hqxdb.com/">HQXDB</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;我像风一样自由&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
      <category term="目录" scheme="https://www.hqxdb.com/categories/%E7%9B%AE%E5%BD%95/"/>
    
    
      <category term="javascript" scheme="https://www.hqxdb.com/tags/javascript/"/>
    
      <category term="规范" scheme="https://www.hqxdb.com/tags/%E8%A7%84%E8%8C%83/"/>
    
      <category term="目录" scheme="https://www.hqxdb.com/tags/%E7%9B%AE%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript编码规范</title>
    <link href="https://www.hqxdb.com/2017/08/23/JS%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83/javascript-style-guide/"/>
    <id>https://www.hqxdb.com/2017/08/23/JS书写规范/javascript-style-guide/</id>
    <published>2017-08-23T14:06:46.000Z</published>
    <updated>2017-08-27T02:51:53.875Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h2><p>JavaScript 在百度一直有着广泛的应用，特别是在浏览器端的行为管理。本文档的目标是使 JavaScript 代码风格保持一致，容易被理解和被维护。</p>
<p>虽然本文档是针对 JavaScript 设计的，但是在使用各种 JavaScript 的预编译语言时(如 TypeScript 等)时，适用的部分也应尽量遵循本文档的约定。</p>
<a id="more"></a> 
<h2 id="2-代码风格"><a href="#2-代码风格" class="headerlink" title="2 代码风格"></a>2 代码风格</h2><h3 id="2-1-文件"><a href="#2-1-文件" class="headerlink" title="2.1 文件"></a>2.1 文件</h3><h5 id="建议-JavaScript-文件使用无-BOM-的-UTF-8-编码。"><a href="#建议-JavaScript-文件使用无-BOM-的-UTF-8-编码。" class="headerlink" title="[建议] JavaScript 文件使用无 BOM 的 UTF-8 编码。"></a>[建议] JavaScript 文件使用无 <code>BOM</code> 的 <code>UTF-8</code> 编码。</h5><p>解释：</p>
<p>UTF-8 编码具有更广泛的适应性。BOM 在使用程序或工具处理文件时可能造成不必要的干扰。</p>
<h5 id="建议-在文件结尾处，保留一个空行。"><a href="#建议-在文件结尾处，保留一个空行。" class="headerlink" title="[建议] 在文件结尾处，保留一个空行。"></a>[建议] 在文件结尾处，保留一个空行。</h5><h3 id="2-2-结构"><a href="#2-2-结构" class="headerlink" title="2.2 结构"></a>2.2 结构</h3><h4 id="2-2-1-缩进"><a href="#2-2-1-缩进" class="headerlink" title="2.2.1 缩进"></a>2.2.1 缩进</h4><h5 id="强制-使用-4-个空格做为一个缩进层级，不允许使用-2-个空格-或-tab-字符。"><a href="#强制-使用-4-个空格做为一个缩进层级，不允许使用-2-个空格-或-tab-字符。" class="headerlink" title="[强制] 使用 4 个空格做为一个缩进层级，不允许使用 2 个空格 或 tab 字符。"></a>[强制] 使用 <code>4</code> 个空格做为一个缩进层级，不允许使用 <code>2</code> 个空格 或 <code>tab</code> 字符。</h5><h5 id="强制-switch-下的-case-和-default-必须增加一个缩进层级。"><a href="#强制-switch-下的-case-和-default-必须增加一个缩进层级。" class="headerlink" title="[强制] switch 下的 case 和 default 必须增加一个缩进层级。"></a>[强制] <code>switch</code> 下的 <code>case</code> 和 <code>default</code> 必须增加一个缩进层级。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">switch</span> (variable) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">case</span> <span class="string">'1'</span>:</div><div class="line">        <span class="comment">// do...</span></div><div class="line">        <span class="keyword">break</span>;</div><div class="line"></div><div class="line">    <span class="keyword">case</span> <span class="string">'2'</span>:</div><div class="line">        <span class="comment">// do...</span></div><div class="line">        <span class="keyword">break</span>;</div><div class="line"></div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        <span class="comment">// do...</span></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">switch</span> (variable) &#123;</div><div class="line"></div><div class="line"><span class="keyword">case</span> <span class="string">'1'</span>:</div><div class="line">    <span class="comment">// do...</span></div><div class="line">    <span class="keyword">break</span>;</div><div class="line"></div><div class="line"><span class="keyword">case</span> <span class="string">'2'</span>:</div><div class="line">    <span class="comment">// do...</span></div><div class="line">    <span class="keyword">break</span>;</div><div class="line"></div><div class="line"><span class="keyword">default</span>:</div><div class="line">    <span class="comment">// do...</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-2-2-空格"><a href="#2-2-2-空格" class="headerlink" title="2.2.2 空格"></a>2.2.2 空格</h4><h5 id="强制-二元运算符两侧必须有一个空格，一元运算符与操作对象之间不允许有空格。"><a href="#强制-二元运算符两侧必须有一个空格，一元运算符与操作对象之间不允许有空格。" class="headerlink" title="[强制] 二元运算符两侧必须有一个空格，一元运算符与操作对象之间不允许有空格。"></a>[强制] 二元运算符两侧必须有一个空格，一元运算符与操作对象之间不允许有空格。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = !arr.length;</div><div class="line">a++;</div><div class="line">a = b + c;</div></pre></td></tr></table></figure>
<h5 id="强制-用作代码块起始的左花括号-前必须有一个空格。"><a href="#强制-用作代码块起始的左花括号-前必须有一个空格。" class="headerlink" title="[强制] 用作代码块起始的左花括号 { 前必须有一个空格。"></a>[强制] 用作代码块起始的左花括号 <code>{</code> 前必须有一个空格。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">while</span> (condition) &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (condition)&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">while</span> (condition)&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>)</span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="强制-if-else-for-while-function-switch-do-try-catch-finally-关键字后，必须有一个空格。"><a href="#强制-if-else-for-while-function-switch-do-try-catch-finally-关键字后，必须有一个空格。" class="headerlink" title="[强制] if / else / for / while / function / switch / do / try / catch / finally 关键字后，必须有一个空格。"></a>[强制] <code>if / else / for / while / function / switch / do / try / catch / finally</code> 关键字后，必须有一个空格。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">while</span> (condition) &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span>(condition) &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">while</span>(condition) &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<h5 id="强制-在对象创建时，属性中的-之后必须有空格，-之前不允许有空格。"><a href="#强制-在对象创建时，属性中的-之后必须有空格，-之前不允许有空格。" class="headerlink" title="[强制] 在对象创建时，属性中的 : 之后必须有空格，: 之前不允许有空格。"></a>[强制] 在对象创建时，属性中的 <code>:</code> 之后必须有空格，<code>:</code> 之前不允许有空格。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    a: <span class="number">1</span>,</div><div class="line">    b: <span class="number">2</span>,</div><div class="line">    c: <span class="number">3</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    a : <span class="number">1</span>,</div><div class="line">    b:<span class="number">2</span>,</div><div class="line">    c :<span class="number">3</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h5 id="强制-函数声明、具名函数表达式、函数调用中，函数名和-之间不允许有空格。"><a href="#强制-函数声明、具名函数表达式、函数调用中，函数名和-之间不允许有空格。" class="headerlink" title="[强制] 函数声明、具名函数表达式、函数调用中，函数名和 ( 之间不允许有空格。"></a>[强制] 函数声明、具名函数表达式、函数调用中，函数名和 <code>(</code> 之间不允许有空格。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> funcName = <span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">funcName();</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span> (<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> funcName = <span class="function"><span class="keyword">function</span> <span class="title">funcName</span> (<span class="params"></span>) </span>&#123;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">funcName ();</div></pre></td></tr></table></figure>
<h5 id="强制-和-前不允许有空格。如果不位于行尾，-和-后必须跟一个空格。"><a href="#强制-和-前不允许有空格。如果不位于行尾，-和-后必须跟一个空格。" class="headerlink" title="[强制] , 和 ; 前不允许有空格。如果不位于行尾，, 和 ; 后必须跟一个空格。"></a>[强制] <code>,</code> 和 <code>;</code> 前不允许有空格。如果不位于行尾，<code>,</code> 和 <code>;</code> 后必须跟一个空格。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line">callFunc(a, b);</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">callFunc(a , b) ;</div></pre></td></tr></table></figure>
<h5 id="强制-在函数调用、函数声明、括号表达式、属性访问、if-for-while-switch-catch-等语句中，-和-内紧贴括号部分不允许有空格。"><a href="#强制-在函数调用、函数声明、括号表达式、属性访问、if-for-while-switch-catch-等语句中，-和-内紧贴括号部分不允许有空格。" class="headerlink" title="[强制] 在函数调用、函数声明、括号表达式、属性访问、if / for / while / switch / catch 等语句中，() 和 [] 内紧贴括号部分不允许有空格。"></a>[强制] 在函数调用、函数声明、括号表达式、属性访问、<code>if / for / while / switch / catch</code> 等语句中，<code>()</code> 和 <code>[]</code> 内紧贴括号部分不允许有空格。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"></div><div class="line">callFunc(param1, param2, param3);</div><div class="line"></div><div class="line">save(<span class="keyword">this</span>.list[<span class="keyword">this</span>.indexes[i]]);</div><div class="line"></div><div class="line">needIncream &amp;&amp; (variable += increament);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (num &gt; list.length) &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">while</span> (len--) &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"></div><div class="line">callFunc( param1, param2, param3 );</div><div class="line"></div><div class="line">save( <span class="keyword">this</span>.list[ <span class="keyword">this</span>.indexes[ i ] ] );</div><div class="line"></div><div class="line">needIncreament &amp;&amp; ( variable += increament );</div><div class="line"></div><div class="line"><span class="keyword">if</span> ( num &gt; list.length ) &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">while</span> ( len-- ) &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="强制-单行声明的数组与对象，如果包含元素，-和-内紧贴括号部分不允许包含空格。"><a href="#强制-单行声明的数组与对象，如果包含元素，-和-内紧贴括号部分不允许包含空格。" class="headerlink" title="[强制] 单行声明的数组与对象，如果包含元素，{} 和 [] 内紧贴括号部分不允许包含空格。"></a>[强制] 单行声明的数组与对象，如果包含元素，<code>{}</code> 和 <code>[]</code> 内紧贴括号部分不允许包含空格。</h5><p>解释：</p>
<p>声明包含元素的数组与对象，只有当内部元素的形式较为简单时，才允许写在一行。元素复杂的情况，还是应该换行书写。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> arr1 = [];</div><div class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">name</span>: <span class="string">'obj'</span>&#125;;</div><div class="line"><span class="keyword">var</span> obj3 = &#123;</div><div class="line">    name: <span class="string">'obj'</span>,</div><div class="line">    age: <span class="number">20</span>,</div><div class="line">    sex: <span class="number">1</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> arr1 = [ ];</div><div class="line"><span class="keyword">var</span> arr2 = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ];</div><div class="line"><span class="keyword">var</span> obj1 = &#123; &#125;;</div><div class="line"><span class="keyword">var</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">'obj'</span> &#125;;</div><div class="line"><span class="keyword">var</span> obj3 = &#123;<span class="attr">name</span>: <span class="string">'obj'</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">sex</span>: <span class="number">1</span>&#125;;</div></pre></td></tr></table></figure>
<h5 id="强制-行尾不得有多余的空格。"><a href="#强制-行尾不得有多余的空格。" class="headerlink" title="[强制] 行尾不得有多余的空格。"></a>[强制] 行尾不得有多余的空格。</h5><h4 id="2-2-3-换行"><a href="#2-2-3-换行" class="headerlink" title="2.2.3 换行"></a>2.2.3 换行</h4><h5 id="强制-每个独立语句结束后必须换行。"><a href="#强制-每个独立语句结束后必须换行。" class="headerlink" title="[强制] 每个独立语句结束后必须换行。"></a>[强制] 每个独立语句结束后必须换行。</h5><h5 id="强制-每行不得超过-120-个字符。"><a href="#强制-每行不得超过-120-个字符。" class="headerlink" title="[强制] 每行不得超过 120 个字符。"></a>[强制] 每行不得超过 <code>120</code> 个字符。</h5><p>解释：</p>
<p>超长的不可分割的代码允许例外，比如复杂的正则表达式。长字符串不在例外之列。</p>
<h5 id="强制-运算符处换行时，运算符必须在新行的行首。"><a href="#强制-运算符处换行时，运算符必须在新行的行首。" class="headerlink" title="[强制] 运算符处换行时，运算符必须在新行的行首。"></a>[强制] 运算符处换行时，运算符必须在新行的行首。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (user.isAuthenticated()</div><div class="line">    &amp;&amp; user.isInRole(<span class="string">'admin'</span>)</div><div class="line">    &amp;&amp; user.hasAuthority(<span class="string">'add-admin'</span>)</div><div class="line">    || user.hasAuthority(<span class="string">'delete-admin'</span>)</div><div class="line">) &#123;</div><div class="line">    <span class="comment">// Code</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> result = number1 + number2 + number3</div><div class="line">    + number4 + number5;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (user.isAuthenticated() &amp;&amp;</div><div class="line">    user.isInRole(<span class="string">'admin'</span>) &amp;&amp;</div><div class="line">    user.hasAuthority(<span class="string">'add-admin'</span>) ||</div><div class="line">    user.hasAuthority(<span class="string">'delete-admin'</span>)) &#123;</div><div class="line">    <span class="comment">// Code</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> result = number1 + number2 + number3 +</div><div class="line">    number4 + number5;</div></pre></td></tr></table></figure>
<h5 id="强制-在函数声明、函数表达式、函数调用、对象创建、数组创建、for-语句等场景中，不允许在-或-前换行。"><a href="#强制-在函数声明、函数表达式、函数调用、对象创建、数组创建、for-语句等场景中，不允许在-或-前换行。" class="headerlink" title="[强制] 在函数声明、函数表达式、函数调用、对象创建、数组创建、for 语句等场景中，不允许在 , 或 ; 前换行。"></a>[强制] 在函数声明、函数表达式、函数调用、对象创建、数组创建、<code>for</code> 语句等场景中，不允许在 <code>,</code> 或 <code>;</code> 前换行。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    a: <span class="number">1</span>,</div><div class="line">    b: <span class="number">2</span>,</div><div class="line">    c: <span class="number">3</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">foo(</div><div class="line">    aVeryVeryLongArgument,</div><div class="line">    anotherVeryLongArgument,</div><div class="line">    callback</div><div class="line">);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    a: <span class="number">1</span></div><div class="line">    , <span class="attr">b</span>: <span class="number">2</span></div><div class="line">    , <span class="attr">c</span>: <span class="number">3</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">foo(</div><div class="line">    aVeryVeryLongArgument</div><div class="line">    , anotherVeryLongArgument</div><div class="line">    , callback</div><div class="line">);</div></pre></td></tr></table></figure>
<h5 id="建议-不同行为或逻辑的语句集，使用空行隔开，更易阅读。"><a href="#建议-不同行为或逻辑的语句集，使用空行隔开，更易阅读。" class="headerlink" title="[建议] 不同行为或逻辑的语句集，使用空行隔开，更易阅读。"></a>[建议] 不同行为或逻辑的语句集，使用空行隔开，更易阅读。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 仅为按逻辑换行的示例，不代表setStyle的最优实现</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setStyle</span>(<span class="params">element, property, value</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (element == <span class="literal">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    element.style[property] = value;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="建议-在语句的行长度超过-120-时，根据逻辑条件合理缩进。"><a href="#建议-在语句的行长度超过-120-时，根据逻辑条件合理缩进。" class="headerlink" title="[建议] 在语句的行长度超过 120 时，根据逻辑条件合理缩进。"></a>[建议] 在语句的行长度超过 <code>120</code> 时，根据逻辑条件合理缩进。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 较复杂的逻辑条件组合，将每个条件独立一行，逻辑运算符放置在行首进行分隔，或将部分逻辑按逻辑组合进行分隔。</span></div><div class="line"><span class="comment">// 建议最终将右括号 ) 与左大括号 &#123; 放在独立一行，保证与 `if` 内语句块能容易视觉辨识。</span></div><div class="line"><span class="keyword">if</span> (user.isAuthenticated()</div><div class="line">    &amp;&amp; user.isInRole(<span class="string">'admin'</span>)</div><div class="line">    &amp;&amp; user.hasAuthority(<span class="string">'add-admin'</span>)</div><div class="line">    || user.hasAuthority(<span class="string">'delete-admin'</span>)</div><div class="line">) &#123;</div><div class="line">    <span class="comment">// Code</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 按一定长度截断字符串，并使用 + 运算符进行连接。</span></div><div class="line"><span class="comment">// 分隔字符串尽量按语义进行，如不要在一个完整的名词中间断开。</span></div><div class="line"><span class="comment">// 特别的，对于 HTML 片段的拼接，通过缩进，保持和 HTML 相同的结构。</span></div><div class="line"><span class="keyword">var</span> html = <span class="string">''</span> <span class="comment">// 此处用一个空字符串，以便整个 HTML 片段都在新行严格对齐</span></div><div class="line">    + <span class="string">'&lt;article&gt;'</span></div><div class="line">    +     <span class="string">'&lt;h1&gt;Title here&lt;/h1&gt;'</span></div><div class="line">    +     <span class="string">'&lt;p&gt;This is a paragraph&lt;/p&gt;'</span></div><div class="line">    +     <span class="string">'&lt;footer&gt;Complete&lt;/footer&gt;'</span></div><div class="line">    + <span class="string">'&lt;/article&gt;'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 也可使用数组来进行拼接，相对 `+` 更容易调整缩进。</span></div><div class="line"><span class="keyword">var</span> html = [</div><div class="line">    <span class="string">'&lt;article&gt;'</span>,</div><div class="line">        <span class="string">'&lt;h1&gt;Title here&lt;/h1&gt;'</span>,</div><div class="line">        <span class="string">'&lt;p&gt;This is a paragraph&lt;/p&gt;'</span>,</div><div class="line">        <span class="string">'&lt;footer&gt;Complete&lt;/footer&gt;'</span>,</div><div class="line">    <span class="string">'&lt;/article&gt;'</span></div><div class="line">];</div><div class="line">html = html.join(<span class="string">''</span>);</div><div class="line"></div><div class="line"><span class="comment">// 当参数过多时，将每个参数独立写在一行上，并将结束的右括号 ) 独立一行。</span></div><div class="line"><span class="comment">// 所有参数必须增加一个缩进。</span></div><div class="line">foo(</div><div class="line">    aVeryVeryLongArgument,</div><div class="line">    anotherVeryLongArgument,</div><div class="line">    callback</div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">// 也可以按逻辑对参数进行组合。</span></div><div class="line"><span class="comment">// 最经典的是 baidu.format 函数，调用时将参数分为“模板”和“数据”两块</span></div><div class="line">baidu.format(</div><div class="line">    dateFormatTemplate,</div><div class="line">    year, month, date, hour, minute, second</div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">// 当函数调用时，如果有一个或以上参数跨越多行，应当每一个参数独立一行。</span></div><div class="line"><span class="comment">// 这通常出现在匿名函数或者对象初始化等作为参数时，如 `setTimeout` 函数等。</span></div><div class="line">setTimeout(</div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="string">'hello'</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="number">200</span></div><div class="line">);</div><div class="line"></div><div class="line">order.data.read(</div><div class="line">    <span class="string">'id='</span> + me.model.id,</div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">        me.attchToModel(data.result);</div><div class="line">        callback();</div><div class="line">    &#125;,</div><div class="line">    <span class="number">300</span></div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">// 链式调用较长时采用缩进进行调整。</span></div><div class="line">$(<span class="string">'#items'</span>)</div><div class="line">    .find(<span class="string">'.selected'</span>)</div><div class="line">    .highlight()</div><div class="line">    .end();</div><div class="line"></div><div class="line"><span class="comment">// 三元运算符由3部分组成，因此其换行应当根据每个部分的长度不同，形成不同的情况。</span></div><div class="line"><span class="keyword">var</span> result = thisIsAVeryVeryLongCondition</div><div class="line">    ? resultA : resultB;</div><div class="line"></div><div class="line"><span class="keyword">var</span> result = condition</div><div class="line">    ? thisIsAVeryVeryLongResult</div><div class="line">    : resultB;</div><div class="line"></div><div class="line"><span class="comment">// 数组和对象初始化的混用，严格按照每个对象的 `&#123;` 和结束 `&#125;` 在独立一行的风格书写。</span></div><div class="line"><span class="keyword">var</span> array = [</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">];</div></pre></td></tr></table></figure>
<h5 id="建议-对于-if-else-、try-catch-finally-等语句，推荐使用在-号后添加一个换行-的风格，使代码层次结构更清晰，阅读性更好。"><a href="#建议-对于-if-else-、try-catch-finally-等语句，推荐使用在-号后添加一个换行-的风格，使代码层次结构更清晰，阅读性更好。" class="headerlink" title="[建议] 对于 if...else...、try...catch...finally 等语句，推荐使用在 } 号后添加一个换行 的风格，使代码层次结构更清晰，阅读性更好。"></a>[建议] 对于 <code>if...else...</code>、<code>try...catch...finally</code> 等语句，推荐使用在 <code>}</code> 号后添加一个换行 的风格，使代码层次结构更清晰，阅读性更好。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line">    <span class="comment">// some statements;</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// some statements;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">// some statements;</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span> (ex) &#123;</div><div class="line">    <span class="comment">// some statements;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-2-4-语句"><a href="#2-2-4-语句" class="headerlink" title="2.2.4 语句"></a>2.2.4 语句</h4><h5 id="强制-不得省略语句结束的分号。"><a href="#强制-不得省略语句结束的分号。" class="headerlink" title="[强制] 不得省略语句结束的分号。"></a>[强制] 不得省略语句结束的分号。</h5><h5 id="强制-在-if-else-for-do-while-语句中，即使只有一行，也不得省略块-。"><a href="#强制-在-if-else-for-do-while-语句中，即使只有一行，也不得省略块-。" class="headerlink" title="[强制] 在 if / else / for / do / while 语句中，即使只有一行，也不得省略块 {...}。"></a>[强制] 在 <code>if / else / for / do / while</code> 语句中，即使只有一行，也不得省略块 <code>{...}</code>。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (condition) &#123;</div><div class="line">    callFunc();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (condition) callFunc();</div><div class="line"><span class="keyword">if</span> (condition)</div><div class="line">    callFunc();</div></pre></td></tr></table></figure>
<h5 id="强制-函数定义结束不允许添加分号。"><a href="#强制-函数定义结束不允许添加分号。" class="headerlink" title="[强制] 函数定义结束不允许添加分号。"></a>[强制] 函数定义结束不允许添加分号。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 如果是函数表达式，分号是不允许省略的。</span></div><div class="line"><span class="keyword">var</span> funcName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h5 id="强制-IIFE-必须在函数表达式外添加-，非-IIFE-不得在函数表达式外添加-。"><a href="#强制-IIFE-必须在函数表达式外添加-，非-IIFE-不得在函数表达式外添加-。" class="headerlink" title="[强制] IIFE 必须在函数表达式外添加 (，非 IIFE 不得在函数表达式外添加 (。"></a>[强制] <code>IIFE</code> 必须在函数表达式外添加 <code>(</code>，非 <code>IIFE</code> 不得在函数表达式外添加 <code>(</code>。</h5><p>解释：</p>
<p>IIFE = Immediately-Invoked Function Expression.</p>
<p>额外的 ( 能够让代码在阅读的一开始就能判断函数是否立即被调用，进而明白接下来代码的用途。而不是一直拖到底部才恍然大悟。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> task = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="comment">// Code</span></div><div class="line">   <span class="keyword">return</span> result;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> task = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// Code</span></div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;();</div><div class="line"></div><div class="line"><span class="keyword">var</span> func = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="2-3-命名"><a href="#2-3-命名" class="headerlink" title="2.3 命名"></a>2.3 命名</h3><h5 id="强制-变量-使用-Camel命名法。"><a href="#强制-变量-使用-Camel命名法。" class="headerlink" title="[强制] 变量 使用 Camel命名法。"></a>[强制] <code>变量</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> loadingModules = &#123;&#125;;</div></pre></td></tr></table></figure>
<h5 id="强制-常量-使用-全部字母大写，单词间下划线分隔-的命名方式。"><a href="#强制-常量-使用-全部字母大写，单词间下划线分隔-的命名方式。" class="headerlink" title="[强制] 常量 使用 全部字母大写，单词间下划线分隔 的命名方式。"></a>[强制] <code>常量</code> 使用 <code>全部字母大写，单词间下划线分隔</code> 的命名方式。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> HTML_ENTITY = &#123;&#125;;</div></pre></td></tr></table></figure>
<h5 id="强制-函数-使用-Camel命名法。"><a href="#强制-函数-使用-Camel命名法。" class="headerlink" title="[强制] 函数 使用 Camel命名法。"></a>[强制] <code>函数</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringFormat</span>(<span class="params">source</span>) </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="强制-函数的-参数-使用-Camel命名法。"><a href="#强制-函数的-参数-使用-Camel命名法。" class="headerlink" title="[强制] 函数的 参数 使用 Camel命名法。"></a>[强制] 函数的 <code>参数</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hear</span>(<span class="params">theBells</span>) </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="强制-类-使用-Pascal命名法。"><a href="#强制-类-使用-Pascal命名法。" class="headerlink" title="[强制] 类 使用 Pascal命名法。"></a>[强制] <code>类</code> 使用 <code>Pascal命名法</code>。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">TextNode</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="强制-类的-方法-属性-使用-Camel命名法。"><a href="#强制-类的-方法-属性-使用-Camel命名法。" class="headerlink" title="[强制] 类的 方法 / 属性 使用 Camel命名法。"></a>[强制] 类的 <code>方法</code> / <code>属性</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">TextNode</span>(<span class="params">value, engine</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.value = value;</div><div class="line">    <span class="keyword">this</span>.engine = engine;</div><div class="line">&#125;</div><div class="line"></div><div class="line">TextNode.prototype.clone = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h5 id="强制-枚举变量-使用-Pascal命名法，枚举的属性-使用-全部字母大写，单词间下划线分隔-的命名方式。"><a href="#强制-枚举变量-使用-Pascal命名法，枚举的属性-使用-全部字母大写，单词间下划线分隔-的命名方式。" class="headerlink" title="[强制] 枚举变量 使用 Pascal命名法，枚举的属性 使用 全部字母大写，单词间下划线分隔 的命名方式。"></a>[强制] <code>枚举变量</code> 使用 <code>Pascal命名法</code>，<code>枚举的属性</code> 使用 <code>全部字母大写，单词间下划线分隔</code> 的命名方式。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> TargetState = &#123;</div><div class="line">    READING: <span class="number">1</span>,</div><div class="line">    READED: <span class="number">2</span>,</div><div class="line">    APPLIED: <span class="number">3</span>,</div><div class="line">    READY: <span class="number">4</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h5 id="强制-命名空间-使用-Camel命名法。"><a href="#强制-命名空间-使用-Camel命名法。" class="headerlink" title="[强制] 命名空间 使用 Camel命名法。"></a>[强制] <code>命名空间</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">equipments.heavyWeapons = &#123;&#125;;</div></pre></td></tr></table></figure>
<h5 id="强制-由多个单词组成的缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。"><a href="#强制-由多个单词组成的缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。" class="headerlink" title="[强制] 由多个单词组成的缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。"></a>[强制] 由多个单词组成的缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">XMLParser</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertHTML</span>(<span class="params">element, html</span>) </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> httpRequest = <span class="keyword">new</span> HTTPRequest();</div></pre></td></tr></table></figure>
<h5 id="强制-类名-使用-名词。"><a href="#强制-类名-使用-名词。" class="headerlink" title="[强制] 类名 使用 名词。"></a>[强制] <code>类名</code> 使用 <code>名词</code>。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Engine</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="建议-函数名-使用-动宾短语。"><a href="#建议-函数名-使用-动宾短语。" class="headerlink" title="[建议] 函数名 使用 动宾短语。"></a>[建议] <code>函数名</code> 使用 <code>动宾短语</code>。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="建议-boolean-类型的变量使用-is-或-has-开头。"><a href="#建议-boolean-类型的变量使用-is-或-has-开头。" class="headerlink" title="[建议] boolean 类型的变量使用 is 或 has 开头。"></a>[建议] <code>boolean</code> 类型的变量使用 <code>is</code> 或 <code>has</code> 开头。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> isReady = <span class="literal">false</span>;</div><div class="line"><span class="keyword">var</span> hasMoreCommands = <span class="literal">false</span>;</div></pre></td></tr></table></figure>
<h5 id="建议-Promise对象-用-动宾短语的进行时-表达。"><a href="#建议-Promise对象-用-动宾短语的进行时-表达。" class="headerlink" title="[建议] Promise对象 用 动宾短语的进行时 表达。"></a>[建议] <code>Promise对象</code> 用 <code>动宾短语的进行时</code> 表达。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> loadingData = ajax.get(<span class="string">'url'</span>);</div><div class="line">loadingData.then(callback);</div></pre></td></tr></table></figure>
<h3 id="2-4-注释"><a href="#2-4-注释" class="headerlink" title="2.4 注释"></a>2.4 注释</h3><h4 id="2-4-1-单行注释"><a href="#2-4-1-单行注释" class="headerlink" title="2.4.1 单行注释"></a>2.4.1 单行注释</h4><h5 id="强制-必须独占一行。-后跟一个空格，缩进与下一行被注释说明的代码一致。"><a href="#强制-必须独占一行。-后跟一个空格，缩进与下一行被注释说明的代码一致。" class="headerlink" title="[强制] 必须独占一行。// 后跟一个空格，缩进与下一行被注释说明的代码一致。"></a>[强制] 必须独占一行。<code>//</code> 后跟一个空格，缩进与下一行被注释说明的代码一致。</h5><h4 id="2-4-2-多行注释"><a href="#2-4-2-多行注释" class="headerlink" title="2.4.2 多行注释"></a>2.4.2 多行注释</h4><h5 id="建议-避免使用-这样的多行注释。有多行注释内容时，使用多个单行注释。"><a href="#建议-避免使用-这样的多行注释。有多行注释内容时，使用多个单行注释。" class="headerlink" title="[建议] 避免使用 /*...*/ 这样的多行注释。有多行注释内容时，使用多个单行注释。"></a>[建议] 避免使用 <code>/*...*/</code> 这样的多行注释。有多行注释内容时，使用多个单行注释。</h5><h4 id="2-4-3-文档化注释"><a href="#2-4-3-文档化注释" class="headerlink" title="2.4.3 文档化注释"></a>2.4.3 文档化注释</h4><h5 id="强制-为了便于代码阅读和自文档化，以下内容必须包含以-形式的块注释中。"><a href="#强制-为了便于代码阅读和自文档化，以下内容必须包含以-形式的块注释中。" class="headerlink" title="[强制] 为了便于代码阅读和自文档化，以下内容必须包含以 /**...*/ 形式的块注释中。"></a>[强制] 为了便于代码阅读和自文档化，以下内容必须包含以 <code>/**...*/</code> 形式的块注释中。</h5><p>解释：</p>
<ol>
<li>文件</li>
<li>namespace</li>
<li>类</li>
<li>函数或方法</li>
<li>类属性</li>
<li>事件</li>
<li>全局变量</li>
<li>常量</li>
<li>AMD 模块</li>
</ol>
<h5 id="强制-文档注释前必须空一行。"><a href="#强制-文档注释前必须空一行。" class="headerlink" title="[强制] 文档注释前必须空一行。"></a>[强制] 文档注释前必须空一行。</h5><h5 id="建议-自文档化的文档说明-what，而不是-how。"><a href="#建议-自文档化的文档说明-what，而不是-how。" class="headerlink" title="[建议] 自文档化的文档说明 what，而不是 how。"></a>[建议] 自文档化的文档说明 what，而不是 how。</h5><h4 id="2-4-4-类型定义"><a href="#2-4-4-类型定义" class="headerlink" title="2.4.4 类型定义"></a>2.4.4 类型定义</h4><h5 id="强制-类型定义都是以-开始-以-结束。"><a href="#强制-类型定义都是以-开始-以-结束。" class="headerlink" title="[强制] 类型定义都是以 { 开始, 以 } 结束。"></a>[强制] 类型定义都是以 <code>{</code> 开始, 以 <code>}</code> 结束。</h5><p>解释：</p>
<p>常用类型如：{string}, {number}, {boolean}, {Object}, {Function}, {RegExp}, {Array}, {Date}。</p>
<p>类型不仅局限于内置的类型，也可以是自定义的类型。比如定义了一个类 Developer，就可以使用它来定义一个参数和返回值的类型。</p>
<h5 id="强制-对于基本类型-string-number-boolean-，首字母必须小写。"><a href="#强制-对于基本类型-string-number-boolean-，首字母必须小写。" class="headerlink" title="[强制] 对于基本类型 {string}, {number}, {boolean}，首字母必须小写。"></a>[强制] 对于基本类型 {string}, {number}, {boolean}，首字母必须小写。</h5><table>
<thead>
<tr>
<th>类型定义</th>
<th>语法示例</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>String</td>
<td>{string}</td>
<td>–</td>
</tr>
<tr>
<td>Number</td>
<td>{number}</td>
<td>–</td>
</tr>
<tr>
<td>Boolean</td>
<td>{boolean}</td>
<td>–</td>
</tr>
<tr>
<td>Object</td>
<td>{Object}</td>
<td>–</td>
</tr>
<tr>
<td>Function</td>
<td>{Function}</td>
<td>–</td>
</tr>
<tr>
<td>RegExp</td>
<td>{RegExp}</td>
<td>–</td>
</tr>
<tr>
<td>Array</td>
<td>{Array}</td>
<td>–</td>
</tr>
<tr>
<td>Date</td>
<td>{Date}</td>
<td>–</td>
</tr>
<tr>
<td>单一类型集合</td>
<td>{Array.&lt;string&gt;}</td>
<td>string 类型的数组</td>
</tr>
<tr>
<td>多类型</td>
<td>{(number｜boolean)}</td>
<td>可能是 number 类型, 也可能是 boolean 类型</td>
</tr>
<tr>
<td>允许为null</td>
<td>{?number}</td>
<td>可能是 number, 也可能是 null</td>
</tr>
<tr>
<td>不允许为null</td>
<td>{!Object}</td>
<td>Object 类型, 但不是 null</td>
</tr>
<tr>
<td>Function类型</td>
<td>{function(number, boolean)}</td>
<td>函数, 形参类型</td>
</tr>
<tr>
<td>Function带返回值</td>
<td>{function(number, boolean):string}</td>
<td>函数, 形参, 返回值类型</td>
</tr>
<tr>
<td>Promise</td>
<td>Promise.&lt;resolveType, rejectType&gt;</td>
<td>Promise，成功返回的数据类型，失败返回的错误类型</td>
</tr>
<tr>
<td>参数可选</td>
<td>@param {string=} name</td>
<td>可选参数, =为类型后缀</td>
</tr>
<tr>
<td>可变参数</td>
<td>@param {…number} args</td>
<td>变长参数,  …为类型前缀</td>
</tr>
<tr>
<td>任意类型</td>
<td>{*}</td>
<td>任意类型</td>
</tr>
<tr>
<td>可选任意类型</td>
<td>@param {*=} name</td>
<td>可选参数，类型不限</td>
</tr>
<tr>
<td>可变任意类型</td>
<td>@param {…*} args</td>
<td>变长参数，类型不限</td>
</tr>
</tbody>
</table>
<h4 id="2-4-5-文件注释"><a href="#2-4-5-文件注释" class="headerlink" title="2.4.5 文件注释"></a>2.4.5 文件注释</h4><h5 id="强制-文件顶部必须包含文件注释，用-file-标识文件说明。"><a href="#强制-文件顶部必须包含文件注释，用-file-标识文件说明。" class="headerlink" title="[强制] 文件顶部必须包含文件注释，用 @file 标识文件说明。"></a>[强制] 文件顶部必须包含文件注释，用 <code>@file</code> 标识文件说明。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * @file Describe the file</span></div><div class="line"><span class="comment"> */</span></div></pre></td></tr></table></figure>
<h5 id="建议-文件注释中可以用-author-标识开发者信息。"><a href="#建议-文件注释中可以用-author-标识开发者信息。" class="headerlink" title="[建议] 文件注释中可以用 @author 标识开发者信息。"></a>[建议] 文件注释中可以用 <code>@author</code> 标识开发者信息。</h5><p>解释：</p>
<p>开发者信息能够体现开发人员对文件的贡献，并且能够让遇到问题或希望了解相关信息的人找到维护人。通常情况文件在被创建时标识的是创建者。随着项目的进展，越来越多的人加入，参与这个文件的开发，新的作者应该被加入 <code>@author</code> 标识。</p>
<p><code>@author</code> 标识具有多人时，原则是按照 <code>责任</code> 进行排序。通常的说就是如果有问题，就是找第一个人应该比找第二个人有效。比如文件的创建者由于各种原因，模块移交给了其他人或其他团队，后来因为新增需求，其他人在新增代码时，添加 <code>@author</code> 标识应该把自己的名字添加在创建人的前面。</p>
<p><code>@author</code> 中的名字不允许被删除。任何劳动成果都应该被尊重。</p>
<p>业务项目中，一个文件可能被多人频繁修改，并且每个人的维护时间都可能不会很长，不建议为文件增加 <code>@author</code> 标识。通过版本控制系统追踪变更，按业务逻辑单元确定模块的维护责任人，通过文档与wiki跟踪和查询，是更好的责任管理方式。</p>
<p>对于业务逻辑无关的技术型基础项目，特别是开源的公共项目，应使用 <code>@author</code> 标识。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * @file Describe the file</span></div><div class="line"><span class="comment"> * @author author-name(mail-name@domain.com)</span></div><div class="line"><span class="comment"> *         author-name2(mail-name2@domain.com)</span></div><div class="line"><span class="comment"> */</span></div></pre></td></tr></table></figure>
<h4 id="2-4-6-命名空间注释"><a href="#2-4-6-命名空间注释" class="headerlink" title="2.4.6 命名空间注释"></a>2.4.6 命名空间注释</h4><h5 id="建议-命名空间使用-namespace-标识。"><a href="#建议-命名空间使用-namespace-标识。" class="headerlink" title="[建议] 命名空间使用 @namespace 标识。"></a>[建议] 命名空间使用 <code>@namespace</code> 标识。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * @namespace</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">var</span> util = &#123;&#125;;</div></pre></td></tr></table></figure>
<h4 id="2-4-7-类注释"><a href="#2-4-7-类注释" class="headerlink" title="2.4.7 类注释"></a>2.4.7 类注释</h4><h5 id="建议-使用-class-标记类或构造函数。"><a href="#建议-使用-class-标记类或构造函数。" class="headerlink" title="[建议] 使用 @class 标记类或构造函数。"></a>[建议] 使用 <code>@class</code> 标记类或构造函数。</h5><p>解释：</p>
<p>对于使用对象 <code>constructor</code> 属性来定义的构造函数，可以使用 <code>@constructor</code> 来标记。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 描述</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * @class</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Developer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// constructor body</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="建议-使用-extends-标记类的继承信息。"><a href="#建议-使用-extends-标记类的继承信息。" class="headerlink" title="[建议] 使用 @extends 标记类的继承信息。"></a>[建议] 使用 <code>@extends</code> 标记类的继承信息。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 描述</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * @class</span></div><div class="line"><span class="comment"> * @extends Developer</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fronteer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    Developer.call(<span class="keyword">this</span>);</div><div class="line">    <span class="comment">// constructor body</span></div><div class="line">&#125;</div><div class="line">util.inherits(Fronteer, Developer);</div></pre></td></tr></table></figure>
<h5 id="强制-使用包装方式扩展类成员时，-必须通过-lends-进行重新指向。"><a href="#强制-使用包装方式扩展类成员时，-必须通过-lends-进行重新指向。" class="headerlink" title="[强制] 使用包装方式扩展类成员时， 必须通过 @lends 进行重新指向。"></a>[强制] 使用包装方式扩展类成员时， 必须通过 <code>@lends</code> 进行重新指向。</h5><p>解释：</p>
<p>没有 <code>@lends</code> 标记将无法为该类生成包含扩展类成员的文档。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 类描述</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * @class</span></div><div class="line"><span class="comment"> * @extends Developer</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fronteer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    Developer.call(<span class="keyword">this</span>);</div><div class="line">    <span class="comment">// constructor body</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">util.extend(</div><div class="line">    Fronteer.prototype,</div><div class="line">    <span class="comment">/** @lends Fronteer.prototype */</span>&#123;</div><div class="line">        getLevel: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">// TODO</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<h5 id="强制-类的属性或方法等成员信息不是-public-的，应使用-protected-或-private-标识可访问性。"><a href="#强制-类的属性或方法等成员信息不是-public-的，应使用-protected-或-private-标识可访问性。" class="headerlink" title="[强制] 类的属性或方法等成员信息不是 public 的，应使用 @protected 或 @private 标识可访问性。"></a>[强制] 类的属性或方法等成员信息不是 <code>public</code> 的，应使用 <code>@protected</code> 或 <code>@private</code> 标识可访问性。</h5><p>解释：</p>
<p>生成的文档中将有可访问性的标记，避免用户直接使用非 <code>public</code> 的属性或方法。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 类描述</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * @class</span></div><div class="line"><span class="comment"> * @extends Developer</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">var</span> Fronteer = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    Developer.call(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 属性描述</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * @type &#123;string&#125;</span></div><div class="line"><span class="comment">     * @private</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">this</span>.level = <span class="string">'T12'</span>;</div><div class="line"></div><div class="line">    <span class="comment">// constructor body</span></div><div class="line">&#125;;</div><div class="line">util.inherits(Fronteer, Developer);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 方法描述</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * @private</span></div><div class="line"><span class="comment"> * @return &#123;string&#125; 返回值描述</span></div><div class="line"><span class="comment"> */</span></div><div class="line">Fronteer.prototype.getLevel = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="2-4-8-函数-方法注释"><a href="#2-4-8-函数-方法注释" class="headerlink" title="2.4.8 函数/方法注释"></a>2.4.8 函数/方法注释</h4><h5 id="强制-函数-方法注释必须包含函数说明，有参数和返回值时必须使用注释标识。"><a href="#强制-函数-方法注释必须包含函数说明，有参数和返回值时必须使用注释标识。" class="headerlink" title="[强制] 函数/方法注释必须包含函数说明，有参数和返回值时必须使用注释标识。"></a>[强制] 函数/方法注释必须包含函数说明，有参数和返回值时必须使用注释标识。</h5><p>解释：</p>
<p>当 <code>return</code> 关键字仅作退出函数/方法使用时，无须对返回值作注释标识。</p>
<h5 id="强制-参数和返回值注释必须包含类型信息，且不允许省略参数的说明。"><a href="#强制-参数和返回值注释必须包含类型信息，且不允许省略参数的说明。" class="headerlink" title="[强制] 参数和返回值注释必须包含类型信息，且不允许省略参数的说明。"></a>[强制] 参数和返回值注释必须包含类型信息，且不允许省略参数的说明。</h5><h5 id="建议-当函数是内部函数，外部不可访问时，可以使用-inner-标识。"><a href="#建议-当函数是内部函数，外部不可访问时，可以使用-inner-标识。" class="headerlink" title="[建议] 当函数是内部函数，外部不可访问时，可以使用 @inner 标识。"></a>[建议] 当函数是内部函数，外部不可访问时，可以使用 <code>@inner</code> 标识。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 函数描述</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * @param &#123;string&#125; p1 参数1的说明</span></div><div class="line"><span class="comment"> * @param &#123;string&#125; p2 参数2的说明，比较长</span></div><div class="line"><span class="comment"> *     那就换行了.</span></div><div class="line"><span class="comment"> * @param &#123;number=&#125; p3 参数3的说明（可选）</span></div><div class="line"><span class="comment"> * @return &#123;Object&#125; 返回值描述</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">p1, p2, p3</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> p3 = p3 || <span class="number">10</span>;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        p1: p1,</div><div class="line">        p2: p2,</div><div class="line">        p3: p3</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="强制-对-Object-中各项的描述，-必须使用-param-标识。"><a href="#强制-对-Object-中各项的描述，-必须使用-param-标识。" class="headerlink" title="[强制] 对 Object 中各项的描述， 必须使用 @param 标识。"></a>[强制] 对 Object 中各项的描述， 必须使用 <code>@param</code> 标识。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 函数描述</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * @param &#123;Object&#125; option 参数描述</span></div><div class="line"><span class="comment"> * @param &#123;string&#125; option.url option项描述</span></div><div class="line"><span class="comment"> * @param &#123;string=&#125; option.method option项描述，可选参数</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">option</span>) </span>&#123;</div><div class="line">    <span class="comment">// TODO</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="建议-重写父类方法时，-应当添加-override-标识。如果重写的形参个数、类型、顺序和返回值类型均未发生变化，可省略-param、-return，仅用-override-标识，否则仍应作完整注释。"><a href="#建议-重写父类方法时，-应当添加-override-标识。如果重写的形参个数、类型、顺序和返回值类型均未发生变化，可省略-param、-return，仅用-override-标识，否则仍应作完整注释。" class="headerlink" title="[建议] 重写父类方法时， 应当添加 @override 标识。如果重写的形参个数、类型、顺序和返回值类型均未发生变化，可省略 @param、@return，仅用 @override 标识，否则仍应作完整注释。"></a>[建议] 重写父类方法时， 应当添加 <code>@override</code> 标识。如果重写的形参个数、类型、顺序和返回值类型均未发生变化，可省略 <code>@param</code>、<code>@return</code>，仅用 <code>@override</code> 标识，否则仍应作完整注释。</h5><p>解释：</p>
<p>简而言之，当子类重写的方法能直接套用父类的方法注释时可省略对参数与返回值的注释。</p>
<h4 id="2-4-9-事件注释"><a href="#2-4-9-事件注释" class="headerlink" title="2.4.9 事件注释"></a>2.4.9 事件注释</h4><h5 id="强制-必须使用-event-标识事件，事件参数的标识与方法描述的参数标识相同。"><a href="#强制-必须使用-event-标识事件，事件参数的标识与方法描述的参数标识相同。" class="headerlink" title="[强制] 必须使用 @event 标识事件，事件参数的标识与方法描述的参数标识相同。"></a>[强制] 必须使用 <code>@event</code> 标识事件，事件参数的标识与方法描述的参数标识相同。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 值变更时触发</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * @event Select#change</span></div><div class="line"><span class="comment"> * @param &#123;Object&#125; e e描述</span></div><div class="line"><span class="comment"> * @param &#123;string&#125; e.before before描述</span></div><div class="line"><span class="comment"> * @param &#123;string&#125; e.after after描述</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">this</span>.fire(</div><div class="line">    <span class="string">'change'</span>,</div><div class="line">    &#123;</div><div class="line">        before: <span class="string">'foo'</span>,</div><div class="line">        after: <span class="string">'bar'</span></div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<h5 id="强制-在会广播事件的函数前使用-fires-标识广播的事件，在广播事件代码前使用-event-标识事件。"><a href="#强制-在会广播事件的函数前使用-fires-标识广播的事件，在广播事件代码前使用-event-标识事件。" class="headerlink" title="[强制] 在会广播事件的函数前使用 @fires 标识广播的事件，在广播事件代码前使用 @event 标识事件。"></a>[强制] 在会广播事件的函数前使用 <code>@fires</code> 标识广播的事件，在广播事件代码前使用 <code>@event</code> 标识事件。</h5><h5 id="建议-对于事件对象的注释，使用-param-标识，生成文档时可读性更好。"><a href="#建议-对于事件对象的注释，使用-param-标识，生成文档时可读性更好。" class="headerlink" title="[建议] 对于事件对象的注释，使用 @param 标识，生成文档时可读性更好。"></a>[建议] 对于事件对象的注释，使用 <code>@param</code> 标识，生成文档时可读性更好。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 点击处理</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * @fires Select#change</span></div><div class="line"><span class="comment"> * @private</span></div><div class="line"><span class="comment"> */</span></div><div class="line">Select.prototype.clickHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 值变更时触发</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * @event Select#change</span></div><div class="line"><span class="comment">     * @param &#123;Object&#125; e e描述</span></div><div class="line"><span class="comment">     * @param &#123;string&#125; e.before before描述</span></div><div class="line"><span class="comment">     * @param &#123;string&#125; e.after after描述</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">this</span>.fire(</div><div class="line">        <span class="string">'change'</span>,</div><div class="line">        &#123;</div><div class="line">            before: <span class="string">'foo'</span>,</div><div class="line">            after: <span class="string">'bar'</span></div><div class="line">        &#125;</div><div class="line">    );</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="2-4-10-常量注释"><a href="#2-4-10-常量注释" class="headerlink" title="2.4.10 常量注释"></a>2.4.10 常量注释</h4><h5 id="强制-常量必须使用-const-标记，并包含说明和类型信息。"><a href="#强制-常量必须使用-const-标记，并包含说明和类型信息。" class="headerlink" title="[强制] 常量必须使用 @const 标记，并包含说明和类型信息。"></a>[强制] 常量必须使用 <code>@const</code> 标记，并包含说明和类型信息。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 常量说明</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * @const</span></div><div class="line"><span class="comment"> * @type &#123;string&#125;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">var</span> REQUEST_URL = <span class="string">'myurl.do'</span>;</div></pre></td></tr></table></figure>
<h4 id="2-4-11-复杂类型注释"><a href="#2-4-11-复杂类型注释" class="headerlink" title="2.4.11 复杂类型注释"></a>2.4.11 复杂类型注释</h4><h5 id="建议-对于类型未定义的复杂结构的注释，可以使用-typedef-标识来定义。"><a href="#建议-对于类型未定义的复杂结构的注释，可以使用-typedef-标识来定义。" class="headerlink" title="[建议] 对于类型未定义的复杂结构的注释，可以使用 @typedef 标识来定义。"></a>[建议] 对于类型未定义的复杂结构的注释，可以使用 <code>@typedef</code> 标识来定义。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// `namespaceA~` 可以换成其它 namepaths 前缀，目的是为了生成文档中能显示 `@typedef` 定义的类型和链接。</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 服务器</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * @typedef &#123;Object&#125; namespaceA~Server</span></div><div class="line"><span class="comment"> * @property &#123;string&#125; host 主机</span></div><div class="line"><span class="comment"> * @property &#123;number&#125; port 端口</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 服务器列表</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * @type &#123;Array.&lt;namespaceA~Server&gt;&#125;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">var</span> servers = [</div><div class="line">    &#123;</div><div class="line">        host: <span class="string">'1.2.3.4'</span>,</div><div class="line">        port: <span class="number">8080</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        host: <span class="string">'1.2.3.5'</span>,</div><div class="line">        port: <span class="number">8081</span></div><div class="line">    &#125;</div><div class="line">];</div></pre></td></tr></table></figure>
<h4 id="2-4-12-AMD-模块注释"><a href="#2-4-12-AMD-模块注释" class="headerlink" title="2.4.12 AMD 模块注释"></a>2.4.12 AMD 模块注释</h4><h5 id="强制-AMD-模块使用-module-或-exports-标识。"><a href="#强制-AMD-模块使用-module-或-exports-标识。" class="headerlink" title="[强制] AMD 模块使用 @module 或 @exports 标识。"></a>[强制] AMD 模块使用 <code>@module</code> 或 <code>@exports</code> 标识。</h5><p>解释：</p>
<p>@exports 与 @module 都可以用来标识模块，区别在于 @module 可以省略模块名称。而只使用 @exports 时在 namepaths 中可以省略 module: 前缀。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">define(</div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * foo description</span></div><div class="line"><span class="comment">         *</span></div><div class="line"><span class="comment">         * @exports Foo</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        <span class="keyword">var</span> foo = &#123;</div><div class="line">            <span class="comment">// TODO</span></div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * baz description</span></div><div class="line"><span class="comment">         *</span></div><div class="line"><span class="comment">         * @return &#123;boolean&#125; return description</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        foo.baz = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">// TODO</span></div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> foo;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<p>也可以在 exports 变量前使用 @module 标识：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">define(</div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * module description.</span></div><div class="line"><span class="comment">         *</span></div><div class="line"><span class="comment">         * @module foo</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        <span class="keyword">var</span> exports = &#123;&#125;;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * bar description</span></div><div class="line"><span class="comment">         *</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        exports.bar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">// TODO</span></div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> exports;</div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<p>如果直接使用 factory 的 exports 参数，还可以：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * module description.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * @module</span></div><div class="line"><span class="comment"> */</span></div><div class="line">define(</div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">require, exports</span>) </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * bar description</span></div><div class="line"><span class="comment">         *</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        exports.bar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">// TODO</span></div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">return</span> exports;</div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<h5 id="强制-对于已使用-module-标识为-AMD模块-的引用，在-namepaths-中必须增加-module-作前缀。"><a href="#强制-对于已使用-module-标识为-AMD模块-的引用，在-namepaths-中必须增加-module-作前缀。" class="headerlink" title="[强制] 对于已使用 @module 标识为 AMD模块 的引用，在 namepaths 中必须增加 module: 作前缀。"></a>[强制] 对于已使用 <code>@module</code> 标识为 AMD模块 的引用，在 <code>namepaths</code> 中必须增加 <code>module:</code> 作前缀。</h5><p>解释：</p>
<p>namepaths 没有 module: 前缀时，生成的文档中将无法正确生成链接。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 点击处理</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * @fires module:Select#change</span></div><div class="line"><span class="comment"> * @private</span></div><div class="line"><span class="comment"> */</span></div><div class="line">Select.prototype.clickHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 值变更时触发</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * @event module:Select#change</span></div><div class="line"><span class="comment">     * @param &#123;Object&#125; e e描述</span></div><div class="line"><span class="comment">     * @param &#123;string&#125; e.before before描述</span></div><div class="line"><span class="comment">     * @param &#123;string&#125; e.after after描述</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">this</span>.fire(</div><div class="line">        <span class="string">'change'</span>,</div><div class="line">        &#123;</div><div class="line">            before: <span class="string">'foo'</span>,</div><div class="line">            after: <span class="string">'bar'</span></div><div class="line">        &#125;</div><div class="line">    );</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h5 id="建议-对于类定义的模块，可以使用-alias-标识构建函数。"><a href="#建议-对于类定义的模块，可以使用-alias-标识构建函数。" class="headerlink" title="[建议] 对于类定义的模块，可以使用 @alias 标识构建函数。"></a>[建议] 对于类定义的模块，可以使用 <code>@alias</code> 标识构建函数。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * A module representing a jacket.</span></div><div class="line"><span class="comment"> * @module jacket</span></div><div class="line"><span class="comment"> */</span></div><div class="line">define(</div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * @class</span></div><div class="line"><span class="comment">         * @alias module:jacket</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        <span class="keyword">var</span> Jacket = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> Jacket;</div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<h5 id="建议-多模块定义时，可以使用-exports-标识各个模块。"><a href="#建议-多模块定义时，可以使用-exports-标识各个模块。" class="headerlink" title="[建议] 多模块定义时，可以使用 @exports 标识各个模块。"></a>[建议] 多模块定义时，可以使用 <code>@exports</code> 标识各个模块。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// one module</span></div><div class="line">define(<span class="string">'html/utils'</span>,</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Utility functions to ease working with DOM elements.</span></div><div class="line"><span class="comment">     * @exports html/utils</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> exports = &#123;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> exports;</div><div class="line">    &#125;</div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">// another module</span></div><div class="line">define(<span class="string">'tag'</span>,</div><div class="line">    <span class="comment">/** @exports tag */</span></div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> exports = &#123;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> exports;</div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<h5 id="建议-对于-exports-为-Object-的模块，可以使用-namespace标识。"><a href="#建议-对于-exports-为-Object-的模块，可以使用-namespace标识。" class="headerlink" title="[建议] 对于 exports 为 Object 的模块，可以使用@namespace标识。"></a>[建议] 对于 exports 为 Object 的模块，可以使用<code>@namespace</code>标识。</h5><p>解释：</p>
<p>使用 @namespace 而不是 @module 或 @exports 时，对模块的引用可以省略 module: 前缀。</p>
<h5 id="建议-对于-exports-为类名的模块，使用-class-和-exports-标识。"><a href="#建议-对于-exports-为类名的模块，使用-class-和-exports-标识。" class="headerlink" title="[建议] 对于 exports 为类名的模块，使用 @class 和 @exports 标识。"></a>[建议] 对于 exports 为类名的模块，使用 <code>@class</code> 和 <code>@exports</code> 标识。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 只使用 @class Bar 时，类方法和属性都必须增加 @name Bar#methodName 来标识，与 @exports 配合可以免除这一麻烦，并且在引用时可以省去 module: 前缀。</span></div><div class="line"><span class="comment">// 另外需要注意类名需要使用 var 定义的方式。</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Bar description</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * @see foo</span></div><div class="line"><span class="comment"> * @exports  Bar</span></div><div class="line"><span class="comment"> * @class</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">var</span> Bar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// TODO</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * baz description</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * @return &#123;(string|Array)&#125; return description</span></div><div class="line"><span class="comment"> */</span></div><div class="line">Bar.prototype.baz = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// TODO</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="2-4-13-细节注释"><a href="#2-4-13-细节注释" class="headerlink" title="2.4.13 细节注释"></a>2.4.13 细节注释</h4><p>对于内部实现、不容易理解的逻辑说明、摘要信息等，我们可能需要编写细节注释。</p>
<h4 id="建议-细节注释遵循单行注释的格式。说明必须换行时，每行是一个单行注释的起始。"><a href="#建议-细节注释遵循单行注释的格式。说明必须换行时，每行是一个单行注释的起始。" class="headerlink" title="[建议] 细节注释遵循单行注释的格式。说明必须换行时，每行是一个单行注释的起始。"></a>[建议] 细节注释遵循单行注释的格式。说明必须换行时，每行是一个单行注释的起始。</h4><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">p1, p2, opt_p3</span>) </span>&#123;</div><div class="line">    <span class="comment">// 这里对具体内部逻辑进行说明</span></div><div class="line">    <span class="comment">// 说明太长需要换行</span></div><div class="line">    <span class="keyword">for</span> (...) &#123;</div><div class="line">        ....</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="强制-有时我们会使用一些特殊标记进行说明。特殊标记必须使用单行注释的形式。下面列举了一些常用标记："><a href="#强制-有时我们会使用一些特殊标记进行说明。特殊标记必须使用单行注释的形式。下面列举了一些常用标记：" class="headerlink" title="[强制] 有时我们会使用一些特殊标记进行说明。特殊标记必须使用单行注释的形式。下面列举了一些常用标记："></a>[强制] 有时我们会使用一些特殊标记进行说明。特殊标记必须使用单行注释的形式。下面列举了一些常用标记：</h5><p>解释：</p>
<ol>
<li>TODO: 有功能待实现。此时需要对将要实现的功能进行简单说明。</li>
<li>FIXME: 该处代码运行没问题，但可能由于时间赶或者其他原因，需要修正。此时需要对如何修正进行简单说明。</li>
<li>HACK: 为修正某些问题而写的不太好或者使用了某些诡异手段的代码。此时需要对思路或诡异手段进行描述。</li>
<li>XXX: 该处存在陷阱。此时需要对陷阱进行描述。</li>
</ol>
<h2 id="3-语言特性"><a href="#3-语言特性" class="headerlink" title="3 语言特性"></a>3 语言特性</h2><h3 id="3-1-变量"><a href="#3-1-变量" class="headerlink" title="3.1 变量"></a>3.1 变量</h3><h5 id="强制-变量、函数在使用前必须先定义。"><a href="#强制-变量、函数在使用前必须先定义。" class="headerlink" title="[强制] 变量、函数在使用前必须先定义。"></a>[强制] 变量、函数在使用前必须先定义。</h5><p>解释：</p>
<p>不通过 var 定义变量将导致变量污染全局环境。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> name = <span class="string">'MyName'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">name = <span class="string">'MyName'</span>;</div></pre></td></tr></table></figure>
<p>原则上不建议使用全局变量，对于已有的全局变量或第三方框架引入的全局变量，需要根据检查工具的语法标识。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* globals jQuery */</span></div><div class="line"><span class="keyword">var</span> element = jQuery(<span class="string">'#element-id'</span>);</div></pre></td></tr></table></figure>
<h5 id="强制-每个-var-只能声明一个变量。"><a href="#强制-每个-var-只能声明一个变量。" class="headerlink" title="[强制] 每个 var 只能声明一个变量。"></a>[强制] 每个 <code>var</code> 只能声明一个变量。</h5><p>解释：</p>
<p>一个 <code>var</code> 声明多个变量，容易导致较长的行长度，并且在修改时容易造成逗号和分号的混淆。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> hangModules = [];</div><div class="line"><span class="keyword">var</span> missModules = [];</div><div class="line"><span class="keyword">var</span> visited = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> hangModules = [],</div><div class="line">    missModules = [],</div><div class="line">    visited = &#123;&#125;;</div></pre></td></tr></table></figure>
<h5 id="强制-变量必须-即用即声明，不得在函数或其它形式的代码块起始位置统一声明所有变量。"><a href="#强制-变量必须-即用即声明，不得在函数或其它形式的代码块起始位置统一声明所有变量。" class="headerlink" title="[强制] 变量必须 即用即声明，不得在函数或其它形式的代码块起始位置统一声明所有变量。"></a>[强制] 变量必须 <code>即用即声明</code>，不得在函数或其它形式的代码块起始位置统一声明所有变量。</h5><p>解释：</p>
<p>变量声明与使用的距离越远，出现的跨度越大，代码的阅读与维护成本越高。虽然JavaScript的变量是函数作用域，还是应该根据编程中的意图，缩小变量出现的距离空间。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">kv2List</span>(<span class="params">source</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> list = [];</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> source) &#123;</div><div class="line">        <span class="keyword">if</span> (source.hasOwnProperty(key)) &#123;</div><div class="line">            <span class="keyword">var</span> item = &#123;</div><div class="line">                k: key,</div><div class="line">                v: source[key]</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            list.push(item);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> list;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">kv2List</span>(<span class="params">source</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> list = [];</div><div class="line">    <span class="keyword">var</span> key;</div><div class="line">    <span class="keyword">var</span> item;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> source) &#123;</div><div class="line">        <span class="keyword">if</span> (source.hasOwnProperty(key)) &#123;</div><div class="line">            item = &#123;</div><div class="line">                k: key,</div><div class="line">                v: source[key]</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            list.push(item);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> list;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-2-条件"><a href="#3-2-条件" class="headerlink" title="3.2 条件"></a>3.2 条件</h3><h5 id="强制-在-Equality-Expression-中使用类型严格的-。仅当判断-null-或-undefined-时，允许使用-null。"><a href="#强制-在-Equality-Expression-中使用类型严格的-。仅当判断-null-或-undefined-时，允许使用-null。" class="headerlink" title="[强制] 在 Equality Expression 中使用类型严格的 ===。仅当判断 null 或 undefined 时，允许使用 == null。"></a>[强制] 在 Equality Expression 中使用类型严格的 <code>===</code>。仅当判断 <code>null</code> 或 <code>undefined</code> 时，允许使用 <code>== null</code>。</h5><p>解释：</p>
<p>使用 <code>===</code> 可以避免等于判断中隐式的类型转换。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (age === <span class="number">30</span>) &#123;</div><div class="line">    <span class="comment">// ......</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (age == <span class="number">30</span>) &#123;</div><div class="line">    <span class="comment">// ......</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="建议-尽可能使用简洁的表达式。"><a href="#建议-尽可能使用简洁的表达式。" class="headerlink" title="[建议] 尽可能使用简洁的表达式。"></a>[建议] 尽可能使用简洁的表达式。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 字符串为空</span></div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (!name) &#123;</div><div class="line">    <span class="comment">// ......</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (name === <span class="string">''</span>) &#123;</div><div class="line">    <span class="comment">// ......</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 字符串非空</span></div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (name) &#123;</div><div class="line">    <span class="comment">// ......</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (name !== <span class="string">''</span>) &#123;</div><div class="line">    <span class="comment">// ......</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 数组非空</span></div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (collection.length) &#123;</div><div class="line">    <span class="comment">// ......</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (collection.length &gt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="comment">// ......</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 布尔不成立</span></div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (!notTrue) &#123;</div><div class="line">    <span class="comment">// ......</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (notTrue === <span class="literal">false</span>) &#123;</div><div class="line">    <span class="comment">// ......</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// null 或 undefined</span></div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">if</span> (noValue == <span class="literal">null</span>) &#123;</div><div class="line">  <span class="comment">// ......</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">if</span> (noValue === <span class="literal">null</span> || <span class="keyword">typeof</span> noValue === <span class="string">'undefined'</span>) &#123;</div><div class="line">  <span class="comment">// ......</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="建议-按执行频率排列分支的顺序。"><a href="#建议-按执行频率排列分支的顺序。" class="headerlink" title="[建议] 按执行频率排列分支的顺序。"></a>[建议] 按执行频率排列分支的顺序。</h5><p>解释：</p>
<p>按执行频率排列分支的顺序好处是：</p>
<ol>
<li>阅读的人容易找到最常见的情况，增加可读性。</li>
<li>提高执行效率。</li>
</ol>
<h5 id="建议-对于相同变量或表达式的多值条件，用-switch-代替-if。"><a href="#建议-对于相同变量或表达式的多值条件，用-switch-代替-if。" class="headerlink" title="[建议] 对于相同变量或表达式的多值条件，用 switch 代替 if。"></a>[建议] 对于相同变量或表达式的多值条件，用 <code>switch</code> 代替 <code>if</code>。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">switch</span> (<span class="keyword">typeof</span> variable) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'object'</span>:</div><div class="line">        <span class="comment">// ......</span></div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> <span class="string">'number'</span>:</div><div class="line">    <span class="keyword">case</span> <span class="string">'boolean'</span>:</div><div class="line">    <span class="keyword">case</span> <span class="string">'string'</span>:</div><div class="line">        <span class="comment">// ......</span></div><div class="line">        <span class="keyword">break</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> type = <span class="keyword">typeof</span> variable;</div><div class="line"><span class="keyword">if</span> (type === <span class="string">'object'</span>) &#123;</div><div class="line">    <span class="comment">// ......</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">'number'</span> || type === <span class="string">'boolean'</span> || type === <span class="string">'string'</span>) &#123;</div><div class="line">    <span class="comment">// ......</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="建议-如果函数或全局中的-else-块后没有任何语句，可以删除-else。"><a href="#建议-如果函数或全局中的-else-块后没有任何语句，可以删除-else。" class="headerlink" title="[建议] 如果函数或全局中的 else 块后没有任何语句，可以删除 else。"></a>[建议] 如果函数或全局中的 <code>else</code> 块后没有任何语句，可以删除 <code>else</code>。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (name) &#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="string">'unnamed'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (name) &#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'unnamed'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-3-循环"><a href="#3-3-循环" class="headerlink" title="3.3 循环"></a>3.3 循环</h3><h5 id="建议-不要在循环体中包含函数表达式，事先将函数提取到循环体外。"><a href="#建议-不要在循环体中包含函数表达式，事先将函数提取到循环体外。" class="headerlink" title="[建议] 不要在循环体中包含函数表达式，事先将函数提取到循环体外。"></a>[建议] 不要在循环体中包含函数表达式，事先将函数提取到循环体外。</h5><p>解释：</p>
<p>循环体中的函数表达式，运行过程中会生成循环次数个函数对象。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clicker</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// ......</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = elements.length; i &lt; len; i++) &#123;</div><div class="line">    <span class="keyword">var</span> element = elements[i];</div><div class="line">    addListener(element, <span class="string">'click'</span>, clicker);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = elements.length; i &lt; len; i++) &#123;</div><div class="line">    <span class="keyword">var</span> element = elements[i];</div><div class="line">    addListener(element, <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="建议-对循环内多次使用的不变值，在循环外用变量缓存。"><a href="#建议-对循环内多次使用的不变值，在循环外用变量缓存。" class="headerlink" title="[建议] 对循环内多次使用的不变值，在循环外用变量缓存。"></a>[建议] 对循环内多次使用的不变值，在循环外用变量缓存。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> width = wrap.offsetWidth + <span class="string">'px'</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = elements.length; i &lt; len; i++) &#123;</div><div class="line">    <span class="keyword">var</span> element = elements[i];</div><div class="line">    element.style.width = width;</div><div class="line">    <span class="comment">// ......</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = elements.length; i &lt; len; i++) &#123;</div><div class="line">    <span class="keyword">var</span> element = elements[i];</div><div class="line">    element.style.width = wrap.offsetWidth + <span class="string">'px'</span>;</div><div class="line">    <span class="comment">// ......</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="建议-对有序集合进行遍历时，缓存-length。"><a href="#建议-对有序集合进行遍历时，缓存-length。" class="headerlink" title="[建议] 对有序集合进行遍历时，缓存 length。"></a>[建议] 对有序集合进行遍历时，缓存 <code>length</code>。</h5><p>解释：</p>
<p>虽然现代浏览器都对数组长度进行了缓存，但对于一些宿主对象和老旧浏览器的数组对象，在每次 <code>length</code> 访问时会动态计算元素个数，此时缓存 <code>length</code> 能有效提高程序性能。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = elements.length; i &lt; len; i++) &#123;</div><div class="line">    <span class="keyword">var</span> element = elements[i];</div><div class="line">    <span class="comment">// ......</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="建议-对有序集合进行顺序无关的遍历时，使用逆序遍历。"><a href="#建议-对有序集合进行顺序无关的遍历时，使用逆序遍历。" class="headerlink" title="[建议] 对有序集合进行顺序无关的遍历时，使用逆序遍历。"></a>[建议] 对有序集合进行顺序无关的遍历时，使用逆序遍历。</h5><p>解释：</p>
<p>逆序遍历可以节省变量，代码比较优化。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> len = elements.length;</div><div class="line"><span class="keyword">while</span> (len--) &#123;</div><div class="line">    <span class="keyword">var</span> element = elements[len];</div><div class="line">    <span class="comment">// ......</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-4-类型"><a href="#3-4-类型" class="headerlink" title="3.4 类型"></a>3.4 类型</h3><h4 id="3-4-1-类型检测"><a href="#3-4-1-类型检测" class="headerlink" title="3.4.1 类型检测"></a>3.4.1 类型检测</h4><h5 id="建议-类型检测优先使用-typeof。对象类型检测使用-instanceof。null-或-undefined-的检测使用-null。"><a href="#建议-类型检测优先使用-typeof。对象类型检测使用-instanceof。null-或-undefined-的检测使用-null。" class="headerlink" title="[建议] 类型检测优先使用 typeof。对象类型检测使用 instanceof。null 或 undefined 的检测使用 == null。"></a>[建议] 类型检测优先使用 <code>typeof</code>。对象类型检测使用 <code>instanceof</code>。<code>null</code> 或 <code>undefined</code> 的检测使用 <code>== null</code>。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// string</span></div><div class="line"><span class="keyword">typeof</span> variable === <span class="string">'string'</span></div><div class="line"></div><div class="line"><span class="comment">// number</span></div><div class="line"><span class="keyword">typeof</span> variable === <span class="string">'number'</span></div><div class="line"></div><div class="line"><span class="comment">// boolean</span></div><div class="line"><span class="keyword">typeof</span> variable === <span class="string">'boolean'</span></div><div class="line"></div><div class="line"><span class="comment">// Function</span></div><div class="line"><span class="keyword">typeof</span> variable === <span class="string">'function'</span></div><div class="line"></div><div class="line"><span class="comment">// Object</span></div><div class="line"><span class="keyword">typeof</span> variable === <span class="string">'object'</span></div><div class="line"></div><div class="line"><span class="comment">// RegExp</span></div><div class="line">variable <span class="keyword">instanceof</span> <span class="built_in">RegExp</span></div><div class="line"></div><div class="line"><span class="comment">// Array</span></div><div class="line">variable <span class="keyword">instanceof</span> <span class="built_in">Array</span></div><div class="line"></div><div class="line"><span class="comment">// null</span></div><div class="line">variable === <span class="literal">null</span></div><div class="line"></div><div class="line"><span class="comment">// null or undefined</span></div><div class="line">variable == <span class="literal">null</span></div><div class="line"></div><div class="line"><span class="comment">// undefined</span></div><div class="line"><span class="keyword">typeof</span> variable === <span class="string">'undefined'</span></div></pre></td></tr></table></figure>
<h4 id="3-4-2-类型转换"><a href="#3-4-2-类型转换" class="headerlink" title="3.4.2 类型转换"></a>3.4.2 类型转换</h4><h5 id="建议-转换成-string-时，使用-39-39-。"><a href="#建议-转换成-string-时，使用-39-39-。" class="headerlink" title="[建议] 转换成 string 时，使用 + &#39;&#39;。"></a>[建议] 转换成 <code>string</code> 时，使用 <code>+ &#39;&#39;</code>。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line">num + <span class="string">''</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">new</span> <span class="built_in">String</span>(num);</div><div class="line">num.toString();</div><div class="line"><span class="built_in">String</span>(num);</div></pre></td></tr></table></figure>
<h5 id="建议-转换成-number-时，通常使用-。"><a href="#建议-转换成-number-时，通常使用-。" class="headerlink" title="[建议] 转换成 number 时，通常使用 +。"></a>[建议] 转换成 <code>number</code> 时，通常使用 <code>+</code>。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line">+str;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="built_in">Number</span>(str);</div></pre></td></tr></table></figure>
<h5 id="建议-string-转换成-number，要转换的字符串结尾包含非数字并期望忽略时，使用-parseInt。"><a href="#建议-string-转换成-number，要转换的字符串结尾包含非数字并期望忽略时，使用-parseInt。" class="headerlink" title="[建议] string 转换成 number，要转换的字符串结尾包含非数字并期望忽略时，使用 parseInt。"></a>[建议] <code>string</code> 转换成 <code>number</code>，要转换的字符串结尾包含非数字并期望忽略时，使用 <code>parseInt</code>。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> width = <span class="string">'200px'</span>;</div><div class="line"><span class="built_in">parseInt</span>(width, <span class="number">10</span>);</div></pre></td></tr></table></figure>
<h5 id="强制-使用-parseInt-时，必须指定进制。"><a href="#强制-使用-parseInt-时，必须指定进制。" class="headerlink" title="[强制] 使用 parseInt 时，必须指定进制。"></a>[强制] 使用 <code>parseInt</code> 时，必须指定进制。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="built_in">parseInt</span>(str, <span class="number">10</span>);</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="built_in">parseInt</span>(str);</div></pre></td></tr></table></figure>
<h5 id="建议-转换成-boolean-时，使用-。"><a href="#建议-转换成-boolean-时，使用-。" class="headerlink" title="[建议] 转换成 boolean 时，使用 !!。"></a>[建议] 转换成 <code>boolean</code> 时，使用 <code>!!</code>。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num = <span class="number">3.14</span>;</div><div class="line">!!num;</div></pre></td></tr></table></figure>
<h5 id="建议-number-去除小数点，使用-Math-floor-Math-round-Math-ceil，不使用-parseInt。"><a href="#建议-number-去除小数点，使用-Math-floor-Math-round-Math-ceil，不使用-parseInt。" class="headerlink" title="[建议] number 去除小数点，使用 Math.floor / Math.round / Math.ceil，不使用 parseInt。"></a>[建议] <code>number</code> 去除小数点，使用 <code>Math.floor</code> / <code>Math.round</code> / <code>Math.ceil</code>，不使用 <code>parseInt</code>。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> num = <span class="number">3.14</span>;</div><div class="line"><span class="built_in">Math</span>.ceil(num);</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> num = <span class="number">3.14</span>;</div><div class="line"><span class="built_in">parseInt</span>(num, <span class="number">10</span>);</div></pre></td></tr></table></figure>
<h3 id="3-5-字符串"><a href="#3-5-字符串" class="headerlink" title="3.5 字符串"></a>3.5 字符串</h3><h5 id="强制-字符串开头和结束使用单引号-39-。"><a href="#强制-字符串开头和结束使用单引号-39-。" class="headerlink" title="[强制] 字符串开头和结束使用单引号 &#39;。"></a>[强制] 字符串开头和结束使用单引号 <code>&#39;</code>。</h5><p>解释：</p>
<ol>
<li>输入单引号不需要按住 <code>shift</code>，方便输入。</li>
<li>实际使用中，字符串经常用来拼接 HTML。为方便 HTML 中包含双引号而不需要转义写法。</li>
</ol>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'我是一个字符串'</span>;</div><div class="line"><span class="keyword">var</span> html = <span class="string">'&lt;div class="cls"&gt;拼接HTML可以省去双引号转义&lt;/div&gt;'</span>;</div></pre></td></tr></table></figure>
<h5 id="建议-使用-数组-或-拼接字符串。"><a href="#建议-使用-数组-或-拼接字符串。" class="headerlink" title="[建议] 使用 数组 或 + 拼接字符串。"></a>[建议] 使用 <code>数组</code> 或 <code>+</code> 拼接字符串。</h5><p>解释：</p>
<ol>
<li>使用 <code>+</code> 拼接字符串，如果拼接的全部是 StringLiteral，压缩工具可以对其进行自动合并的优化。所以，静态字符串建议使用 <code>+</code> 拼接。</li>
<li>在现代浏览器下，使用 <code>+</code> 拼接字符串，性能较数组的方式要高。</li>
<li>如需要兼顾老旧浏览器，应尽量使用数组拼接字符串。</li>
</ol>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用数组拼接字符串</span></div><div class="line"><span class="keyword">var</span> str = [</div><div class="line">    <span class="comment">// 推荐换行开始并缩进开始第一个字符串, 对齐代码, 方便阅读.</span></div><div class="line">    <span class="string">'&lt;ul&gt;'</span>,</div><div class="line">        <span class="string">'&lt;li&gt;第一项&lt;/li&gt;'</span>,</div><div class="line">        <span class="string">'&lt;li&gt;第二项&lt;/li&gt;'</span>,</div><div class="line">    <span class="string">'&lt;/ul&gt;'</span></div><div class="line">].join(<span class="string">''</span>);</div><div class="line"></div><div class="line"><span class="comment">// 使用 `+` 拼接字符串</span></div><div class="line"><span class="keyword">var</span> str2 = <span class="string">''</span> <span class="comment">// 建议第一个为空字符串, 第二个换行开始并缩进开始, 对齐代码, 方便阅读</span></div><div class="line">    + <span class="string">'&lt;ul&gt;'</span>,</div><div class="line">    +    <span class="string">'&lt;li&gt;第一项&lt;/li&gt;'</span>,</div><div class="line">    +    <span class="string">'&lt;li&gt;第二项&lt;/li&gt;'</span>,</div><div class="line">    + <span class="string">'&lt;/ul&gt;'</span>;</div></pre></td></tr></table></figure>
<h5 id="建议-使用字符串拼接的方式生成HTML，需要根据语境进行合理的转义。"><a href="#建议-使用字符串拼接的方式生成HTML，需要根据语境进行合理的转义。" class="headerlink" title="[建议] 使用字符串拼接的方式生成HTML，需要根据语境进行合理的转义。"></a>[建议] 使用字符串拼接的方式生成HTML，需要根据语境进行合理的转义。</h5><p>解释：</p>
<p>在 <code>JavaScript</code> 中拼接，并且最终将输出到页面中的字符串，需要进行合理转义，以防止安全漏洞。下面的示例代码为场景说明，不能直接运行。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// HTML 转义</span></div><div class="line"><span class="keyword">var</span> str = <span class="string">'&lt;p&gt;'</span> + htmlEncode(content) + <span class="string">'&lt;/p&gt;'</span>;</div><div class="line"></div><div class="line"><span class="comment">// HTML 转义</span></div><div class="line"><span class="keyword">var</span> str = <span class="string">'&lt;input type="text" value="'</span> + htmlEncode(value) + <span class="string">'"&gt;'</span>;</div><div class="line"></div><div class="line"><span class="comment">// URL 转义</span></div><div class="line"><span class="keyword">var</span> str = <span class="string">'&lt;a href="/?key='</span> + htmlEncode(urlEncode(value)) + <span class="string">'"&gt;link&lt;/a&gt;'</span>;</div><div class="line"></div><div class="line"><span class="comment">// JavaScript字符串 转义 + HTML 转义</span></div><div class="line"><span class="keyword">var</span> str = <span class="string">'&lt;button onclick="check(\''</span> + htmlEncode(strLiteral(name)) + <span class="string">'\')"&gt;提交&lt;/button&gt;'</span>;</div></pre></td></tr></table></figure>
<h5 id="建议-复杂的数据到视图字符串的转换过程，选用一种模板引擎。"><a href="#建议-复杂的数据到视图字符串的转换过程，选用一种模板引擎。" class="headerlink" title="[建议] 复杂的数据到视图字符串的转换过程，选用一种模板引擎。"></a>[建议] 复杂的数据到视图字符串的转换过程，选用一种模板引擎。</h5><p>解释：</p>
<p>使用模板引擎有如下好处：</p>
<ol>
<li>在开发过程中专注于数据，将视图生成的过程由另外一个层级维护，使程序逻辑结构更清晰。</li>
<li>优秀的模板引擎，通过模板编译技术和高质量的编译产物，能获得比手工拼接字符串更高的性能。</li>
<li>模板引擎能方便的对动态数据进行相应的转义，部分模板引擎默认进行HTML转义，安全性更好。</li>
</ol>
<ul>
<li>artTemplate: 体积较小，在所有环境下性能高，语法灵活。</li>
<li>dot.js: 体积小，在现代浏览器下性能高，语法灵活。</li>
<li>etpl: 体积较小，在所有环境下性能高，模板复用性高，语法灵活。</li>
<li>handlebars: 体积大，在所有环境下性能高，扩展性高。</li>
<li>hogon: 体积小，在现代浏览器下性能高。</li>
<li>nunjucks: 体积较大，性能一般，模板复用性高。</li>
</ul>
<h3 id="3-6-对象"><a href="#3-6-对象" class="headerlink" title="3.6 对象"></a>3.6 对象</h3><h5 id="强制-使用对象字面量-创建新-Object。"><a href="#强制-使用对象字面量-创建新-Object。" class="headerlink" title="[强制] 使用对象字面量 {} 创建新 Object。"></a>[强制] 使用对象字面量 <code>{}</code> 创建新 <code>Object</code>。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</div></pre></td></tr></table></figure>
<h5 id="建议-对象创建时，如果一个对象的所有-属性-均可以不添加引号，建议所有-属性-不添加引号。"><a href="#建议-对象创建时，如果一个对象的所有-属性-均可以不添加引号，建议所有-属性-不添加引号。" class="headerlink" title="[建议] 对象创建时，如果一个对象的所有 属性 均可以不添加引号，建议所有 属性 不添加引号。"></a>[建议] 对象创建时，如果一个对象的所有 <code>属性</code> 均可以不添加引号，建议所有 <code>属性</code> 不添加引号。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> info = &#123;</div><div class="line">    name: <span class="string">'someone'</span>,</div><div class="line">    age: <span class="number">28</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h5 id="建议-对象创建时，如果任何一个-属性-需要添加引号，则所有-属性-建议添加-39-。"><a href="#建议-对象创建时，如果任何一个-属性-需要添加引号，则所有-属性-建议添加-39-。" class="headerlink" title="[建议] 对象创建时，如果任何一个 属性 需要添加引号，则所有 属性 建议添加 &#39;。"></a>[建议] 对象创建时，如果任何一个 <code>属性</code> 需要添加引号，则所有 <code>属性</code> 建议添加 <code>&#39;</code>。</h5><p>解释：</p>
<p>如果属性不符合 Identifier 和 NumberLiteral 的形式，就需要以 StringLiteral 的形式提供。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> info = &#123;</div><div class="line">    <span class="string">'name'</span>: <span class="string">'someone'</span>,</div><div class="line">    <span class="string">'age'</span>: <span class="number">28</span>,</div><div class="line">    <span class="string">'more-info'</span>: <span class="string">'...'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> info = &#123;</div><div class="line">    name: <span class="string">'someone'</span>,</div><div class="line">    age: <span class="number">28</span>,</div><div class="line">    <span class="string">'more-info'</span>: <span class="string">'...'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h5 id="强制-不允许修改和扩展任何原生对象和宿主对象的原型。"><a href="#强制-不允许修改和扩展任何原生对象和宿主对象的原型。" class="headerlink" title="[强制] 不允许修改和扩展任何原生对象和宿主对象的原型。"></a>[强制] 不允许修改和扩展任何原生对象和宿主对象的原型。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 以下行为绝对禁止</span></div><div class="line"><span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h5 id="建议-属性访问时，尽量使用-。"><a href="#建议-属性访问时，尽量使用-。" class="headerlink" title="[建议] 属性访问时，尽量使用 .。"></a>[建议] 属性访问时，尽量使用 <code>.</code>。</h5><p>解释：</p>
<p>属性名符合 Identifier 的要求，就可以通过 <code>.</code> 来访问，否则就只能通过 <code>[expr]</code> 方式访问。</p>
<p>通常在 JavaScript 中声明的对象，属性命名是使用 Camel 命名法，用 <code>.</code> 来访问更清晰简洁。部分特殊的属性（比如来自后端的 JSON ），可能采用不寻常的命名方式，可以通过 <code>[expr]</code> 方式访问。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">info.age;</div><div class="line">info[<span class="string">'more-info'</span>];</div></pre></td></tr></table></figure>
<h5 id="建议-for-in-遍历对象时-使用-hasOwnProperty-过滤掉原型中的属性。"><a href="#建议-for-in-遍历对象时-使用-hasOwnProperty-过滤掉原型中的属性。" class="headerlink" title="[建议] for in 遍历对象时, 使用 hasOwnProperty 过滤掉原型中的属性。"></a>[建议] <code>for in</code> 遍历对象时, 使用 <code>hasOwnProperty</code> 过滤掉原型中的属性。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> newInfo = &#123;&#125;;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> info) &#123;</div><div class="line">    <span class="keyword">if</span> (info.hasOwnProperty(key)) &#123;</div><div class="line">        newInfo[key] = info[key];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-7-数组"><a href="#3-7-数组" class="headerlink" title="3.7 数组"></a>3.7 数组</h3><h5 id="强制-使用数组字面量-创建新数组，除非想要创建的是指定长度的数组。"><a href="#强制-使用数组字面量-创建新数组，除非想要创建的是指定长度的数组。" class="headerlink" title="[强制] 使用数组字面量 [] 创建新数组，除非想要创建的是指定长度的数组。"></a>[强制] 使用数组字面量 <code>[]</code> 创建新数组，除非想要创建的是指定长度的数组。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> arr = [];</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</div></pre></td></tr></table></figure>
<h5 id="强制-遍历数组不使用-for-in。"><a href="#强制-遍历数组不使用-for-in。" class="headerlink" title="[强制] 遍历数组不使用 for in。"></a>[强制] 遍历数组不使用 <code>for in</code>。</h5><p>解释：</p>
<p>数组对象可能存在数字以外的属性, 这种情况下 <code>for in</code> 不会得到正确结果。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</div><div class="line"></div><div class="line"><span class="comment">// 这里仅作演示, 实际中应使用 Object 类型</span></div><div class="line">arr.other = <span class="string">'other things'</span>;</div><div class="line"></div><div class="line"><span class="comment">// 正确的遍历方式</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 错误的遍历方式</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> arr) &#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="建议-不因为性能的原因自己实现数组排序功能，尽量使用数组的-sort-方法。"><a href="#建议-不因为性能的原因自己实现数组排序功能，尽量使用数组的-sort-方法。" class="headerlink" title="[建议] 不因为性能的原因自己实现数组排序功能，尽量使用数组的 sort 方法。"></a>[建议] 不因为性能的原因自己实现数组排序功能，尽量使用数组的 <code>sort</code> 方法。</h5><p>解释：</p>
<p>自己实现的常规排序算法，在性能上并不优于数组默认的 <code>sort</code> 方法。以下两种场景可以自己实现排序：</p>
<ol>
<li>需要稳定的排序算法，达到严格一致的排序结果。</li>
<li>数据特点鲜明，适合使用桶排。</li>
</ol>
<h5 id="建议-清空数组使用-length-0。"><a href="#建议-清空数组使用-length-0。" class="headerlink" title="[建议] 清空数组使用 .length = 0。"></a>[建议] 清空数组使用 <code>.length = 0</code>。</h5><h3 id="3-8-函数"><a href="#3-8-函数" class="headerlink" title="3.8 函数"></a>3.8 函数</h3><h4 id="3-8-1-函数长度"><a href="#3-8-1-函数长度" class="headerlink" title="3.8.1 函数长度"></a>3.8.1 函数长度</h4><h5 id="建议-一个函数的长度控制在-50-行以内。"><a href="#建议-一个函数的长度控制在-50-行以内。" class="headerlink" title="[建议] 一个函数的长度控制在 50 行以内。"></a>[建议] 一个函数的长度控制在 <code>50</code> 行以内。</h5><p>解释：</p>
<p>将过多的逻辑单元混在一个大函数中，易导致难以维护。一个清晰易懂的函数应该完成单一的逻辑单元。复杂的操作应进一步抽取，通过函数的调用来体现流程。</p>
<p>特定算法等不可分割的逻辑允许例外。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">syncViewStateOnUserAction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (x.checked) &#123;</div><div class="line">        y.checked = <span class="literal">true</span>;</div><div class="line">        z.value = <span class="string">''</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        y.checked = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (a.value) &#123;</div><div class="line">        warning.innerText = <span class="string">''</span>;</div><div class="line">        submitButton.disabled = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        warning.innerText = <span class="string">'Please enter it'</span>;</div><div class="line">        submitButton.disabled = <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 直接阅读该函数会难以明确其主线逻辑，因此下方是一种更合理的表达方式：</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">syncViewStateOnUserAction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    syncXStateToView();</div><div class="line">    checkAAvailability();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">syncXStateToView</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    y.checked = x.checked;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (x.checked) &#123;</div><div class="line">        z.value = <span class="string">''</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAAvailability</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (a.value) &#123;</div><div class="line">        clearWarnignForA();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        displayWarningForAMissing();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-8-2-参数设计"><a href="#3-8-2-参数设计" class="headerlink" title="3.8.2 参数设计"></a>3.8.2 参数设计</h4><h5 id="建议-一个函数的参数控制在-6-个以内。"><a href="#建议-一个函数的参数控制在-6-个以内。" class="headerlink" title="[建议] 一个函数的参数控制在 6 个以内。"></a>[建议] 一个函数的参数控制在 <code>6</code> 个以内。</h5><p>解释：</p>
<p>除去不定长参数以外，函数具备不同逻辑意义的参数建议控制在 <code>6</code> 个以内，过多参数会导致维护难度增大。</p>
<p>某些情况下，如使用 AMD Loader 的 <code>require</code> 加载多个模块时，其 <code>callback</code> 可能会存在较多参数，因此对函数参数的个数不做强制限制。</p>
<h5 id="建议-通过-options-参数传递非数据输入型参数。"><a href="#建议-通过-options-参数传递非数据输入型参数。" class="headerlink" title="[建议] 通过 options 参数传递非数据输入型参数。"></a>[建议] 通过 <code>options</code> 参数传递非数据输入型参数。</h5><p>解释：</p>
<p>有些函数的参数并不是作为算法的输入，而是对算法的某些分支条件判断之用，此类参数建议通过一个 <code>options</code> 参数传递。</p>
<p>如下函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 移除某个元素</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * @param &#123;Node&#125; element 需要移除的元素</span></div><div class="line"><span class="comment"> * @param &#123;boolean&#125; removeEventListeners 是否同时将所有注册在元素上的事件移除</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeElement</span>(<span class="params">element, removeEventListeners</span>) </span>&#123;</div><div class="line">    element.parent.removeChild(element);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (removeEventListeners) &#123;</div><div class="line">        element.clearEventListeners();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以转换为下面的签名：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 移除某个元素</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * @param &#123;Node&#125; element 需要移除的元素</span></div><div class="line"><span class="comment"> * @param &#123;Object&#125; options 相关的逻辑配置</span></div><div class="line"><span class="comment"> * @param &#123;boolean&#125; options.removeEventListeners 是否同时将所有注册在元素上的事件移除</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeElement</span>(<span class="params">element, options</span>) </span>&#123;</div><div class="line">    element.parent.removeChild(element);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (options.removeEventListeners) &#123;</div><div class="line">        element.clearEventListeners();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种模式有几个显著的优势：</p>
<ul>
<li><code>boolean</code> 型的配置项具备名称，从调用的代码上更易理解其表达的逻辑意义。</li>
<li>当配置项有增长时，无需无休止地增加参数个数，不会出现 <code>removeElement(element, true, false, false, 3)</code> 这样难以理解的调用代码。</li>
<li>当部分配置参数可选时，多个参数的形式非常难处理重载逻辑，而使用一个 options 对象只需判断属性是否存在，实现得以简化。</li>
</ul>
<h4 id="3-8-3-闭包"><a href="#3-8-3-闭包" class="headerlink" title="3.8.3 闭包"></a>3.8.3 闭包</h4><h5 id="建议-在适当的时候将闭包内大对象置为-null。"><a href="#建议-在适当的时候将闭包内大对象置为-null。" class="headerlink" title="[建议] 在适当的时候将闭包内大对象置为 null。"></a>[建议] 在适当的时候将闭包内大对象置为 <code>null</code>。</h5><p>解释：</p>
<p>在 JavaScript 中，无需特别的关键词就可以使用闭包，一个函数可以任意访问在其定义的作用域外的变量。需要注意的是，函数的作用域是静态的，即在定义时决定，与调用的时机和方式没有任何关系。</p>
<p>闭包会阻止一些变量的垃圾回收，对于较老旧的 JavaScript 引擎，可能导致外部所有变量均无法回收。</p>
<p>首先一个较为明确的结论是，以下内容会影响到闭包内变量的回收：</p>
<ul>
<li>嵌套的函数中是否有使用该变量。</li>
<li>嵌套的函数中是否有 <strong>直接调用eval</strong>。</li>
<li>是否使用了 with 表达式。</li>
</ul>
<p>Chakra、V8 和 SpiderMonkey 将受以上因素的影响，表现出不尽相同又较为相似的回收策略，而 JScript.dll 和 Carakan 则完全没有这方面的优化，会完整保留整个 LexicalEnvironment 中的所有变量绑定，造成一定的内存消耗。</p>
<p>由于对闭包内变量有回收优化策略的 Chakra、V8 和 SpiderMonkey 引擎的行为较为相似，因此可以总结如下，当返回一个函数 <strong>fn</strong> 时：</p>
<ol>
<li>如果 <strong>fn</strong> 的 <code>[[Scope]]</code> 是 ObjectEnvironment（with 表达式生成 ObjectEnvironment，函数和 catch 表达式生成 DeclarativeEnvironment），则：<ol>
<li>如果是 V8 引擎，则退出全过程。</li>
<li>如果是 SpiderMonkey，则处理该 ObjectEnvironment 的外层 LexicalEnvironment。</li>
</ol>
</li>
<li>获取当前 LexicalEnvironment 下的所有类型为 Function 的对象，对于每一个 Function 对象，分析其 FunctionBody：<ol>
<li>如果 FunctionBody 中含有 <strong>直接调用 eval</strong>，则退出全过程。</li>
<li>否则得到所有的 Identifier。</li>
<li>对于每一个 Identifier，设其为 <strong>name</strong>，根据查找变量引用的规则，从 LexicalEnvironment 中找出名称为 <strong>name</strong> 的绑定 binding。</li>
<li>对 binding 添加 <strong>notSwap</strong> 属性，其值为 <code>true</code>。</li>
</ol>
</li>
<li>检查当前 LexicalEnvironment 中的每一个变量绑定，如果该绑定有 <strong>notSwap</strong> 属性且值为 <code>true</code>，则：<ol>
<li>如果是 V8 引擎，删除该绑定。</li>
<li>如果是 SpiderMonkey，将该绑定的值设为 <code>undefined</code>，将删除 <strong>notSwap</strong> 属性。</li>
</ol>
</li>
</ol>
<p>对于 Chakra 引擎，暂无法得知是按 V8 的模式还是按 SpiderMonkey 的模式进行。</p>
<p>如果有 <strong>非常庞大</strong> 的对象，且预计会在 <strong>老旧的引擎</strong> 中执行，则使用闭包时，注意将闭包不需要的对象置为空引用。</p>
<h5 id="建议-使用-IIFE-避免-Lift-效应。"><a href="#建议-使用-IIFE-避免-Lift-效应。" class="headerlink" title="[建议] 使用 IIFE 避免 Lift 效应。"></a>[建议] 使用 <code>IIFE</code> 避免 <code>Lift 效应</code>。</h5><p>解释：</p>
<p>在引用函数外部变量时，函数执行时外部变量的值由运行时决定而非定义时，最典型的场景如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tasks = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">    tasks[tasks.length] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Current cursor is at '</span> + i);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> len = tasks.length;</div><div class="line"><span class="keyword">while</span> (len--) &#123;</div><div class="line">    tasks[len]();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上代码对 tasks 中的函数的执行均会输出 <code>Current cursor is at 5</code>，往往不符合预期。</p>
<p>此现象称为 <strong>Lift 效应</strong> 。解决的方式是通过额外加上一层闭包函数，将需要的外部变量作为参数传递来解除变量的绑定关系：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tasks = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">    <span class="comment">// 注意有一层额外的闭包</span></div><div class="line">    tasks[tasks.length] = (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'Current cursor is at '</span> + i);</div><div class="line">        &#125;;</div><div class="line">    &#125;)(i);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> len = tasks.length;</div><div class="line"><span class="keyword">while</span> (len--) &#123;</div><div class="line">    tasks[len]();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-8-4-空函数"><a href="#3-8-4-空函数" class="headerlink" title="3.8.4 空函数"></a>3.8.4 空函数</h4><h5 id="建议-空函数不使用-new-Function-的形式。"><a href="#建议-空函数不使用-new-Function-的形式。" class="headerlink" title="[建议] 空函数不使用 new Function() 的形式。"></a>[建议] 空函数不使用 <code>new Function()</code> 的形式。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> emptyFunction = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</div></pre></td></tr></table></figure>
<h5 id="建议-对于性能有高要求的场合，建议存在一个空函数的常量，供多处使用共享。"><a href="#建议-对于性能有高要求的场合，建议存在一个空函数的常量，供多处使用共享。" class="headerlink" title="[建议] 对于性能有高要求的场合，建议存在一个空函数的常量，供多处使用共享。"></a>[建议] 对于性能有高要求的场合，建议存在一个空函数的常量，供多处使用共享。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> EMPTY_FUNCTION = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">MyClass.prototype.abstractMethod = EMPTY_FUNCTION;</div><div class="line">MyClass.prototype.hooks.before = EMPTY_FUNCTION;</div><div class="line">MyClass.prototype.hooks.after = EMPTY_FUNCTION;</div></pre></td></tr></table></figure>
<h3 id="3-9-面向对象"><a href="#3-9-面向对象" class="headerlink" title="3.9 面向对象"></a>3.9 面向对象</h3><h5 id="强制-类的继承方案，实现时需要修正-constructor。"><a href="#强制-类的继承方案，实现时需要修正-constructor。" class="headerlink" title="[强制] 类的继承方案，实现时需要修正 constructor。"></a>[强制] 类的继承方案，实现时需要修正 <code>constructor</code>。</h5><p>解释：</p>
<p>通常使用其他 library 的类继承方案都会进行 <code>constructor</code> 修正。如果是自己实现的类继承方案，需要进行 <code>constructor</code> 修正。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 构建类之间的继承关系</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * @param &#123;Function&#125; subClass 子类函数</span></div><div class="line"><span class="comment"> * @param &#123;Function&#125; superClass 父类函数</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherits</span>(<span class="params">subClass, superClass</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> F = <span class="keyword">new</span> <span class="built_in">Function</span>();</div><div class="line">    F.prototype = superClass.prototype;</div><div class="line">    subClass.prototype = <span class="keyword">new</span> F();</div><div class="line">    subClass.prototype.constructor = subClass;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="建议-声明类时，保证-constructor-的正确性。"><a href="#建议-声明类时，保证-constructor-的正确性。" class="headerlink" title="[建议] 声明类时，保证 constructor 的正确性。"></a>[建议] 声明类时，保证 <code>constructor</code> 的正确性。</h5><p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 直接prototype等于对象时，需要修正constructor</span></div><div class="line">Animal.prototype = &#123;</div><div class="line">    <span class="keyword">constructor</span>: Animal,</div><div class="line"></div><div class="line">    jump: function () &#123;</div><div class="line">        alert(<span class="string">'animal '</span> + <span class="keyword">this</span>.name + <span class="string">' jump'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 这种方式扩展prototype则无需理会constructor</span></div><div class="line">Animal.prototype.jump = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="string">'animal '</span> + <span class="keyword">this</span>.name + <span class="string">' jump'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h5 id="建议-属性在构造函数中声明，方法在原型中声明。"><a href="#建议-属性在构造函数中声明，方法在原型中声明。" class="headerlink" title="[建议] 属性在构造函数中声明，方法在原型中声明。"></a>[建议] 属性在构造函数中声明，方法在原型中声明。</h5><p>解释：</p>
<p>原型对象的成员被所有实例共享，能节约内存占用。所以编码时我们应该遵守这样的原则：原型对象包含程序不会修改的成员，如方法函数或配置项。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">TextNode</span>(<span class="params">value, engine</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.value = value;</div><div class="line">    <span class="keyword">this</span>.engine = engine;</div><div class="line">&#125;</div><div class="line"></div><div class="line">TextNode.prototype.clone = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h5 id="强制-自定义事件的-事件名-必须全小写。"><a href="#强制-自定义事件的-事件名-必须全小写。" class="headerlink" title="[强制] 自定义事件的 事件名 必须全小写。"></a>[强制] 自定义事件的 <code>事件名</code> 必须全小写。</h5><p>解释：</p>
<p>在 JavaScript 广泛应用的浏览器环境，绝大多数 DOM 事件名称都是全小写的。为了遵循大多数 JavaScript 开发者的习惯，在设计自定义事件时，事件名也应该全小写。</p>
<h5 id="强制-自定义事件只能有一个-event-参数。如果事件需要传递较多信息，应仔细设计事件对象。"><a href="#强制-自定义事件只能有一个-event-参数。如果事件需要传递较多信息，应仔细设计事件对象。" class="headerlink" title="[强制] 自定义事件只能有一个 event 参数。如果事件需要传递较多信息，应仔细设计事件对象。"></a>[强制] 自定义事件只能有一个 <code>event</code> 参数。如果事件需要传递较多信息，应仔细设计事件对象。</h5><p>解释：</p>
<p>一个事件对象的好处有：</p>
<ol>
<li>顺序无关，避免事件监听者需要记忆参数顺序。</li>
<li>每个事件信息都可以根据需要提供或者不提供，更自由。</li>
<li>扩展方便，未来添加事件信息时，无需考虑会破坏监听器参数形式而无法向后兼容。</li>
</ol>
<h5 id="建议-设计自定义事件时，应考虑禁止默认行为。"><a href="#建议-设计自定义事件时，应考虑禁止默认行为。" class="headerlink" title="[建议] 设计自定义事件时，应考虑禁止默认行为。"></a>[建议] 设计自定义事件时，应考虑禁止默认行为。</h5><p>解释：</p>
<p>常见禁止默认行为的方式有两种：</p>
<ol>
<li>事件监听函数中 <code>return false</code>。</li>
<li>事件对象中包含禁止默认行为的方法，如 <code>preventDefault</code>。</li>
</ol>
<h3 id="3-10-动态特性"><a href="#3-10-动态特性" class="headerlink" title="3.10 动态特性"></a>3.10 动态特性</h3><h4 id="3-10-1-eval"><a href="#3-10-1-eval" class="headerlink" title="3.10.1 eval"></a>3.10.1 eval</h4><h5 id="强制-避免使用直接-eval-函数。"><a href="#强制-避免使用直接-eval-函数。" class="headerlink" title="[强制] 避免使用直接 eval 函数。"></a>[强制] 避免使用直接 <code>eval</code> 函数。</h5><p>解释：</p>
<p>直接 <code>eval</code>，指的是以函数方式调用 <code>eval</code> 的调用方法。直接 <code>eval</code> 调用执行代码的作用域为本地作用域，应当避免。</p>
<p>如果有特殊情况需要使用直接 <code>eval</code>，需在代码中用详细的注释说明为何必须使用直接 <code>eval</code>，不能使用其它动态执行代码的方式，同时需要其他资深工程师进行 Code Review。</p>
<h5 id="建议-尽量避免使用-eval-函数。"><a href="#建议-尽量避免使用-eval-函数。" class="headerlink" title="[建议] 尽量避免使用 eval 函数。"></a>[建议] 尽量避免使用 <code>eval</code> 函数。</h5><h4 id="3-10-2-动态执行代码"><a href="#3-10-2-动态执行代码" class="headerlink" title="3.10.2 动态执行代码"></a>3.10.2 动态执行代码</h4><h5 id="建议-使用-new-Function-执行动态代码。"><a href="#建议-使用-new-Function-执行动态代码。" class="headerlink" title="[建议] 使用 new Function 执行动态代码。"></a>[建议] 使用 <code>new Function</code> 执行动态代码。</h5><p>解释：</p>
<p>通过 <code>new Function</code> 生成的函数作用域是全局使用域，不会影响当当前的本地作用域。如果有动态代码执行的需求，建议使用 <code>new Function</code>。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> handler = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'return x + y;'</span>);</div><div class="line"><span class="keyword">var</span> result = handler($(<span class="string">'#x'</span>).val(), $(<span class="string">'#y'</span>).val());</div></pre></td></tr></table></figure>
<h4 id="3-10-3-with"><a href="#3-10-3-with" class="headerlink" title="3.10.3 with"></a>3.10.3 with</h4><h5 id="建议-尽量不要使用-with。"><a href="#建议-尽量不要使用-with。" class="headerlink" title="[建议] 尽量不要使用 with。"></a>[建议] 尽量不要使用 <code>with</code>。</h5><p>解释：</p>
<p>使用 <code>with</code> 可能会增加代码的复杂度，不利于阅读和管理；也会对性能有影响。大多数使用 <code>with</code> 的场景都能使用其他方式较好的替代。所以，尽量不要使用 <code>with</code>。</p>
<h4 id="3-10-4-delete"><a href="#3-10-4-delete" class="headerlink" title="3.10.4 delete"></a>3.10.4 delete</h4><h5 id="建议-减少-delete-的使用。"><a href="#建议-减少-delete-的使用。" class="headerlink" title="[建议] 减少 delete 的使用。"></a>[建议] 减少 <code>delete</code> 的使用。</h5><p>解释：</p>
<p>如果没有特别的需求，减少或避免使用 <code>delete</code>。<code>delete</code> 的使用会破坏部分 JavaScript 引擎的性能优化。</p>
<h5 id="建议-处理-delete-可能产生的异常。"><a href="#建议-处理-delete-可能产生的异常。" class="headerlink" title="[建议] 处理 delete 可能产生的异常。"></a>[建议] 处理 <code>delete</code> 可能产生的异常。</h5><p>解释：</p>
<p>对于有被遍历需求，且值 <code>null</code> 被认为具有业务逻辑意义的值的对象，移除某个属性必须使用 <code>delete</code> 操作。</p>
<p>在严格模式或 IE 下使用 <code>delete</code> 时，不能被删除的属性会抛出异常，因此在不确定属性是否可以删除的情况下，建议添加 <code>try-catch</code> 块。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">delete</span> o.x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span> (deleteError) &#123;</div><div class="line">    o.x = <span class="literal">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-10-5-对象属性"><a href="#3-10-5-对象属性" class="headerlink" title="3.10.5 对象属性"></a>3.10.5 对象属性</h4><h5 id="建议-避免修改外部传入的对象。"><a href="#建议-避免修改外部传入的对象。" class="headerlink" title="[建议] 避免修改外部传入的对象。"></a>[建议] 避免修改外部传入的对象。</h5><p>解释：</p>
<p>JavaScript 因其脚本语言的动态特性，当一个对象未被 seal 或 freeze 时，可以任意添加、删除、修改属性值。</p>
<p>但是随意地对 非自身控制的对象 进行修改，很容易造成代码在不可预知的情况下出现问题。因此，设计良好的组件、函数应该避免对外部传入的对象的修改。</p>
<p>下面代码的 <strong>selectNode</strong> 方法修改了由外部传入的 <strong>datasource</strong> 对象。如果 <strong>datasource</strong> 用在其它场合（如另一个 Tree 实例）下，会造成状态的混乱。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tree</span>(<span class="params">datasource</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.datasource = datasource;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Tree.prototype.selectNode = <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</div><div class="line">    <span class="comment">// 从datasource中找出节点对象</span></div><div class="line">    <span class="keyword">var</span> node = <span class="keyword">this</span>.findNode(id);</div><div class="line">    <span class="keyword">if</span> (node) &#123;</div><div class="line">        node.selected = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">this</span>.flushView();</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>对于此类场景，需要使用额外的对象来维护，使用由自身控制，不与外部产生任何交互的 <strong>selectedNodeIndex</strong> 对象来维护节点的选中状态，不对 <strong>datasource</strong> 作任何修改。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tree</span>(<span class="params">datasource</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.datasource = datasource;</div><div class="line">    <span class="keyword">this</span>.selectedNodeIndex = &#123;&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Tree.prototype.selectNode = <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 从datasource中找出节点对象</span></div><div class="line">    <span class="keyword">var</span> node = <span class="keyword">this</span>.findNode(id);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (node) &#123;</div><div class="line">        <span class="keyword">this</span>.selectedNodeIndex[id] = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">this</span>.flushView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>除此之外，也可以通过 deepClone 等手段将自身维护的对象与外部传入的分离，保证不会相互影响。</p>
<h5 id="建议-具备强类型的设计。"><a href="#建议-具备强类型的设计。" class="headerlink" title="[建议] 具备强类型的设计。"></a>[建议] 具备强类型的设计。</h5><p>解释：</p>
<ul>
<li>如果一个属性被设计为 <code>boolean</code> 类型，则不要使用 <code>1</code> 或 <code>0</code> 作为其值。对于标识性的属性，如对代码体积有严格要求，可以从一开始就设计为 <code>number</code> 类型且将 <code>0</code> 作为否定值。</li>
<li>从 DOM 中取出的值通常为 <code>string</code> 类型，如果有对象或函数的接收类型为 <code>number</code> 类型，提前作好转换，而不是期望对象、函数可以处理多类型的值。</li>
</ul>
<h2 id="4-浏览器环境"><a href="#4-浏览器环境" class="headerlink" title="4 浏览器环境"></a>4 浏览器环境</h2><h3 id="4-1-模块化"><a href="#4-1-模块化" class="headerlink" title="4.1 模块化"></a>4.1 模块化</h3><h4 id="4-1-1-AMD"><a href="#4-1-1-AMD" class="headerlink" title="4.1.1 AMD"></a>4.1.1 AMD</h4><h5 id="强制-使用-AMD-作为模块定义。"><a href="#强制-使用-AMD-作为模块定义。" class="headerlink" title="[强制] 使用 AMD 作为模块定义。"></a>[强制] 使用 <code>AMD</code> 作为模块定义。</h5><p>解释：</p>
<p>AMD 作为由社区认可的模块定义形式，提供多种重载提供灵活的使用方式，并且绝大多数优秀的 Library 都支持 AMD，适合作为规范。</p>
<p>目前，比较成熟的 AMD Loader 有：</p>
<ul>
<li>官方实现的 <a href="http://requirejs.org/" target="_blank" rel="external">requirejs</a></li>
<li>百度自己实现的 <a href="https://github.com/ecomfe/esl" target="_blank" rel="external">esl</a></li>
</ul>
<h5 id="强制-模块-id-必须符合标准。"><a href="#强制-模块-id-必须符合标准。" class="headerlink" title="[强制] 模块 id 必须符合标准。"></a>[强制] 模块 <code>id</code> 必须符合标准。</h5><p>解释：</p>
<p>模块 id 必须符合以下约束条件：</p>
<ol>
<li>类型为 string，并且是由 <code>/</code> 分割的一系列 terms 来组成。例如：<code>this/is/a/module</code>。</li>
<li>term 应该符合 [a-zA-Z0-9_-]+ 规则。</li>
<li>不应该有 .js 后缀。</li>
<li>跟文件的路径保持一致。</li>
</ol>
<h4 id="4-1-2-define"><a href="#4-1-2-define" class="headerlink" title="4.1.2 define"></a>4.1.2 define</h4><h5 id="建议-定义模块时不要指明-id-和-dependencies。"><a href="#建议-定义模块时不要指明-id-和-dependencies。" class="headerlink" title="[建议] 定义模块时不要指明 id 和 dependencies。"></a>[建议] 定义模块时不要指明 <code>id</code> 和 <code>dependencies</code>。</h5><p>解释：</p>
<p>在 AMD 的设计思想里，模块名称是和所在路径相关的，匿名的模块更利于封包和迁移。模块依赖应在模块定义内部通过 <code>local require</code> 引用。</p>
<p>所以，推荐使用 <code>define(factory)</code> 的形式进行模块定义。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">define(</div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<h5 id="建议-使用-return-来返回模块定义。"><a href="#建议-使用-return-来返回模块定义。" class="headerlink" title="[建议] 使用 return 来返回模块定义。"></a>[建议] 使用 <code>return</code> 来返回模块定义。</h5><p>解释：</p>
<p>使用 return 可以减少 factory 接收的参数（不需要接收 exports 和 module），在没有 AMD Loader 的场景下也更容易进行简单的处理来伪造一个 Loader。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">define(</div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> exports = &#123;&#125;;</div><div class="line"></div><div class="line">        <span class="comment">// ...</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> exports;</div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<h4 id="4-1-3-require"><a href="#4-1-3-require" class="headerlink" title="4.1.3 require"></a>4.1.3 require</h4><h5 id="强制-全局运行环境中，require-必须以-async-require-形式调用。"><a href="#强制-全局运行环境中，require-必须以-async-require-形式调用。" class="headerlink" title="[强制] 全局运行环境中，require 必须以 async require 形式调用。"></a>[强制] 全局运行环境中，<code>require</code> 必须以 <code>async require</code> 形式调用。</h5><p>解释：</p>
<p>模块的加载过程是异步的，同步调用并无法保证得到正确的结果。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// good</span></div><div class="line"><span class="built_in">require</span>([<span class="string">'foo'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">foo</span>) </span>&#123;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> foo = <span class="built_in">require</span>(<span class="string">'foo'</span>);</div></pre></td></tr></table></figure>
<h5 id="强制-模块定义中只允许使用-local-require，不允许使用-global-require。"><a href="#强制-模块定义中只允许使用-local-require，不允许使用-global-require。" class="headerlink" title="[强制] 模块定义中只允许使用 local require，不允许使用 global require。"></a>[强制] 模块定义中只允许使用 <code>local require</code>，不允许使用 <code>global require</code>。</h5><p>解释：</p>
<ol>
<li>在模块定义中使用 <code>global require</code>，对封装性是一种破坏。</li>
<li>在 AMD 里，<code>global require</code> 是可以被重命名的。并且 Loader 甚至没有全局的 <code>require</code> 变量，而是用 Loader 名称做为 <code>global require</code>。模块定义不应该依赖使用的 Loader。</li>
</ol>
<h5 id="强制-Package-在实现时，内部模块的-require-必须使用-relative-id。"><a href="#强制-Package-在实现时，内部模块的-require-必须使用-relative-id。" class="headerlink" title="[强制] Package 在实现时，内部模块的 require 必须使用 relative id。"></a>[强制] Package 在实现时，内部模块的 <code>require</code> 必须使用 <code>relative id</code>。</h5><p>解释：</p>
<p>对于任何可能通过 发布-引入 的形式复用的第三方库、框架、包，开发者所定义的名称不代表使用者使用的名称。因此不要基于任何名称的假设。在实现源码中，<code>require</code> 自身的其它模块时使用 <code>relative id</code>。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">define(</div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'./util'</span>);</div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<h5 id="建议-不会被调用的依赖模块，在-factory-开始处统一-require。"><a href="#建议-不会被调用的依赖模块，在-factory-开始处统一-require。" class="headerlink" title="[建议] 不会被调用的依赖模块，在 factory 开始处统一 require。"></a>[建议] 不会被调用的依赖模块，在 <code>factory</code> 开始处统一 <code>require</code>。</h5><p>解释：</p>
<p>有些模块是依赖的模块，但不会在模块实现中被直接调用，最为典型的是 <code>css</code> / <code>js</code> / <code>tpl</code> 等 Plugin 所引入的外部内容。此类内容建议放在模块定义最开始处统一引用。</p>
<p>示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">define(</div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">require</span>) </span>&#123;</div><div class="line">        <span class="built_in">require</span>(<span class="string">'css!foo.css'</span>);</div><div class="line">        <span class="built_in">require</span>(<span class="string">'tpl!bar.tpl.html'</span>);</div><div class="line"></div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<h3 id="4-2-DOM"><a href="#4-2-DOM" class="headerlink" title="4.2 DOM"></a>4.2 DOM</h3><h4 id="4-2-1-元素获取"><a href="#4-2-1-元素获取" class="headerlink" title="4.2.1 元素获取"></a>4.2.1 元素获取</h4><h5 id="建议-对于单个元素，尽可能使用-document-getElementById-获取，避免使用document-all。"><a href="#建议-对于单个元素，尽可能使用-document-getElementById-获取，避免使用document-all。" class="headerlink" title="[建议] 对于单个元素，尽可能使用 document.getElementById 获取，避免使用document.all。"></a>[建议] 对于单个元素，尽可能使用 <code>document.getElementById</code> 获取，避免使用<code>document.all</code>。</h5><h5 id="建议-对于多个元素的集合，尽可能使用-context-getElementsByTagName-获取。其中-context-可以为-document-或其他元素。指定-tagName-参数为-可以获得所有子元素。"><a href="#建议-对于多个元素的集合，尽可能使用-context-getElementsByTagName-获取。其中-context-可以为-document-或其他元素。指定-tagName-参数为-可以获得所有子元素。" class="headerlink" title="[建议] 对于多个元素的集合，尽可能使用 context.getElementsByTagName 获取。其中 context 可以为 document 或其他元素。指定 tagName 参数为 * 可以获得所有子元素。"></a>[建议] 对于多个元素的集合，尽可能使用 <code>context.getElementsByTagName</code> 获取。其中 <code>context</code> 可以为 <code>document</code> 或其他元素。指定 <code>tagName</code> 参数为 <code>*</code> 可以获得所有子元素。</h5><h5 id="建议-遍历元素集合时，尽量缓存集合长度。如需多次操作同一集合，则应将集合转为数组。"><a href="#建议-遍历元素集合时，尽量缓存集合长度。如需多次操作同一集合，则应将集合转为数组。" class="headerlink" title="[建议] 遍历元素集合时，尽量缓存集合长度。如需多次操作同一集合，则应将集合转为数组。"></a>[建议] 遍历元素集合时，尽量缓存集合长度。如需多次操作同一集合，则应将集合转为数组。</h5><p>解释：</p>
<p>原生获取元素集合的结果并不直接引用 DOM 元素，而是对索引进行读取，所以 DOM 结构的改变会实时反映到结果中。</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> elements = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'*'</span>);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="comment">// 显示为 DIV</span></span></div><div class="line"><span class="undefined">alert(elements[0].tagName);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> div = elements[<span class="number">0</span>];</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> p = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span></div><div class="line"><span class="undefined">docpment.body.insertBefore(p, div);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="comment">// 显示为 P</span></span></div><div class="line"><span class="undefined">alert(elements[0].tagName);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="建议-获取元素的直接子元素时使用-children。避免使用childNodes，除非预期是需要包含文本、注释和属性类型的节点。"><a href="#建议-获取元素的直接子元素时使用-children。避免使用childNodes，除非预期是需要包含文本、注释和属性类型的节点。" class="headerlink" title="[建议] 获取元素的直接子元素时使用 children。避免使用childNodes，除非预期是需要包含文本、注释和属性类型的节点。"></a>[建议] 获取元素的直接子元素时使用 <code>children</code>。避免使用<code>childNodes</code>，除非预期是需要包含文本、注释和属性类型的节点。</h5><h4 id="4-2-2-样式获取"><a href="#4-2-2-样式获取" class="headerlink" title="4.2.2 样式获取"></a>4.2.2 样式获取</h4><h5 id="建议-获取元素实际样式信息时，应使用-getComputedStyle-或-currentStyle。"><a href="#建议-获取元素实际样式信息时，应使用-getComputedStyle-或-currentStyle。" class="headerlink" title="[建议] 获取元素实际样式信息时，应使用 getComputedStyle 或 currentStyle。"></a>[建议] 获取元素实际样式信息时，应使用 <code>getComputedStyle</code> 或 <code>currentStyle</code>。</h5><p>解释：</p>
<p>通过 style 只能获得内联定义或通过 JavaScript 直接设置的样式。通过 CSS class 设置的元素样式无法直接通过 style 获取。</p>
<h4 id="4-2-3-样式设置"><a href="#4-2-3-样式设置" class="headerlink" title="4.2.3 样式设置"></a>4.2.3 样式设置</h4><h5 id="建议-尽可能通过为元素添加预定义的-className-来改变元素样式，避免直接操作-style-设置。"><a href="#建议-尽可能通过为元素添加预定义的-className-来改变元素样式，避免直接操作-style-设置。" class="headerlink" title="[建议] 尽可能通过为元素添加预定义的 className 来改变元素样式，避免直接操作 style 设置。"></a>[建议] 尽可能通过为元素添加预定义的 className 来改变元素样式，避免直接操作 style 设置。</h5><h5 id="强制-通过-style-对象设置元素样式时，对于带单位非-0-值的属性，不允许省略单位。"><a href="#强制-通过-style-对象设置元素样式时，对于带单位非-0-值的属性，不允许省略单位。" class="headerlink" title="[强制] 通过 style 对象设置元素样式时，对于带单位非 0 值的属性，不允许省略单位。"></a>[强制] 通过 style 对象设置元素样式时，对于带单位非 0 值的属性，不允许省略单位。</h5><p>解释：</p>
<p>除了 IE，标准浏览器会忽略不规范的属性值，导致兼容性问题。</p>
<h4 id="4-2-4-DOM-操作"><a href="#4-2-4-DOM-操作" class="headerlink" title="4.2.4 DOM 操作"></a>4.2.4 DOM 操作</h4><h5 id="建议-操作-DOM-时，尽量减少页面-reflow。"><a href="#建议-操作-DOM-时，尽量减少页面-reflow。" class="headerlink" title="[建议] 操作 DOM 时，尽量减少页面 reflow。"></a>[建议] 操作 <code>DOM</code> 时，尽量减少页面 <code>reflow</code>。</h5><p>解释：</p>
<p>页面 reflow 是非常耗时的行为，非常容易导致性能瓶颈。下面一些场景会触发浏览器的reflow：</p>
<ul>
<li>DOM元素的添加、修改（内容）、删除。</li>
<li>应用新的样式或者修改任何影响元素布局的属性。</li>
<li>Resize浏览器窗口、滚动页面。</li>
<li>读取元素的某些属性（offsetLeft、offsetTop、offsetHeight、offsetWidth、scrollTop/Left/Width/Height、clientTop/Left/Width/Height、getComputedStyle()、currentStyle(in IE)) 。</li>
</ul>
<h5 id="建议-尽量减少-DOM-操作。"><a href="#建议-尽量减少-DOM-操作。" class="headerlink" title="[建议] 尽量减少 DOM 操作。"></a>[建议] 尽量减少 <code>DOM</code> 操作。</h5><p>解释：</p>
<p>DOM 操作也是非常耗时的一种操作，减少 DOM 操作有助于提高性能。举一个简单的例子，构建一个列表。我们可以用两种方式：</p>
<ol>
<li>在循环体中 createElement 并 append 到父元素中。</li>
<li>在循环体中拼接 HTML 字符串，循环结束后写父元素的 innerHTML。</li>
</ol>
<p>第一种方法看起来比较标准，但是每次循环都会对 DOM 进行操作，性能极低。在这里推荐使用第二种方法。</p>
<h4 id="4-2-5-DOM-事件"><a href="#4-2-5-DOM-事件" class="headerlink" title="4.2.5 DOM 事件"></a>4.2.5 DOM 事件</h4><h5 id="建议-优先使用-addEventListener-attachEvent-绑定事件，避免直接在-HTML-属性中或-DOM-的-expando-属性绑定事件处理。"><a href="#建议-优先使用-addEventListener-attachEvent-绑定事件，避免直接在-HTML-属性中或-DOM-的-expando-属性绑定事件处理。" class="headerlink" title="[建议] 优先使用 addEventListener / attachEvent 绑定事件，避免直接在 HTML 属性中或 DOM 的 expando 属性绑定事件处理。"></a>[建议] 优先使用 <code>addEventListener / attachEvent</code> 绑定事件，避免直接在 HTML 属性中或 DOM 的 <code>expando</code> 属性绑定事件处理。</h5><p>解释：</p>
<p>expando 属性绑定事件容易导致互相覆盖。</p>
<h5 id="建议-使用-addEventListener-时第三个参数使用-false。"><a href="#建议-使用-addEventListener-时第三个参数使用-false。" class="headerlink" title="[建议] 使用 addEventListener 时第三个参数使用 false。"></a>[建议] 使用 <code>addEventListener</code> 时第三个参数使用 <code>false</code>。</h5><p>解释：</p>
<p>标准浏览器中的 addEventListener 可以通过第三个参数指定两种时间触发模型：冒泡和捕获。而 IE 的 attachEvent 仅支持冒泡的事件触发。所以为了保持一致性，通常 addEventListener 的第三个参数都为 false。</p>
<h5 id="建议-在没有事件自动管理的框架支持下，应持有监听器函数的引用，在适当时候（元素释放、页面卸载等）移除添加的监听器。"><a href="#建议-在没有事件自动管理的框架支持下，应持有监听器函数的引用，在适当时候（元素释放、页面卸载等）移除添加的监听器。" class="headerlink" title="[建议] 在没有事件自动管理的框架支持下，应持有监听器函数的引用，在适当时候（元素释放、页面卸载等）移除添加的监听器。"></a>[建议] 在没有事件自动管理的框架支持下，应持有监听器函数的引用，在适当时候（元素释放、页面卸载等）移除添加的监听器。</h5>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1 前言&quot;&gt;&lt;/a&gt;1 前言&lt;/h2&gt;&lt;p&gt;JavaScript 在百度一直有着广泛的应用，特别是在浏览器端的行为管理。本文档的目标是使 JavaScript 代码风格保持一致，容易被理解和被维护。&lt;/p&gt;
&lt;p&gt;虽然本文档是针对 JavaScript 设计的，但是在使用各种 JavaScript 的预编译语言时(如 TypeScript 等)时，适用的部分也应尽量遵循本文档的约定。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://www.hqxdb.com/categories/javascript/"/>
    
      <category term="规范" scheme="https://www.hqxdb.com/categories/javascript/%E8%A7%84%E8%8C%83/"/>
    
    
      <category term="javascript" scheme="https://www.hqxdb.com/tags/javascript/"/>
    
      <category term="规范" scheme="https://www.hqxdb.com/tags/%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>Less 编码规范 (1.1)</title>
    <link href="https://www.hqxdb.com/2017/08/23/JS%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83/less-code-style/"/>
    <id>https://www.hqxdb.com/2017/08/23/JS书写规范/less-code-style/</id>
    <published>2017-08-23T14:06:46.000Z</published>
    <updated>2017-08-27T02:52:00.873Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>该文档主要的设计目标是提高 Less 文档的团队一致性与可维护性。</p>
<p>Less 代码的基本规范和原则与 <a href="https://github.com/ecomfe/spec/blob/master/css-style-guide.md" target="_blank" rel="external">CSS 编码规范</a> 保持一致。</p>
<a id="more"></a> 
<h3 id="编撰"><a href="#编撰" class="headerlink" title="编撰"></a>编撰</h3><p>erik、顾轶灵、黄后锦、李玉北、赵雷。</p>
<p>本文档由<code>商业运营体系前端技术组</code>审校发布。</p>
<h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>在本文档中，使用的关键字会以中文+括号包含的关键字英文表示：必须（MUST）。关键字”MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL”被定义在rfc2119中。</p>
<hr>
<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>使用UTF-8编码。<em>不得</em>（MUST NOT）包含BOM信息。</p>
<hr>
<h2 id="代码组织"><a href="#代码组织" class="headerlink" title="代码组织"></a>代码组织</h2><p>代码<em>必须</em>（MUST）按如下形式按顺序组织：</p>
<ol>
<li><code>@import</code></li>
<li>变量声明</li>
<li>样式声明</li>
</ol>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ✓</span></div><div class="line"><span class="keyword">@import</span> <span class="string">"est/all.less"</span>;</div><div class="line"></div><div class="line"><span class="variable">@default-text-color:</span> <span class="number">#333</span>;</div><div class="line"></div><div class="line"><span class="selector-class">.page</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">960px</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="import-语句"><a href="#import-语句" class="headerlink" title="@import 语句"></a><code>@import</code> 语句</h2><p><code>@import</code> 语句引用的文件<em>必须</em>（MUST）写在一对引号内，<code>.less</code> 后缀<em>不得</em>（MUST NOT）省略（与引入 CSS 文件时的路径格式一致）。引号使用 <code>&#39;</code> 和 <code>&quot;</code> 均可，但在同一项目内<em>必须</em>（MUST）统一。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ✗</span></div><div class="line"><span class="keyword">@import</span> <span class="string">'est/all'</span>;</div><div class="line"><span class="keyword">@import</span> <span class="string">"my/mixins.less"</span>;</div><div class="line"></div><div class="line"><span class="comment">// ✓</span></div><div class="line"><span class="keyword">@import</span> <span class="string">"est/all.less"</span>;</div><div class="line"><span class="keyword">@import</span> <span class="string">"my/mixins.less"</span>;</div></pre></td></tr></table></figure>
<hr>
<h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><h3 id="属性、变量"><a href="#属性、变量" class="headerlink" title="属性、变量"></a>属性、变量</h3><p>选择器和 <code>{</code> 之间<em>必须</em>（MUST）保留一个空格。</p>
<p>属性名后的冒号（<code>:</code>）与属性值之间<em>必须</em>（MUST）保留一个空格，冒号前<em>不得</em>（MUST NOT）保留空格。</p>
<p>定义变量时冒号（<code>:</code>）与变量值之间<em>必须</em>（MUST）保留一个空格，冒号前<em>不得</em>（MUST NOT）保留空格。</p>
<p>在用逗号（<code>,</code>）分隔的列表（Less 函数参数列表、以 <code>,</code> 分隔的属性值等）中，逗号后<em>必须</em>（MUST）保留一个空格，逗号前<em>不得</em>（MUST NOT）保留空格。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ✗</span></div><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="variable">@w:</span><span class="number">50px</span>;</div><div class="line">    <span class="variable">@h :</span><span class="number">30px</span>;</div><div class="line">    <span class="attribute">width</span>:<span class="variable">@w</span>;</div><div class="line">    <span class="attribute">height </span>:<span class="variable">@h</span>;</div><div class="line">    <span class="attribute">color</span>: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,.<span class="number">3</span>);</div><div class="line">    <span class="attribute">transition</span>: width <span class="number">1s</span>,height <span class="number">3s</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ✓</span></div><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="variable">@w:</span> <span class="number">50px</span>;</div><div class="line">    <span class="variable">@h:</span> <span class="number">30px</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="variable">@w</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="variable">@h</span>;</div><div class="line">    <span class="attribute">transition</span>: width <span class="number">1s</span>, height <span class="number">3s</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><p><code>+</code> / <code>-</code> / <code>*</code> / <code>/</code> 四个运算符两侧<em>必须</em>（MUST）保留一个空格。<code>+</code> / <code>-</code> 两侧的操作数<em>必须</em>（MUST）有相同的单位，如果其中一个是变量，另一个数值<em>必须</em>（MUST）书写单位。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ✗</span></div><div class="line"><span class="variable">@a:</span> <span class="number">200px</span>;</div><div class="line"><span class="variable">@b:</span> (<span class="variable">@a</span>+<span class="number">100</span>)*<span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="comment">// ✓</span></div><div class="line"><span class="variable">@a:</span> <span class="number">200px</span>;</div><div class="line"><span class="variable">@b:</span> (<span class="variable">@a</span> + <span class="number">100px</span>) * <span class="number">2</span>;</div></pre></td></tr></table></figure>
<h3 id="混入（Mixin）"><a href="#混入（Mixin）" class="headerlink" title="混入（Mixin）"></a>混入（Mixin）</h3><p>Mixin 和后面的空格之间<em>不得</em>（MUST NOT）包含空格。在给 mixin 传递参数时，在参数分隔符（<code>,</code> / <code>;</code>）后<em>必须</em>（MUST）保留一个空格：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ✗</span></div><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="selector-class">.size</span>(<span class="number">30px</span>,<span class="number">20px</span>);</div><div class="line">    <span class="selector-class">.clearfix</span> ();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ✓</span></div><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="selector-class">.size</span>(<span class="number">30px</span>, <span class="number">20px</span>);</div><div class="line">    <span class="selector-class">.clearfix</span>();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>当多个选择器共享一个声明块时，每个选择器声明<em>必须</em>（MUST）独占一行。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ✗</span></div><div class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span> &#123;</div><div class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ✓</span></div><div class="line"><span class="selector-tag">h1</span>,</div><div class="line"><span class="selector-tag">h2</span>,</div><div class="line"><span class="selector-tag">h3</span> &#123;</div><div class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Class 命名不得以样式信息进行描述，如 <code>.float-right</code>、<code>text-red</code> 等。</p>
<hr>
<h2 id="省略与缩写"><a href="#省略与缩写" class="headerlink" title="省略与缩写"></a>省略与缩写</h2><h3 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h3><p>多个属性定义可以使用缩写时， <em>尽量</em>（SHOULD）使用缩写。缩写更清晰字节数更少。常见缩写有 <code>margin</code>、<code>border</code>、<code>padding</code>、<code>font</code>、<code>list-style</code> 等。在书写时<em>必须</em>（MUST）考量缩写展开后是否有不需要覆盖的属性内容被修改，从而带来副作用。</p>
<h3 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h3><p>对于处于 <code>(0, 1)</code> 范围内的数值，小数点前的 <code>0</code> <em>可以</em>（MAY）省略，同一项目中<em>必须</em>（MUST）保持一致。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ✗</span></div><div class="line"><span class="attribute">transition-duration</span>: <span class="number">0.5s</span>, .<span class="number">7s</span>;</div><div class="line"></div><div class="line"><span class="comment">// ✓</span></div><div class="line"><span class="attribute">transition-duration</span>: .<span class="number">5s</span>, .<span class="number">7s</span>;</div></pre></td></tr></table></figure>
<h3 id="0-值"><a href="#0-值" class="headerlink" title="0 值"></a>0 值</h3><p>当属性值为 0 时，<em>必须</em>（MUST）省略可省的单位（长度单位如 <code>px</code>、<code>em</code>，不包括时间、角度等如 <code>s</code>、<code>deg</code>）。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ✗</span></div><div class="line"><span class="attribute">margin-top</span>: <span class="number">0px</span>;</div><div class="line"></div><div class="line"><span class="comment">// ✓</span></div><div class="line"><span class="attribute">margin-top</span>: <span class="number">0</span>;</div></pre></td></tr></table></figure>
<h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><p>颜色定义<em>必须</em>（MUST）使用 <code>#rrggbb</code> 格式定义，并在可能时<em>尽量</em>（SHOULD）缩写为 <code>#rgb</code> 形式，且避免直接使用颜色名称与 <code>rgb()</code> 表达式。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ✗</span></div><div class="line"><span class="attribute">border-color</span>: red;</div><div class="line"><span class="attribute">color</span>: rgb(<span class="number">254</span>, <span class="number">254</span>, <span class="number">254</span>);</div><div class="line"></div><div class="line"><span class="comment">// ✓</span></div><div class="line"><span class="attribute">border-color</span>: <span class="number">#f00</span>;</div><div class="line"><span class="attribute">color</span>: <span class="number">#fefefe</span>;</div></pre></td></tr></table></figure>
<h3 id="私有属性前缀"><a href="#私有属性前缀" class="headerlink" title="私有属性前缀"></a>私有属性前缀</h3><p>同一属性有不同私有前缀的，<em>尽量</em>（SHOULD）按前缀长度降序书写，标准形式<em>必须</em>（MUST）写在最后。且这一组属性以第一条的位置为准，<em>尽量</em>（SHOULD）按冒号的位置对齐。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ✓</span></div><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">-webkit-transform</span>: rotate(<span class="number">30deg</span>);</div><div class="line">       <span class="attribute">-moz-transform</span>: rotate(<span class="number">30deg</span>);</div><div class="line">        <span class="attribute">-ms-transform</span>: rotate(<span class="number">30deg</span>);</div><div class="line">         <span class="attribute">-o-transform</span>: rotate(<span class="number">30deg</span>);</div><div class="line">            <span class="attribute">transform</span>: rotate(<span class="number">30deg</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><em>可以</em>（MAY）在无其他更好解决办法时使用 CSS hack，并且<em>尽量</em>（SHOULD）使用简单的属性名 hack 如 <code>_zoom</code>、<code>*margin</code>。</p>
<p><em>可以</em>（MAY）但谨慎使用 IE 滤镜。需要注意的是，IE 滤镜中图片的 URL 是以页面路径作为相对目录，而不是 CSS 文件路径。</p>
<hr>
<h2 id="嵌套和缩进"><a href="#嵌套和缩进" class="headerlink" title="嵌套和缩进"></a>嵌套和缩进</h2><p><em>必须</em>（MUST）采用 4 个空格为一次缩进， <em>不得</em>（MUST NOT）采用 TAB 作为缩进。</p>
<p>嵌套的声明块前<em>必须</em>（MUST）增加一次缩进，有多个声明块共享命名空间时<em>尽量</em>（SHOULD）嵌套书写，避免选择器的重复。</p>
<p>但是需注意的是，<em>尽量</em>（SHOULD）仅在必须区分上下文时才引入嵌套关系（在嵌套书写前先考虑如果不能嵌套，会如何书写选择器）。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ✗</span></div><div class="line"><span class="selector-class">.main</span> <span class="selector-class">.title</span> &#123;</div><div class="line">  <span class="attribute">font-weight</span>: <span class="number">700</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.main</span> <span class="selector-class">.content</span> &#123;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.main</span> &#123;</div><div class="line"><span class="selector-class">.warning</span> &#123;</div><div class="line">  <span class="attribute">font-weight</span>: <span class="number">700</span>;</div><div class="line">&#125;</div><div class="line">    </div><div class="line">  <span class="selector-class">.comment-form</span> &#123;</div><div class="line">    <span class="selector-id">#comment</span><span class="selector-pseudo">:invalid</span> &#123;</div><div class="line">      <span class="attribute">color</span>: red;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ✓</span></div><div class="line"><span class="selector-class">.main</span> &#123;</div><div class="line">    <span class="selector-class">.title</span> &#123;</div><div class="line">        <span class="attribute">font-weight</span>: <span class="number">700</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.content</span> &#123;</div><div class="line">        <span class="attribute">line-height</span>: <span class="number">1.5</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="selector-class">.warning</span> &#123;</div><div class="line">        <span class="attribute">font-weight</span>: <span class="number">700</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#comment</span><span class="selector-pseudo">:invalid</span> &#123;</div><div class="line">    <span class="attribute">color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>Less 的变量值总是以同一作用域下最后一个同名变量为准，务必注意后面的设定会覆盖所有之前的设定。</p>
<p>变量命名<em>必须</em>（MUST）采用 <code>@foo-bar</code> 形式，<em>不得</em>（MUST NOT）使用 <code>@fooBar</code> 形式。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ✗</span></div><div class="line"><span class="variable">@sidebarWidth:</span> <span class="number">200px</span>;</div><div class="line"><span class="variable">@width:</span><span class="number">800px</span>;</div><div class="line"></div><div class="line"><span class="comment">// ✓</span></div><div class="line"><span class="variable">@sidebar-width:</span> <span class="number">200px</span>;</div><div class="line"><span class="variable">@width:</span> <span class="number">800px</span>;</div></pre></td></tr></table></figure>
<hr>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>使用继承时，如果在声明块内书写 <code>:extend</code> 语句，<em>必须</em>（MUST）写在开头：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ✗</span></div><div class="line"><span class="selector-class">.sub</span> &#123;</div><div class="line">    <span class="attribute">color</span>: red;</div><div class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.mod</span> <span class="keyword">all</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ✓</span></div><div class="line"><span class="selector-class">.sub</span> &#123;</div><div class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:extend(.mod</span> <span class="keyword">all</span>);</div><div class="line">    <span class="attribute">color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="混入（Mixin）-1"><a href="#混入（Mixin）-1" class="headerlink" title="混入（Mixin）"></a>混入（Mixin）</h2><p>在定义 mixin 时，如果 mixin 名称不是一个需要使用的 className，<em>必须</em>（MUST）加上括号，否则即使不被调用也会输出到 CSS 中。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ✗</span></div><div class="line"><span class="selector-class">.big-text</span> &#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">2em</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">h3</span> &#123;</div><div class="line">    <span class="selector-class">.big-text</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ✓</span></div><div class="line"><span class="selector-class">.big-text</span>() &#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">2em</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">h3</span> &#123;</div><div class="line">    <span class="selector-class">.big-text</span>();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果混入的是本身不输出内容的 mixin，<em>必须</em>（MUST）在 mixin 后添加括号（即使不传参数），以区分这是否是一个 className（修改以后是否会影响 HTML）。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ✗</span></div><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="selector-class">.clearfix</span>;</div><div class="line">    <span class="selector-class">.size</span> (<span class="number">20px</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ✓</span></div><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="selector-class">.clearfix</span>();</div><div class="line">    <span class="selector-class">.size</span>(<span class="number">20px</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Mixin 的参数分隔符使用 <code>,</code> 和 <code>;</code> 均可，但在同一项目中<em>必须</em>（MUST）保持统一。</p>
<hr>
<h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>变量和 mixin 在命名时<em>必须</em>（MUST）遵循如下原则：</p>
<ul>
<li>一个项目只能引入一个无命名前缀的基础样式库（如 est）</li>
<li>业务代码和其他被引入的样式代码中，变量和 mixin 必须有项目或库的前缀</li>
</ul>
<hr>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>在进行字符串转义时，使用 <code>~&quot;&quot;</code> 表达式与 <code>e()</code> 函数均可，但在同一项目中<em>必须</em>（MUST）保持一致。</p>
<p>字符串两侧的引号<em>必须</em>（MUST）使用 <code>&quot;</code>。</p>
<h2 id="JS-表达式"><a href="#JS-表达式" class="headerlink" title="JS 表达式"></a>JS 表达式</h2><p><em>可以</em>（MAY）使用 JS 表达式（<code>~``</code>）生成属性值或变量，其中包含的字符串两侧的引号<em>尽量</em>（SHOULD）使用单引号（<code>&#39;</code>）。</p>
<hr>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>单行注释<em>尽量</em>（SHOULD）使用 <code>//</code> 方式。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Hide everything</span></div><div class="line">* &#123;</div><div class="line">    <span class="attribute">display</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;该文档主要的设计目标是提高 Less 文档的团队一致性与可维护性。&lt;/p&gt;
&lt;p&gt;Less 代码的基本规范和原则与 &lt;a href=&quot;https://github.com/ecomfe/spec/blob/master/css-style-guide.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CSS 编码规范&lt;/a&gt; 保持一致。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://www.hqxdb.com/categories/javascript/"/>
    
      <category term="规范" scheme="https://www.hqxdb.com/categories/javascript/%E8%A7%84%E8%8C%83/"/>
    
    
      <category term="javascript" scheme="https://www.hqxdb.com/tags/javascript/"/>
    
      <category term="规范" scheme="https://www.hqxdb.com/tags/%E8%A7%84%E8%8C%83/"/>
    
      <category term="Less" scheme="https://www.hqxdb.com/tags/Less/"/>
    
  </entry>
  
  <entry>
    <title>模块和加载器规范</title>
    <link href="https://www.hqxdb.com/2017/08/23/JS%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83/module/"/>
    <id>https://www.hqxdb.com/2017/08/23/JS书写规范/module/</id>
    <published>2017-08-23T14:06:46.000Z</published>
    <updated>2017-08-27T02:52:05.193Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>该文档主要的设计目标是定义前端代码的模块规范，便于开发资源的共享和复用。该文档<br>在 <a href="https://github.com/amdjs/amdjs-api/wiki" target="_blank" rel="external">amdjs</a> 规范的基础上，进行了更细粒度的规范化。</p>
<a id="more"></a> 
<h3 id="编撰"><a href="#编撰" class="headerlink" title="编撰"></a>编撰</h3><p>李玉北、erik、黄后锦、王杨、张立理、赵雷、陈新乐、顾轶灵、林志峰、刘恺华。</p>
<p>本文档由<code>商业运营体系前端技术组</code>审校发布。</p>
<h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>在本文档中，使用的关键字会以中文+括号包含的关键字英文表示： 必须(MUST) 。关键字”MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL”被定义在rfc2119中。</p>
<h2 id="模块定义"><a href="#模块定义" class="headerlink" title="模块定义"></a>模块定义</h2><p>模块定义 <em>必须(MUST)</em> 采用如下的方式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">define( factory );</div></pre></td></tr></table></figure>
<p>推荐采用<code>define(factory)</code>的方式进行<code>模块定义</code>。使用匿名<code>moduleId</code>，从而保证开发中模块与路径相关联，有利于模块的管理与整体迁移。</p>
<p>SHOULD NOT使用如下的方式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">define( moduleId, deps, factory );</div></pre></td></tr></table></figure>
<h3 id="moduleId"><a href="#moduleId" class="headerlink" title="moduleId"></a>moduleId</h3><p><code>moduleId</code>的格式应该符合 <a href="https://github.com/amdjs/amdjs-api/wiki/AMD" target="_blank" rel="external">amdjs</a> 中的约束条件。</p>
<ol>
<li><code>moduleId</code>的类型应该是<code>string</code>，并且是由<code>/</code>分割的一些<code>term</code>来组成。例如：<code>this/is/a/moduleId</code>。</li>
<li><code>term</code>应该符合<code>[a-zA-Z0-9_]+</code>这个规则。</li>
<li><code>moduleId</code>不应该有<code>.js</code>后缀。</li>
<li><code>moduleId</code>应该跟文件的路径保持一致。</li>
</ol>
<p><code>moduleId</code>在实际使用（如<code>require</code>）的时候，又可以分为如下几种类型：</p>
<ol>
<li><code>relative moduleId</code>：是以<code>./</code>或者<code>../</code>开头的<code>moduleId</code>。例如：<code>./foo</code>, <code>../../bar</code>。</li>
<li><code>top-level moduleId</code>：除上面两种之外的<code>moduleId</code>。例如<code>foo</code>，<code>bar/a</code>，<code>bar/b</code>。</li>
</ol>
<p>在模块定义的时候，<code>define</code>的第一个参数如果是<code>moduleId</code>， <em>必须(MUST)</em> 是<code>top-level moduleId</code>， <em>不允许(MUST NOT)</em> 是<code>relative moduleId</code>。</p>
<h3 id="factory"><a href="#factory" class="headerlink" title="factory"></a>factory</h3><h4 id="AMD风格与CommonJS风格"><a href="#AMD风格与CommonJS风格" class="headerlink" title="AMD风格与CommonJS风格"></a>AMD风格与CommonJS风格</h4><p>模块的<code>factory</code>有两种风格，<code>AMD推荐的风格</code>和<code>CommonJS的风格</code>。<code>AMD推荐的风格</code>通过返回一个对象做为模块对象，<code>CommonJS的风格</code>通过对<code>module.exports</code>或<code>exports的属性</code>赋值来达到暴露模块对象的目的。</p>
<p><em>建议(SHOULD)</em> 使用<code>AMD推荐的风格</code>，其更符合Web应用的习惯，对模块的数据类型也便于管理。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// AMD推荐的风格</span></div><div class="line">define( <span class="function"><span class="keyword">function</span>(<span class="params"> require </span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        method: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> foo = <span class="built_in">require</span>(<span class="string">"./foo/bar"</span>);</div><div class="line">            <span class="comment">// blabla...</span></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// CommonJS的风格</span></div><div class="line">define( <span class="function"><span class="keyword">function</span>(<span class="params"> require, exports, module </span>) </span>&#123;</div><div class="line">    <span class="built_in">module</span>.exports = &#123;</div><div class="line">        method: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> foo = <span class="built_in">require</span>(<span class="string">"./foo/bar"</span>);</div><div class="line">            <span class="comment">// blabla...</span></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>模块的<code>factory</code>默认有三个参数，分别是<code>require</code>, <code>exports</code>, <code>module</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define( <span class="function"><span class="keyword">function</span>(<span class="params"> require, exports, module </span>) </span>&#123;</div><div class="line">    <span class="comment">// blabla...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>使用<code>AMD推荐风格</code>时，<code>exports</code>和<code>module</code>参数可以省略。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define( <span class="function"><span class="keyword">function</span>(<span class="params"> require </span>) </span>&#123;</div><div class="line">    <span class="comment">// blabla...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>开发者 <em>不允许(MUST NOT)</em> 修改<code>require</code>, <code>exports</code>, <code>module</code>参数的形参名称。下面就是错误的用法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define( <span class="function"><span class="keyword">function</span>(<span class="params"> req, exp, mod </span>) </span>&#123;</div><div class="line">    <span class="comment">// blablabla...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><p><code>factory</code>可以是任何类型，一般来说常见的就是三种类型<code>function</code>, <code>string</code>, <code>object</code>。当<code>factory</code>不是<code>function</code>时，将直接做为模块对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// src/foo.js</span></div><div class="line">define( <span class="string">"hello world. I'm &#123;name&#125;"</span> );</div><div class="line"></div><div class="line"><span class="comment">// src/bar.js</span></div><div class="line">define( &#123;<span class="string">"name"</span>: <span class="string">"fe"</span>&#125; );</div></pre></td></tr></table></figure>
<p>上面这两种写法等价于：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// src/foo.js</span></div><div class="line">define( <span class="function"><span class="keyword">function</span>(<span class="params">require</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"hello world. I'm &#123;name&#125;"</span>;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// src/bar.js</span></div><div class="line">define( <span class="function"><span class="keyword">function</span>(<span class="params">require</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;<span class="string">"name"</span>: <span class="string">"fe"</span>&#125;;</div><div class="line">&#125; );</div></pre></td></tr></table></figure>
<h4 id="require"><a href="#require" class="headerlink" title="require"></a>require</h4><p><code>require</code>这个函数的参数是<code>moduleId</code>，通过调用<code>require</code>我们就可以引入其他的模块。<code>require</code>有两种形式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>( &#123;string&#125; moduleId );</div><div class="line"><span class="built_in">require</span>( &#123;<span class="built_in">Array</span>&#125; moduleIdList, &#123;<span class="built_in">Function</span>&#125; callback );</div></pre></td></tr></table></figure>
<p><code>require</code>存在<code>local require</code>和<code>global require</code>的区别。</p>
<p>在<code>factory</code>内部的<code>require</code>是<code>local require</code>，如果<code>require</code>参数中的<code>moduleId</code>的类型是<code>relative moduleId</code>，那么相对的是当前<code>模块id</code>。</p>
<p>在全局作用域下面调用的<code>require</code>是<code>global require</code>，<code>global require</code>不支持<code>relative moduleId</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// src/foo.js</span></div><div class="line">define( <span class="function"><span class="keyword">function</span>(<span class="params"> require </span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> bar = <span class="built_in">require</span>(<span class="string">"./bar"</span>); <span class="comment">// local require</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// src/main.js</span></div><div class="line"><span class="comment">// global require</span></div><div class="line"><span class="built_in">require</span>( [<span class="string">'foo'</span>, <span class="string">'bar'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"> foo, bar </span>) </span>&#123;     </div><div class="line">    <span class="comment">// blablalbla...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="exports"><a href="#exports" class="headerlink" title="exports"></a>exports</h4><p><code>exports</code>是使用<code>CommonJS风格</code>定义模块时，用来公开当前模块对外提供的API的。另外也可以忽略<code>exports</code>参数，直接在<code>factory</code>里面返回自己想公开的API。例如下面三种写法功能是一样的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">define( <span class="function"><span class="keyword">function</span>(<span class="params"> require, exports, module </span>) </span>&#123;</div><div class="line">    exports.name = <span class="string">"foo"</span>;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">define( <span class="function"><span class="keyword">function</span>(<span class="params"> require, exports, module </span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123; <span class="string">"name"</span> : <span class="string">"foo"</span> &#125;;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">define( <span class="function"><span class="keyword">function</span>(<span class="params"> require, exports, module </span>) </span>&#123;</div><div class="line">    <span class="built_in">module</span>.exports.name = <span class="string">"foo"</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>module</code>是当前模块的一些信息，一般不会用到。其中<code>module.exports === exports</code>。</p>
<h3 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h3><p>模块和模块的依赖关系需要通过<code>require</code>函数调用来保证。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// src/js/ui/Button.js</span></div><div class="line">define( <span class="function"><span class="keyword">function</span>(<span class="params"> require, exports, module </span>) </span>&#123;</div><div class="line">    <span class="built_in">require</span>(<span class="string">"css!../../css/ui/Button.css"</span>);</div><div class="line">    <span class="built_in">require</span>(<span class="string">"tpl!../../tpl/ui/Button.tpl.html"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> Control = <span class="built_in">require</span>(<span class="string">"ui/Control"</span>);</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * @constructor</span></div><div class="line"><span class="comment">     * @extends &#123;Control&#125;</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        Control.call(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        <span class="keyword">var</span> foo = <span class="built_in">require</span>(<span class="string">"./foo"</span>);</div><div class="line">        foo.bar();</div><div class="line">    &#125;</div><div class="line">    baidu.inherits(Button, Control);</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="comment">// exports = Button;</span></div><div class="line">    <span class="comment">// return Button;</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>具体实现的时候是通过正则表达式分析<code>factory</code>的函数体来识别出来的。因此为了保证识别的正确率，请尽量<br>避免在函数体内定义<code>require</code>变量或者<code>require</code>属性。例如不要这么做：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="built_in">require</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line"><span class="keyword">var</span> a = &#123;<span class="attr">require</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;&#125;;</div><div class="line">a.require(<span class="string">"./foo"</span>);</div><div class="line"><span class="built_in">require</span>(<span class="string">"./bar"</span>);</div></pre></td></tr></table></figure>
<p><a name="config"></a></p>
<h2 id="模块加载器配置"><a href="#模块加载器配置" class="headerlink" title="模块加载器配置"></a>模块加载器配置</h2><p><code>AMD Loader</code>应该支持如下的配置，更新配置的时候，写法如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"$&#123;amdloader.js&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="built_in">require</span>.config(&#123;</span></div><div class="line"><span class="undefined">    ....</span></div><div class="line"><span class="undefined">&#125;);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="baseUrl"><a href="#baseUrl" class="headerlink" title="baseUrl"></a>baseUrl</h3><p>类型应该是<code>string</code>。在<code>ID-to-path</code>的阶段，会以<code>baseUrl</code>作为根目录来计算。如果没有配置的话，就默认以当前页面所在的目录为<code>baseUrl</code>。<br>如果<code>baseUrl</code>的值是<code>relative</code>，那么相对的是当前页面，而不是<code>AMD Loader</code>所在的位置。</p>
<h3 id="paths"><a href="#paths" class="headerlink" title="paths"></a>paths</h3><p>类型应该是<code>Object.&lt;string, string&gt;</code>。它维护的是<code>moduleId</code>前缀到路径的映射规则。这个对象中的<code>key</code>应该是<code>moduleId</code>的前缀，<code>value</code>如果是一个相对路径的话，那么相对的是<code>baseUrl</code>。当然也可以是绝对路径的话，例如：<code>/this/is/a/path</code>，<code>//www.google.com/this/is/a/path</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    baseUrl: <span class="string">'/fe/code/path'</span>,</div><div class="line">    paths: &#123;</div><div class="line">        <span class="string">'ui'</span>: <span class="string">'esui/v1.0/ui'</span>,</div><div class="line">        <span class="string">'ui/Panel'</span>: <span class="string">'esui/v1.2/ui/Panel'</span>,</div><div class="line">        <span class="string">'tangram'</span>: <span class="string">'third_party/tangram/v1.0'</span>,</div><div class="line">        <span class="string">'themes'</span>: <span class="string">'//www.baidu.com/css/styles/blue'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>ID-to-path</code>的阶段，如果<code>模块</code>或者<code>资源</code>是以<code>ui</code>, <code>ui/Panel</code>, <code>tangram</code>开头的话，那么就会去配置指定的地方去加载。例如：</p>
<ul>
<li><code>ui/Button</code> =&gt; <code>/fe/code/path/esui/v1.0/ui/Button.js</code></li>
<li><code>ui/Panel</code> =&gt; <code>/fe/code/path/esui/v1.2/ui/Panel.js</code></li>
<li><code>js!tangram</code> =&gt; <code>/fe/code/path/third_party/tangram/v1.0/tangram.js</code></li>
<li><code>css!themes/base</code> =&gt; <code>//www.baidu.com/css/styles/blue/base.css</code></li>
</ul>
<p>另外，需要支持为插件指定不同的的<code>paths</code>，语法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    baseUrl: <span class="string">'/fe/code/path'</span>,</div><div class="line">    paths: &#123;</div><div class="line">        <span class="string">'css!'</span>: <span class="string">'//www.baidu.com/css/styles/blue'</span>,</div><div class="line">        <span class="string">'css!foo'</span>: <span class="string">'bar'</span>,</div><div class="line">        <span class="string">'js!'</span>: <span class="string">'//www.google.com/js/gcl'</span>,</div><div class="line">        <span class="string">'js!foo'</span>: <span class="string">'bar'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="模块加载器插件"><a href="#模块加载器插件" class="headerlink" title="模块加载器插件"></a>模块加载器插件</h2><p>该文档不限定使用何种<code>AMD Loader</code>，但是一个<code>AMD Loader</code>应该支持至少三种插件（css，js，tpl）才能满足我们的业务需求。</p>
<h3 id="插件语法"><a href="#插件语法" class="headerlink" title="插件语法"></a>插件语法</h3><pre><code>[Plugin Module ID]![resource ID]
</code></pre><p><code>Plugin Module Id</code>是插件的<code>moduleId</code>，例如<code>css</code>，<code>js</code>，<code>tpl</code>等等。<code>!</code>是分割符。</p>
<p><code>resource ID</code>是<code>资源Id</code>，可以是<code>top-level</code>或者<code>relative</code>。如果<code>resource ID</code>是<code>relative</code>，那么相对的是当前<code>模块的Id</code>，而不是当前<code>模块Url</code>。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// src/Button.js</span></div><div class="line">define( <span class="function"><span class="keyword">function</span>(<span class="params"> require, exports, module </span>)</span>&#123;</div><div class="line">    <span class="built_in">require</span>( <span class="string">"css!./css/Button.css"</span> );</div><div class="line">    <span class="built_in">require</span>( <span class="string">"css!base.css"</span> );</div><div class="line">    <span class="built_in">require</span>( <span class="string">"tpl!./tpl/Button.tpl.html"</span> );</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>如果当前模块的路径是<code>${root}/src/ui/Button.js</code>，那么该模块依赖的<code>Button.css</code>和<code>Button.tpl.html</code>的路径就应该分别是<code>${root}/src/css/ui/Button.css</code>，<code>${root}/src/tpl/Button.tpl.html</code>；该模块依赖的<code>base.css</code>的路径应该是<code>${baseUrl}/base.css</code>。</p>
<h3 id="css插件"><a href="#css插件" class="headerlink" title="css插件"></a>css插件</h3><p>参考上面的示例。如果<code>resource ID</code>省略后缀名的话，默认是<code>.css</code>；如果有后缀名，以具体的后缀名为准。例如：<code>.less</code>。</p>
<h3 id="js插件"><a href="#js插件" class="headerlink" title="js插件"></a>js插件</h3><p>用来加载不符合该文档规范的js文件，例如<code>jquery</code>，<code>tangram</code>等等。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// src/js/ui/Button.js</span></div><div class="line">define( <span class="function"><span class="keyword">function</span>(<span class="params"> require, exports, module </span>) </span>&#123;</div><div class="line">    <span class="built_in">require</span>( <span class="string">"js!jquery"</span> );</div><div class="line">    <span class="built_in">require</span>( <span class="string">"js!./tangram"</span> );</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="tpl插件"><a href="#tpl插件" class="headerlink" title="tpl插件"></a>tpl插件</h3><p>如果项目需要前端模板，需要通过tpl插件加载。tpl插件由模板引擎提供方实现。插件的语法应该跟上述<code>js</code>，<code>css</code>插件的语法保持一致，例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>( <span class="string">"tpl!./foo.tpl.html"</span> );</div></pre></td></tr></table></figure>
<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="为什么不能采用define-moduleId-deps-factory-来定义模块？"><a href="#为什么不能采用define-moduleId-deps-factory-来定义模块？" class="headerlink" title="为什么不能采用define(moduleId, deps, factory)来定义模块？"></a>为什么不能采用define(moduleId, deps, factory)来定义模块？</h3><p><code>define(moduleId, deps, factory)</code>这种写法，很容易出现很长的deps，影响代码的风格。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">define(</div><div class="line">    <span class="string">"module/id"</span>, </div><div class="line">    [</div><div class="line">        <span class="string">"module/a"</span>, </div><div class="line">        <span class="string">"module/b"</span>, </div><div class="line">        <span class="string">"module/c"</span></div><div class="line">    ], </div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"> require </span>) </span>&#123;</div><div class="line">        <span class="comment">// blabla...</span></div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<p>构建工具对代码进行处理和编译时，允许将代码编译成这种风格，明确硬依赖。</p>
<h3 id="相对于模块的Id和相对于模块Url有什么区别？"><a href="#相对于模块的Id和相对于模块Url有什么区别？" class="headerlink" title="相对于模块的Id和相对于模块Url有什么区别？"></a>相对于模块的Id和相对于模块Url有什么区别？</h3><p>还是看 <a href="https://github.com/ecomfe/edp/issues/13#issuecomment-14383810" target="_blank" rel="external">erik的解释吧</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;该文档主要的设计目标是定义前端代码的模块规范，便于开发资源的共享和复用。该文档&lt;br&gt;在 &lt;a href=&quot;https://github.com/amdjs/amdjs-api/wiki&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;amdjs&lt;/a&gt; 规范的基础上，进行了更细粒度的规范化。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://www.hqxdb.com/categories/javascript/"/>
    
      <category term="规范" scheme="https://www.hqxdb.com/categories/javascript/%E8%A7%84%E8%8C%83/"/>
    
    
      <category term="javascript" scheme="https://www.hqxdb.com/tags/javascript/"/>
    
      <category term="规范" scheme="https://www.hqxdb.com/tags/%E8%A7%84%E8%8C%83/"/>
    
      <category term="AMD" scheme="https://www.hqxdb.com/tags/AMD/"/>
    
      <category term="CMD" scheme="https://www.hqxdb.com/tags/CMD/"/>
    
  </entry>
  
  <entry>
    <title>包结构规范 (1.1)</title>
    <link href="https://www.hqxdb.com/2017/08/23/JS%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83/package/"/>
    <id>https://www.hqxdb.com/2017/08/23/JS书写规范/package/</id>
    <published>2017-08-23T14:06:46.000Z</published>
    <updated>2017-08-27T02:52:08.942Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>该文档主要的设计目标是商业体系<code>前端</code>资源分包进行约定规范，使开发资源容易被共享和复用。</p>
<a id="more"></a> 
<h3 id="编撰"><a href="#编撰" class="headerlink" title="编撰"></a>编撰</h3><p>李玉北、erik、黄后锦、王杨、张立理、赵雷。</p>
<p>本文档由<code>商业运营体系前端技术组</code>审校发布。</p>
<h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>在本文档中，使用的关键字会以中文+括号包含的关键字英文表示：必须(MUST)。关键字”MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL”被定义在rfc2119中。</p>
<h3 id="规范说明约定"><a href="#规范说明约定" class="headerlink" title="规范说明约定"></a>规范说明约定</h3><p>以下规范文档中，以<code>${root}</code>表示包的根目录。</p>
<h3 id="包开发说明"><a href="#包开发说明" class="headerlink" title="包开发说明"></a>包开发说明</h3><h4 id="包定义"><a href="#包定义" class="headerlink" title="包定义"></a>包定义</h4><p><code>包</code>是实现某个独立功能，有复用价值的代码集。在具体的实现过程中， <em>必须(MUST)</em> 按照<a href="module.text">模块和加载器规范</a>来开发和管理模块。</p>
<h4 id="模块定义"><a href="#模块定义" class="headerlink" title="模块定义"></a>模块定义</h4><p><code>包</code>中的模块定义时 <em>必须(MUST)</em> 采用匿名id<code>define( factory )</code>进行定义， <em>不允许(MUST NOT)</em> 使用<code>define( moduleId, factory )</code>。</p>
<h4 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h4><p><code>包</code>中的模块对其他模块的依赖分成两种：<code>内部模块依赖</code>和<code>外部包依赖</code>。下面是关于模块依赖的管理说明：</p>
<ol>
<li>对<code>内部模块依赖</code>的情况， <em>必须(MUST)</em> 保证内部模块id与路径的对应关系。require依赖引用 <em>必须(MUST)</em> 使用<code>relative id</code>， <em>不允许(MUST NOT)</em> 使用<code>top-level id</code>。</li>
<li>对<code>外部包依赖</code>的情况，require依赖引用 <em>必须(MUST)</em> 使用<code>top-level id</code>。</li>
</ol>
<p>开发时，我们通常会做一些测试用例或示例，此时需要通过AMD Loader将当前包粘合到页面环境，并使其可运行。这时我们需要遵守一些规则：</p>
<ol>
<li>对<code>内部模块依赖</code>，AMD Loader配置 <em>推荐(RECOMMENDED)</em> 通过<code>packages</code>将<code>location</code>配置到<code>${root}</code>下的<code>src</code>目录， <em>不允许(MUST NOT)</em> 通过<code>paths</code>进行路径映射。</li>
<li>对<code>外部包依赖</code>，请参照<a href="directory.md">项目目录结构规范</a>将相关依赖包导入，并且 <em>必须(MUST)</em> 通过<code>packages</code>项配置AMD Loader。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 示例：ER package的test配置</span></div><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">    packages: [</div><div class="line">        &#123;</div><div class="line">            name: <span class="string">'er'</span>,</div><div class="line">            location: <span class="string">'../src'</span>,</div><div class="line">            main: <span class="string">'main'</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            name: <span class="string">'mini-event'</span>,</div><div class="line">            location: <span class="string">'../dep/mini-event/1.0.0/src'</span>,</div><div class="line">            main: <span class="string">'main'</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            name: <span class="string">'etpl'</span>,</div><div class="line">            location: <span class="string">'../dep/etpl/2.0.2/src'</span>,</div><div class="line">            main: <span class="string">'main'</span></div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><p><em>允许(SHALL)</em> 包含如下类型的资源：</p>
<p>脚本, 样式以及样式相关图片, 直接引用图片, html, 模板, 文档, 测试套件。</p>
<h2 id="包描述文件"><a href="#包描述文件" class="headerlink" title="包描述文件"></a>包描述文件</h2><p>包描述文件 <em>必须(MUST)</em> 置于<code>${root}</code>下，命名为package.json， <em>必须(MUST)</em> 是一个UTF-8编码的严格JSON格式的文本文件。</p>
<h3 id="必选字段"><a href="#必选字段" class="headerlink" title="必选字段"></a>必选字段</h3><ul>
<li><code>name</code>: 包名。 <em>必须(MUST)</em> 为由camel命名法产生的字母组成的字符串。</li>
<li><code>version</code>: 版本号。版本号 <em>必须(MUST)</em> 为字符串，需要符合<a href="http://semver.org/" target="_blank" rel="external">SemVer</a>的格式约定。</li>
<li><code>maintainers</code>: 维护者列表。该字段 <em>必须(MUST)</em> 是一个数组，数组中每项 <em>必须(MUST)</em> 包含维护者的名称字段”name”与电子邮件字段”email”。</li>
</ul>
<h3 id="可选字段"><a href="#可选字段" class="headerlink" title="可选字段"></a>可选字段</h3><ul>
<li><code>main</code>: 模块名，用来说明当前<code>包</code>的入口文件。如果包名为<code>foo</code>，那么执行<code>require(&quot;foo&quot;)</code>的时候，返回的内容就是当前模块<code>exports</code>的内容。</li>
<li><code>description</code>: 描述信息。 <em>必须(MUST)</em> 为字符串。</li>
<li><code>dependencies</code>: 依赖声明。该字段 <em>必须(MUST)</em> 是一个<code>JSON Object</code>，其中<code>key</code>为依赖的包名，<code>value</code>为版本号，支持如下的格式：<ul>
<li><code>version</code></li>
<li><code>&gt;version</code></li>
<li><code>&gt;=version</code></li>
<li><code>&lt;version</code></li>
<li><code>&lt;=version</code></li>
<li><code>*</code>: 任意版本</li>
</ul>
</li>
<li><code>devDependencies</code>: 类似<code>dependencies</code>的角色，但不是当前<code>包</code>必须的，只是在开发和调试的时候一些依赖的内容。</li>
<li><code>contributors</code>: 贡献者列表。该字段 <em>必须(MUST)</em> 是一个数组，数组中每项 <em>必须(MUST)</em> 包含维护者的名称字段<code>name</code>与电子邮件字段<code>email</code>。</li>
<li><code>homepage</code>: 该字段 <em>必须(MUST)</em> 为URL格式的字符串。</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"name"</span>: <span class="string">"zrender"</span>,</div><div class="line">    <span class="string">"version"</span>: <span class="string">"0.0.1"</span>,</div><div class="line">    <span class="string">"maintainers"</span>: [</div><div class="line">        &#123;<span class="string">"name"</span>: <span class="string">"foo"</span>, <span class="string">"email"</span>: <span class="string">"foo@baidu.com"</span>&#125;,</div><div class="line">        &#123;<span class="string">"name"</span>: <span class="string">"bar"</span>, <span class="string">"email"</span>: <span class="string">"bar@baidu.com"</span>, <span class="string">"url"</span>: <span class="string">"http://www.baidu.com/bar"</span>&#125;</div><div class="line">    ],</div><div class="line">    <span class="string">"dependencies"</span>: &#123;</div><div class="line">        <span class="string">"foo"</span>: <span class="string">"0.0.1"</span>,</div><div class="line">        <span class="string">"bar"</span>: <span class="string">"*"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"devDependencies"</span>: &#123;</div><div class="line">        <span class="string">"uglify-js"</span>: <span class="string">"*"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="包目录结构"><a href="#包目录结构" class="headerlink" title="包目录结构"></a>包目录结构</h2><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><pre><code>${root}/
    package.json
    README.md
    src/
        css/[?]
        img/
        main.js
    dep/
        foo/
        bar/
        jquery/
        tangram/
        mustache/
        ...
    test/
    doc/
</code></pre><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p><code>package.json</code> <em>必须(MUST)</em> 直接放在包顶层目录<code>${root}</code>中。</p>
<h3 id="src"><a href="#src" class="headerlink" title="src"></a>src</h3><p>按照通常的理解，一个<code>包项目</code>不应该特别复杂。下面是一个简单的例子，详细的目录划分方法和原则请参考 <a href="directory.md">项目目录结构规范</a> 。</p>
<pre><code>${root}/
    src/
        main.js
        Control.js
        Button.js
        css/
            button.css
    package.json
    README.md
</code></pre><h3 id="dep"><a href="#dep" class="headerlink" title="dep"></a>dep</h3><p>用来存放<code>dependencies package</code>的代码， <em>不允许(MUST NOT)</em> 放置任何其它的内容。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li><a href="https://npmjs.org/doc/json.html" target="_blank" rel="external">https://npmjs.org/doc/json.html</a></li>
<li><a href="http://twitter.github.com/bower/" target="_blank" rel="external">http://twitter.github.com/bower/</a></li>
<li><a href="http://yeoman.io/" target="_blank" rel="external">http://yeoman.io/</a></li>
<li><a href="http://semver.org/" target="_blank" rel="external">http://semver.org/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;该文档主要的设计目标是商业体系&lt;code&gt;前端&lt;/code&gt;资源分包进行约定规范，使开发资源容易被共享和复用。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://www.hqxdb.com/categories/javascript/"/>
    
      <category term="规范" scheme="https://www.hqxdb.com/categories/javascript/%E8%A7%84%E8%8C%83/"/>
    
    
      <category term="javascript" scheme="https://www.hqxdb.com/tags/javascript/"/>
    
      <category term="规范" scheme="https://www.hqxdb.com/tags/%E8%A7%84%E8%8C%83/"/>
    
      <category term="package" scheme="https://www.hqxdb.com/tags/package/"/>
    
  </entry>
  
  <entry>
    <title>hexo+githubpage构建https网站(一)</title>
    <link href="https://www.hqxdb.com/2017/08/17/article-title/"/>
    <id>https://www.hqxdb.com/2017/08/17/article-title/</id>
    <published>2017-08-17T14:35:45.000Z</published>
    <updated>2017-08-27T02:52:22.828Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">脚下的路还是要一步一步走</blockquote><br><a id="more"></a> </p>
<h2 id="大概可以分为以下几个步骤"><a href="#大概可以分为以下几个步骤" class="headerlink" title="大概可以分为以下几个步骤"></a>大概可以分为以下几个步骤</h2><ol>
<li>搭建环境准备（包括node.js和git环境，gitHub账户的配置）</li>
<li>安装Hexo</li>
<li>配置Hexo</li>
<li>怎样将Hexo与github page 联系起来</li>
<li>Cloudflare cdn代理https</li>
<li>怎样发布文章</li>
<li>主题 推荐</li>
<li>主题Next的简单配置</li>
<li>添加sitemap和feed插件</li>
<li>添加404 公益页面</li>
<li>增加评论功能(来必力)</li>
<li>分享功能</li>
</ol>
<h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><ul>
<li>Node.js 的安装和准备 </li>
<li>Git的安装和准备 </li>
<li>gitHub账户的配置</li>
</ul>
<h3 id="Node-js-的安装和准备"><a href="#Node-js-的安装和准备" class="headerlink" title="Node.js 的安装和准备"></a>Node.js 的安装和准备</h3><ol>
<li><p>下载node<br>More info: <a href="https://nodejs.org/en/" target="_blank" rel="external">node官网会自动选择版本,请选择LTS版本</a><br>1.下面安装一路next回车就好<br><img src="http://ww3.sinaimg.cn/large/9fe4afa0gw1faljhotcr1j20dv0atq4u.jpg"><br>然后我们检查一下是不是要求的组件都安装好了，同时按下Win和R，打开运行窗口：</p>
 <figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node -v</div><div class="line">npm -v</div></pre></td></tr></table></figure>
</li>
</ol>
<p>出现版本号即可</p>
<h3 id="Git的安装和准备"><a href="#Git的安装和准备" class="headerlink" title="Git的安装和准备"></a>Git的安装和准备</h3><ol>
<li>下载git<br>More info: <a href="https://git-scm.com/downloads" target="_blank" rel="external">Git官网下载地址</a><br>和node安装一样 全程点击next就行</li>
</ol>
<h3 id="github账号注册配置"><a href="#github账号注册配置" class="headerlink" title="github账号注册配置"></a>github账号注册配置</h3><ol>
<li><p>打开More info: <a href="https://github.com/" target="_blank" rel="external">Github官网https://github.com/</a>,看不懂注册界面的用百度翻译自行注册。注册完成会给你的邮箱发送一个激活邮件，确认即可使用</p>
</li>
<li><p>登陆之后，点击页面右上角的加号，选择New repository：<br><img src="http://ww2.sinaimg.cn/large/9fe4afa0gw1faljww56v8j20ci0a975c.jpg" alt="" title=""></p>
</li>
<li><p>新建代码库</p>
</li>
</ol>
<p>进入代码库创建页面：</p>
<p>在Repository name下填写yourname.github.io，Description (optional)下填写一些简单的描述（不写也没有关系），如图所示：<br><img src="http://ww4.sinaimg.cn/large/9fe4afa0gw1faljv7hoqhj20p40fz0vo.jpg" alt="" title=""><br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">注意：比如我的github名称是xxooxx ,这里你就填 xxooxx.github.io,如果你的名字是nodego，那你就填 nodego.github.io</div></pre></td></tr></table></figure></p>
<ol>
<li>代码库设置<br>正确创建之后，你将会看到如下界面：<br><img src="http://ww1.sinaimg.cn/large/9fe4afa0gw1falk4end8ij20kg0cbtbl.jpg" alt="新代码库的界面" title=""></li>
</ol>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>在自己认为合适的地方创建一个文件夹，这里我以E：/hexo 为例子讲解，首先在E盘目录下创建Hexo文件夹，进入到该目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div></pre></td></tr></table></figure>
<p>操作之后如下图<br><img src="http://ww3.sinaimg.cn/large/9fe4afa0gw1falkcr5z7kj20ce074aav.jpg" alt="" title=""></p>
<p>基本上脚手架自动帮你把大部分插件安装好了<br>貌似记得新版他会自己install</p>
<p>等他操作在cmd中 输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo -v</div></pre></td></tr></table></figure></p>
<p>看到下面为正常</p>
<p><img src="http://ww2.sinaimg.cn/large/9fe4afa0gw1falkf052h7j205r06f0su.jpg" alt="" title=""></p>
<p>然后输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g</div></pre></td></tr></table></figure></p>
<p><img src="http://ww3.sinaimg.cn/large/9fe4afa0gw1falkiaws1xj208p045t9j.jpg" alt="" title=""></p>
<p>然后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s</div></pre></td></tr></table></figure></p>
<p>然后提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure></p>
<p>在浏览器中打开<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a><br>你将看到<br><img src="http://ww4.sinaimg.cn/large/9fe4afa0gw1falkk5mnsvj211y0lcten.jpg" alt="" title=""></p>
<h3 id="Hexo与github-page-联系起来"><a href="#Hexo与github-page-联系起来" class="headerlink" title="Hexo与github page 联系起来"></a>Hexo与github page 联系起来</h3><h4 id="如果你之前已经配置好git个人信息，请跳过这一个-步骤，"><a href="#如果你之前已经配置好git个人信息，请跳过这一个-步骤，" class="headerlink" title="如果你之前已经配置好git个人信息，请跳过这一个 步骤，"></a>如果你之前已经配置好git个人信息，请跳过这一个 步骤，</h4><ol>
<li><p>设置Git的user name和email：(如果是第一次的话)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;nodego&quot;</div><div class="line">git config --global user.email &quot;nodego@163.com&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>生成ssh</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;nodego@163.com&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>github账号绑定ssh  balabala</p>
</li>
</ol>
<h4 id="配置hexo根文件：在-config-yml文件中，找到Deployment，然后按照如下修改："><a href="#配置hexo根文件：在-config-yml文件中，找到Deployment，然后按照如下修改：" class="headerlink" title="配置hexo根文件：在_config.yml文件中，找到Deployment，然后按照如下修改："></a>配置hexo根文件：在_config.yml文件中，找到Deployment，然后按照如下修改：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:yourname/yourname.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<p>比如我的仓库的地址是git@github.com:nodego/nodego.github.io.git，所以配置如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com:gdutxiaoxu/gdutxiaoxu.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<h2 id="—–到此我们基本配置完成可以写文章了——"><a href="#—–到此我们基本配置完成可以写文章了——" class="headerlink" title="—–到此我们基本配置完成可以写文章了——"></a>—–到此我们基本配置完成可以写文章了——</h2><p>新建一篇博客，执行下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new post &quot;article title&quot;</div></pre></td></tr></table></figure></p>
<p>这时候在我的 电脑的目录下 E:\hexo\source\ _posts 将会看到 article title.md 文件</p>
<p>用MarDown编辑器打开就可以编辑文章了。文章编辑好之后，运行生成、部署命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g   // 生成</div><div class="line">hexo d   // 部署</div></pre></td></tr></table></figure>
<p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g -d  或者hexo d -g</div></pre></td></tr></table></figure></p>
<p><img src="http://ww2.sinaimg.cn/large/9fe4afa0gw1fan5dd0480j20cb04ndg2.jpg" alt="" title=""><br>部署成功后访问 你的地址，<a href="https://yourName.github.io（这里输入我的地址：" target="_blank" rel="external">https://yourName.github.io（这里输入我的地址：</a> <a href="https://nodego.github.io" target="_blank" rel="external">https://nodego.github.io</a> ),将可以看到生成的文章</p>
<p>如果这时候报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">deloyer not found:git</div></pre></td></tr></table></figure></p>
<p>请安装一个扩展：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<p>加班去喽！！！下次写下域名绑定githubpage，网站https 实现 ，next主题设置及其坑点</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;脚下的路还是要一步一步走&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="github" scheme="https://www.hqxdb.com/tags/github/"/>
    
      <category term="hexo" scheme="https://www.hqxdb.com/tags/hexo/"/>
    
      <category term="node" scheme="https://www.hqxdb.com/tags/node/"/>
    
      <category term="next" scheme="https://www.hqxdb.com/tags/next/"/>
    
  </entry>
  
</feed>
